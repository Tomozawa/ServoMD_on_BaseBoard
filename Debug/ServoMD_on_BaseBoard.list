
ServoMD_on_BaseBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080057dc  080057dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000148  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000208  08005a78  08005a78  00015a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c80  08005c80  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000007c  08005d1c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08005d1c  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039240  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053e3  00000000  00000000  000592e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c0  00000000  00000000  0005e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f58  00000000  00000000  00060088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000909c  00000000  00000000  00061fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d2b  00000000  00000000  0006b07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbef1  00000000  00000000  00084da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150c98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a5c  00000000  00000000  00150ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000075d9  00000000  00000000  00158744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080057c4 	.word	0x080057c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080057c4 	.word	0x080057c4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_fmul>:
 8000164:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000168:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800016c:	bf1e      	ittt	ne
 800016e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000172:	ea92 0f0c 	teqne	r2, ip
 8000176:	ea93 0f0c 	teqne	r3, ip
 800017a:	d06f      	beq.n	800025c <__aeabi_fmul+0xf8>
 800017c:	441a      	add	r2, r3
 800017e:	ea80 0c01 	eor.w	ip, r0, r1
 8000182:	0240      	lsls	r0, r0, #9
 8000184:	bf18      	it	ne
 8000186:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800018a:	d01e      	beq.n	80001ca <__aeabi_fmul+0x66>
 800018c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000190:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000194:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000198:	fba0 3101 	umull	r3, r1, r0, r1
 800019c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001a0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a4:	bf3e      	ittt	cc
 80001a6:	0049      	lslcc	r1, r1, #1
 80001a8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001ac:	005b      	lslcc	r3, r3, #1
 80001ae:	ea40 0001 	orr.w	r0, r0, r1
 80001b2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b6:	2afd      	cmp	r2, #253	; 0xfd
 80001b8:	d81d      	bhi.n	80001f6 <__aeabi_fmul+0x92>
 80001ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001c2:	bf08      	it	eq
 80001c4:	f020 0001 	biceq.w	r0, r0, #1
 80001c8:	4770      	bx	lr
 80001ca:	f090 0f00 	teq	r0, #0
 80001ce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001d2:	bf08      	it	eq
 80001d4:	0249      	lsleq	r1, r1, #9
 80001d6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001da:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001de:	3a7f      	subs	r2, #127	; 0x7f
 80001e0:	bfc2      	ittt	gt
 80001e2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001ea:	4770      	bxgt	lr
 80001ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001f0:	f04f 0300 	mov.w	r3, #0
 80001f4:	3a01      	subs	r2, #1
 80001f6:	dc5d      	bgt.n	80002b4 <__aeabi_fmul+0x150>
 80001f8:	f112 0f19 	cmn.w	r2, #25
 80001fc:	bfdc      	itt	le
 80001fe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000202:	4770      	bxle	lr
 8000204:	f1c2 0200 	rsb	r2, r2, #0
 8000208:	0041      	lsls	r1, r0, #1
 800020a:	fa21 f102 	lsr.w	r1, r1, r2
 800020e:	f1c2 0220 	rsb	r2, r2, #32
 8000212:	fa00 fc02 	lsl.w	ip, r0, r2
 8000216:	ea5f 0031 	movs.w	r0, r1, rrx
 800021a:	f140 0000 	adc.w	r0, r0, #0
 800021e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000222:	bf08      	it	eq
 8000224:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000228:	4770      	bx	lr
 800022a:	f092 0f00 	teq	r2, #0
 800022e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0040      	lsleq	r0, r0, #1
 8000236:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800023a:	3a01      	subeq	r2, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xce>
 800023e:	ea40 000c 	orr.w	r0, r0, ip
 8000242:	f093 0f00 	teq	r3, #0
 8000246:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800024a:	bf02      	ittt	eq
 800024c:	0049      	lsleq	r1, r1, #1
 800024e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000252:	3b01      	subeq	r3, #1
 8000254:	d0f9      	beq.n	800024a <__aeabi_fmul+0xe6>
 8000256:	ea41 010c 	orr.w	r1, r1, ip
 800025a:	e78f      	b.n	800017c <__aeabi_fmul+0x18>
 800025c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000260:	ea92 0f0c 	teq	r2, ip
 8000264:	bf18      	it	ne
 8000266:	ea93 0f0c 	teqne	r3, ip
 800026a:	d00a      	beq.n	8000282 <__aeabi_fmul+0x11e>
 800026c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000270:	bf18      	it	ne
 8000272:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000276:	d1d8      	bne.n	800022a <__aeabi_fmul+0xc6>
 8000278:	ea80 0001 	eor.w	r0, r0, r1
 800027c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f090 0f00 	teq	r0, #0
 8000286:	bf17      	itett	ne
 8000288:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800028c:	4608      	moveq	r0, r1
 800028e:	f091 0f00 	teqne	r1, #0
 8000292:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000296:	d014      	beq.n	80002c2 <__aeabi_fmul+0x15e>
 8000298:	ea92 0f0c 	teq	r2, ip
 800029c:	d101      	bne.n	80002a2 <__aeabi_fmul+0x13e>
 800029e:	0242      	lsls	r2, r0, #9
 80002a0:	d10f      	bne.n	80002c2 <__aeabi_fmul+0x15e>
 80002a2:	ea93 0f0c 	teq	r3, ip
 80002a6:	d103      	bne.n	80002b0 <__aeabi_fmul+0x14c>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	bf18      	it	ne
 80002ac:	4608      	movne	r0, r1
 80002ae:	d108      	bne.n	80002c2 <__aeabi_fmul+0x15e>
 80002b0:	ea80 0001 	eor.w	r0, r0, r1
 80002b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c0:	4770      	bx	lr
 80002c2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_drsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	e002      	b.n	80002d8 <__adddf3>
 80002d2:	bf00      	nop

080002d4 <__aeabi_dsub>:
 80002d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d8 <__adddf3>:
 80002d8:	b530      	push	{r4, r5, lr}
 80002da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e2:	ea94 0f05 	teq	r4, r5
 80002e6:	bf08      	it	eq
 80002e8:	ea90 0f02 	teqeq	r0, r2
 80002ec:	bf1f      	itttt	ne
 80002ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fe:	f000 80e2 	beq.w	80004c6 <__adddf3+0x1ee>
 8000302:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000306:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030a:	bfb8      	it	lt
 800030c:	426d      	neglt	r5, r5
 800030e:	dd0c      	ble.n	800032a <__adddf3+0x52>
 8000310:	442c      	add	r4, r5
 8000312:	ea80 0202 	eor.w	r2, r0, r2
 8000316:	ea81 0303 	eor.w	r3, r1, r3
 800031a:	ea82 0000 	eor.w	r0, r2, r0
 800031e:	ea83 0101 	eor.w	r1, r3, r1
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	2d36      	cmp	r5, #54	; 0x36
 800032c:	bf88      	it	hi
 800032e:	bd30      	pophi	{r4, r5, pc}
 8000330:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000334:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000338:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800033c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x70>
 8000342:	4240      	negs	r0, r0
 8000344:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000348:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800034c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000350:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x84>
 8000356:	4252      	negs	r2, r2
 8000358:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035c:	ea94 0f05 	teq	r4, r5
 8000360:	f000 80a7 	beq.w	80004b2 <__adddf3+0x1da>
 8000364:	f1a4 0401 	sub.w	r4, r4, #1
 8000368:	f1d5 0e20 	rsbs	lr, r5, #32
 800036c:	db0d      	blt.n	800038a <__adddf3+0xb2>
 800036e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000372:	fa22 f205 	lsr.w	r2, r2, r5
 8000376:	1880      	adds	r0, r0, r2
 8000378:	f141 0100 	adc.w	r1, r1, #0
 800037c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000380:	1880      	adds	r0, r0, r2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	4159      	adcs	r1, r3
 8000388:	e00e      	b.n	80003a8 <__adddf3+0xd0>
 800038a:	f1a5 0520 	sub.w	r5, r5, #32
 800038e:	f10e 0e20 	add.w	lr, lr, #32
 8000392:	2a01      	cmp	r2, #1
 8000394:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000398:	bf28      	it	cs
 800039a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	18c0      	adds	r0, r0, r3
 80003a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	d507      	bpl.n	80003be <__adddf3+0xe6>
 80003ae:	f04f 0e00 	mov.w	lr, #0
 80003b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80003be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c2:	d31b      	bcc.n	80003fc <__adddf3+0x124>
 80003c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c8:	d30c      	bcc.n	80003e4 <__adddf3+0x10c>
 80003ca:	0849      	lsrs	r1, r1, #1
 80003cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d4:	f104 0401 	add.w	r4, r4, #1
 80003d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e0:	f080 809a 	bcs.w	8000518 <__adddf3+0x240>
 80003e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e8:	bf08      	it	eq
 80003ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ee:	f150 0000 	adcs.w	r0, r0, #0
 80003f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f6:	ea41 0105 	orr.w	r1, r1, r5
 80003fa:	bd30      	pop	{r4, r5, pc}
 80003fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000400:	4140      	adcs	r0, r0
 8000402:	eb41 0101 	adc.w	r1, r1, r1
 8000406:	3c01      	subs	r4, #1
 8000408:	bf28      	it	cs
 800040a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040e:	d2e9      	bcs.n	80003e4 <__adddf3+0x10c>
 8000410:	f091 0f00 	teq	r1, #0
 8000414:	bf04      	itt	eq
 8000416:	4601      	moveq	r1, r0
 8000418:	2000      	moveq	r0, #0
 800041a:	fab1 f381 	clz	r3, r1
 800041e:	bf08      	it	eq
 8000420:	3320      	addeq	r3, #32
 8000422:	f1a3 030b 	sub.w	r3, r3, #11
 8000426:	f1b3 0220 	subs.w	r2, r3, #32
 800042a:	da0c      	bge.n	8000446 <__adddf3+0x16e>
 800042c:	320c      	adds	r2, #12
 800042e:	dd08      	ble.n	8000442 <__adddf3+0x16a>
 8000430:	f102 0c14 	add.w	ip, r2, #20
 8000434:	f1c2 020c 	rsb	r2, r2, #12
 8000438:	fa01 f00c 	lsl.w	r0, r1, ip
 800043c:	fa21 f102 	lsr.w	r1, r1, r2
 8000440:	e00c      	b.n	800045c <__adddf3+0x184>
 8000442:	f102 0214 	add.w	r2, r2, #20
 8000446:	bfd8      	it	le
 8000448:	f1c2 0c20 	rsble	ip, r2, #32
 800044c:	fa01 f102 	lsl.w	r1, r1, r2
 8000450:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000454:	bfdc      	itt	le
 8000456:	ea41 010c 	orrle.w	r1, r1, ip
 800045a:	4090      	lslle	r0, r2
 800045c:	1ae4      	subs	r4, r4, r3
 800045e:	bfa2      	ittt	ge
 8000460:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000464:	4329      	orrge	r1, r5
 8000466:	bd30      	popge	{r4, r5, pc}
 8000468:	ea6f 0404 	mvn.w	r4, r4
 800046c:	3c1f      	subs	r4, #31
 800046e:	da1c      	bge.n	80004aa <__adddf3+0x1d2>
 8000470:	340c      	adds	r4, #12
 8000472:	dc0e      	bgt.n	8000492 <__adddf3+0x1ba>
 8000474:	f104 0414 	add.w	r4, r4, #20
 8000478:	f1c4 0220 	rsb	r2, r4, #32
 800047c:	fa20 f004 	lsr.w	r0, r0, r4
 8000480:	fa01 f302 	lsl.w	r3, r1, r2
 8000484:	ea40 0003 	orr.w	r0, r0, r3
 8000488:	fa21 f304 	lsr.w	r3, r1, r4
 800048c:	ea45 0103 	orr.w	r1, r5, r3
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	f1c4 040c 	rsb	r4, r4, #12
 8000496:	f1c4 0220 	rsb	r2, r4, #32
 800049a:	fa20 f002 	lsr.w	r0, r0, r2
 800049e:	fa01 f304 	lsl.w	r3, r1, r4
 80004a2:	ea40 0003 	orr.w	r0, r0, r3
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	fa21 f004 	lsr.w	r0, r1, r4
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	f094 0f00 	teq	r4, #0
 80004b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ba:	bf06      	itte	eq
 80004bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c0:	3401      	addeq	r4, #1
 80004c2:	3d01      	subne	r5, #1
 80004c4:	e74e      	b.n	8000364 <__adddf3+0x8c>
 80004c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ca:	bf18      	it	ne
 80004cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d0:	d029      	beq.n	8000526 <__adddf3+0x24e>
 80004d2:	ea94 0f05 	teq	r4, r5
 80004d6:	bf08      	it	eq
 80004d8:	ea90 0f02 	teqeq	r0, r2
 80004dc:	d005      	beq.n	80004ea <__adddf3+0x212>
 80004de:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e2:	bf04      	itt	eq
 80004e4:	4619      	moveq	r1, r3
 80004e6:	4610      	moveq	r0, r2
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea91 0f03 	teq	r1, r3
 80004ee:	bf1e      	ittt	ne
 80004f0:	2100      	movne	r1, #0
 80004f2:	2000      	movne	r0, #0
 80004f4:	bd30      	popne	{r4, r5, pc}
 80004f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fa:	d105      	bne.n	8000508 <__adddf3+0x230>
 80004fc:	0040      	lsls	r0, r0, #1
 80004fe:	4149      	adcs	r1, r1
 8000500:	bf28      	it	cs
 8000502:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000506:	bd30      	pop	{r4, r5, pc}
 8000508:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800050c:	bf3c      	itt	cc
 800050e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000512:	bd30      	popcc	{r4, r5, pc}
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000518:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800051c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000520:	f04f 0000 	mov.w	r0, #0
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052a:	bf1a      	itte	ne
 800052c:	4619      	movne	r1, r3
 800052e:	4610      	movne	r0, r2
 8000530:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000534:	bf1c      	itt	ne
 8000536:	460b      	movne	r3, r1
 8000538:	4602      	movne	r2, r0
 800053a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053e:	bf06      	itte	eq
 8000540:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000544:	ea91 0f03 	teqeq	r1, r3
 8000548:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	bf00      	nop

08000550 <__aeabi_ui2d>:
 8000550:	f090 0f00 	teq	r0, #0
 8000554:	bf04      	itt	eq
 8000556:	2100      	moveq	r1, #0
 8000558:	4770      	bxeq	lr
 800055a:	b530      	push	{r4, r5, lr}
 800055c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000560:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000564:	f04f 0500 	mov.w	r5, #0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e750      	b.n	8000410 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_i2d>:
 8000570:	f090 0f00 	teq	r0, #0
 8000574:	bf04      	itt	eq
 8000576:	2100      	moveq	r1, #0
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000580:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000584:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000588:	bf48      	it	mi
 800058a:	4240      	negmi	r0, r0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e73e      	b.n	8000410 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_f2d>:
 8000594:	0042      	lsls	r2, r0, #1
 8000596:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059a:	ea4f 0131 	mov.w	r1, r1, rrx
 800059e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a2:	bf1f      	itttt	ne
 80005a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b0:	4770      	bxne	lr
 80005b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b6:	bf08      	it	eq
 80005b8:	4770      	bxeq	lr
 80005ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005be:	bf04      	itt	eq
 80005c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c4:	4770      	bxeq	lr
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d4:	e71c      	b.n	8000410 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_ul2d>:
 80005d8:	ea50 0201 	orrs.w	r2, r0, r1
 80005dc:	bf08      	it	eq
 80005de:	4770      	bxeq	lr
 80005e0:	b530      	push	{r4, r5, lr}
 80005e2:	f04f 0500 	mov.w	r5, #0
 80005e6:	e00a      	b.n	80005fe <__aeabi_l2d+0x16>

080005e8 <__aeabi_l2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f6:	d502      	bpl.n	80005fe <__aeabi_l2d+0x16>
 80005f8:	4240      	negs	r0, r0
 80005fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000602:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000606:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060a:	f43f aed8 	beq.w	80003be <__adddf3+0xe6>
 800060e:	f04f 0203 	mov.w	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000626:	f1c2 0320 	rsb	r3, r2, #32
 800062a:	fa00 fc03 	lsl.w	ip, r0, r3
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	fa01 fe03 	lsl.w	lr, r1, r3
 8000636:	ea40 000e 	orr.w	r0, r0, lr
 800063a:	fa21 f102 	lsr.w	r1, r1, r2
 800063e:	4414      	add	r4, r2
 8000640:	e6bd      	b.n	80003be <__adddf3+0xe6>
 8000642:	bf00      	nop

08000644 <__aeabi_dmul>:
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000652:	bf1d      	ittte	ne
 8000654:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000658:	ea94 0f0c 	teqne	r4, ip
 800065c:	ea95 0f0c 	teqne	r5, ip
 8000660:	f000 f8de 	bleq	8000820 <__aeabi_dmul+0x1dc>
 8000664:	442c      	add	r4, r5
 8000666:	ea81 0603 	eor.w	r6, r1, r3
 800066a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000672:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000676:	bf18      	it	ne
 8000678:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000684:	d038      	beq.n	80006f8 <__aeabi_dmul+0xb4>
 8000686:	fba0 ce02 	umull	ip, lr, r0, r2
 800068a:	f04f 0500 	mov.w	r5, #0
 800068e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000692:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000696:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069a:	f04f 0600 	mov.w	r6, #0
 800069e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a2:	f09c 0f00 	teq	ip, #0
 80006a6:	bf18      	it	ne
 80006a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b8:	d204      	bcs.n	80006c4 <__aeabi_dmul+0x80>
 80006ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006be:	416d      	adcs	r5, r5
 80006c0:	eb46 0606 	adc.w	r6, r6, r6
 80006c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006dc:	bf88      	it	hi
 80006de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e2:	d81e      	bhi.n	8000722 <__aeabi_dmul+0xde>
 80006e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e8:	bf08      	it	eq
 80006ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ee:	f150 0000 	adcs.w	r0, r0, #0
 80006f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006fc:	ea46 0101 	orr.w	r1, r6, r1
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800070c:	bfc2      	ittt	gt
 800070e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000712:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000716:	bd70      	popgt	{r4, r5, r6, pc}
 8000718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800071c:	f04f 0e00 	mov.w	lr, #0
 8000720:	3c01      	subs	r4, #1
 8000722:	f300 80ab 	bgt.w	800087c <__aeabi_dmul+0x238>
 8000726:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072a:	bfde      	ittt	le
 800072c:	2000      	movle	r0, #0
 800072e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000732:	bd70      	pople	{r4, r5, r6, pc}
 8000734:	f1c4 0400 	rsb	r4, r4, #0
 8000738:	3c20      	subs	r4, #32
 800073a:	da35      	bge.n	80007a8 <__aeabi_dmul+0x164>
 800073c:	340c      	adds	r4, #12
 800073e:	dc1b      	bgt.n	8000778 <__aeabi_dmul+0x134>
 8000740:	f104 0414 	add.w	r4, r4, #20
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f305 	lsl.w	r3, r0, r5
 800074c:	fa20 f004 	lsr.w	r0, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800075c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	fa21 f604 	lsr.w	r6, r1, r4
 8000768:	eb42 0106 	adc.w	r1, r2, r6
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f1c4 040c 	rsb	r4, r4, #12
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f304 	lsl.w	r3, r0, r4
 8000784:	fa20 f005 	lsr.w	r0, r0, r5
 8000788:	fa01 f204 	lsl.w	r2, r1, r4
 800078c:	ea40 0002 	orr.w	r0, r0, r2
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000798:	f141 0100 	adc.w	r1, r1, #0
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f205 	lsl.w	r2, r0, r5
 80007b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b4:	fa20 f304 	lsr.w	r3, r0, r4
 80007b8:	fa01 f205 	lsl.w	r2, r1, r5
 80007bc:	ea43 0302 	orr.w	r3, r3, r2
 80007c0:	fa21 f004 	lsr.w	r0, r1, r4
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	fa21 f204 	lsr.w	r2, r1, r4
 80007cc:	ea20 0002 	bic.w	r0, r0, r2
 80007d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d8:	bf08      	it	eq
 80007da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	f094 0f00 	teq	r4, #0
 80007e4:	d10f      	bne.n	8000806 <__aeabi_dmul+0x1c2>
 80007e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ea:	0040      	lsls	r0, r0, #1
 80007ec:	eb41 0101 	adc.w	r1, r1, r1
 80007f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f4:	bf08      	it	eq
 80007f6:	3c01      	subeq	r4, #1
 80007f8:	d0f7      	beq.n	80007ea <__aeabi_dmul+0x1a6>
 80007fa:	ea41 0106 	orr.w	r1, r1, r6
 80007fe:	f095 0f00 	teq	r5, #0
 8000802:	bf18      	it	ne
 8000804:	4770      	bxne	lr
 8000806:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080a:	0052      	lsls	r2, r2, #1
 800080c:	eb43 0303 	adc.w	r3, r3, r3
 8000810:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000814:	bf08      	it	eq
 8000816:	3d01      	subeq	r5, #1
 8000818:	d0f7      	beq.n	800080a <__aeabi_dmul+0x1c6>
 800081a:	ea43 0306 	orr.w	r3, r3, r6
 800081e:	4770      	bx	lr
 8000820:	ea94 0f0c 	teq	r4, ip
 8000824:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000828:	bf18      	it	ne
 800082a:	ea95 0f0c 	teqne	r5, ip
 800082e:	d00c      	beq.n	800084a <__aeabi_dmul+0x206>
 8000830:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000834:	bf18      	it	ne
 8000836:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083a:	d1d1      	bne.n	80007e0 <__aeabi_dmul+0x19c>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084e:	bf06      	itte	eq
 8000850:	4610      	moveq	r0, r2
 8000852:	4619      	moveq	r1, r3
 8000854:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000858:	d019      	beq.n	800088e <__aeabi_dmul+0x24a>
 800085a:	ea94 0f0c 	teq	r4, ip
 800085e:	d102      	bne.n	8000866 <__aeabi_dmul+0x222>
 8000860:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000864:	d113      	bne.n	800088e <__aeabi_dmul+0x24a>
 8000866:	ea95 0f0c 	teq	r5, ip
 800086a:	d105      	bne.n	8000878 <__aeabi_dmul+0x234>
 800086c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000870:	bf1c      	itt	ne
 8000872:	4610      	movne	r0, r2
 8000874:	4619      	movne	r1, r3
 8000876:	d10a      	bne.n	800088e <__aeabi_dmul+0x24a>
 8000878:	ea81 0103 	eor.w	r1, r1, r3
 800087c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000880:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000884:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000888:	f04f 0000 	mov.w	r0, #0
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000892:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000896:	bd70      	pop	{r4, r5, r6, pc}

08000898 <__aeabi_ddiv>:
 8000898:	b570      	push	{r4, r5, r6, lr}
 800089a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a6:	bf1d      	ittte	ne
 80008a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008ac:	ea94 0f0c 	teqne	r4, ip
 80008b0:	ea95 0f0c 	teqne	r5, ip
 80008b4:	f000 f8a7 	bleq	8000a06 <__aeabi_ddiv+0x16e>
 80008b8:	eba4 0405 	sub.w	r4, r4, r5
 80008bc:	ea81 0e03 	eor.w	lr, r1, r3
 80008c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c8:	f000 8088 	beq.w	80009dc <__aeabi_ddiv+0x144>
 80008cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f0:	429d      	cmp	r5, r3
 80008f2:	bf08      	it	eq
 80008f4:	4296      	cmpeq	r6, r2
 80008f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fe:	d202      	bcs.n	8000906 <__aeabi_ddiv+0x6e>
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	1ab6      	subs	r6, r6, r2
 8000908:	eb65 0503 	sbc.w	r5, r5, r3
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000916:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 000c 	orrcs.w	r0, r0, ip
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000974:	ea55 0e06 	orrs.w	lr, r5, r6
 8000978:	d018      	beq.n	80009ac <__aeabi_ddiv+0x114>
 800097a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000982:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000986:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000992:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000996:	d1c0      	bne.n	800091a <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	d10b      	bne.n	80009b6 <__aeabi_ddiv+0x11e>
 800099e:	ea41 0100 	orr.w	r1, r1, r0
 80009a2:	f04f 0000 	mov.w	r0, #0
 80009a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009aa:	e7b6      	b.n	800091a <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	bf04      	itt	eq
 80009b2:	4301      	orreq	r1, r0
 80009b4:	2000      	moveq	r0, #0
 80009b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ba:	bf88      	it	hi
 80009bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c0:	f63f aeaf 	bhi.w	8000722 <__aeabi_dmul+0xde>
 80009c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c8:	bf04      	itt	eq
 80009ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d2:	f150 0000 	adcs.w	r0, r0, #0
 80009d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e8:	bfc2      	ittt	gt
 80009ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	popgt	{r4, r5, r6, pc}
 80009f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f8:	f04f 0e00 	mov.w	lr, #0
 80009fc:	3c01      	subs	r4, #1
 80009fe:	e690      	b.n	8000722 <__aeabi_dmul+0xde>
 8000a00:	ea45 0e06 	orr.w	lr, r5, r6
 8000a04:	e68d      	b.n	8000722 <__aeabi_dmul+0xde>
 8000a06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0a:	ea94 0f0c 	teq	r4, ip
 8000a0e:	bf08      	it	eq
 8000a10:	ea95 0f0c 	teqeq	r5, ip
 8000a14:	f43f af3b 	beq.w	800088e <__aeabi_dmul+0x24a>
 8000a18:	ea94 0f0c 	teq	r4, ip
 8000a1c:	d10a      	bne.n	8000a34 <__aeabi_ddiv+0x19c>
 8000a1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a22:	f47f af34 	bne.w	800088e <__aeabi_dmul+0x24a>
 8000a26:	ea95 0f0c 	teq	r5, ip
 8000a2a:	f47f af25 	bne.w	8000878 <__aeabi_dmul+0x234>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e72c      	b.n	800088e <__aeabi_dmul+0x24a>
 8000a34:	ea95 0f0c 	teq	r5, ip
 8000a38:	d106      	bne.n	8000a48 <__aeabi_ddiv+0x1b0>
 8000a3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3e:	f43f aefd 	beq.w	800083c <__aeabi_dmul+0x1f8>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e722      	b.n	800088e <__aeabi_dmul+0x24a>
 8000a48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a4c:	bf18      	it	ne
 8000a4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a52:	f47f aec5 	bne.w	80007e0 <__aeabi_dmul+0x19c>
 8000a56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5a:	f47f af0d 	bne.w	8000878 <__aeabi_dmul+0x234>
 8000a5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a62:	f47f aeeb 	bne.w	800083c <__aeabi_dmul+0x1f8>
 8000a66:	e712      	b.n	800088e <__aeabi_dmul+0x24a>

08000a68 <__aeabi_d2uiz>:
 8000a68:	004a      	lsls	r2, r1, #1
 8000a6a:	d211      	bcs.n	8000a90 <__aeabi_d2uiz+0x28>
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d211      	bcs.n	8000a96 <__aeabi_d2uiz+0x2e>
 8000a72:	d50d      	bpl.n	8000a90 <__aeabi_d2uiz+0x28>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d40e      	bmi.n	8000a9c <__aeabi_d2uiz+0x34>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_d2uiz+0x3a>
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0000 	mov.w	r0, #0
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_frsub>:
 8000aa8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aac:	e002      	b.n	8000ab4 <__addsf3>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_fsub>:
 8000ab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab4 <__addsf3>:
 8000ab4:	0042      	lsls	r2, r0, #1
 8000ab6:	bf1f      	itttt	ne
 8000ab8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000abc:	ea92 0f03 	teqne	r2, r3
 8000ac0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac8:	d06a      	beq.n	8000ba0 <__addsf3+0xec>
 8000aca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ace:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad2:	bfc1      	itttt	gt
 8000ad4:	18d2      	addgt	r2, r2, r3
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	4048      	eorgt	r0, r1
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	bfb8      	it	lt
 8000ade:	425b      	neglt	r3, r3
 8000ae0:	2b19      	cmp	r3, #25
 8000ae2:	bf88      	it	hi
 8000ae4:	4770      	bxhi	lr
 8000ae6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000afe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4249      	negne	r1, r1
 8000b06:	ea92 0f03 	teq	r2, r3
 8000b0a:	d03f      	beq.n	8000b8c <__addsf3+0xd8>
 8000b0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b10:	fa41 fc03 	asr.w	ip, r1, r3
 8000b14:	eb10 000c 	adds.w	r0, r0, ip
 8000b18:	f1c3 0320 	rsb	r3, r3, #32
 8000b1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	d502      	bpl.n	8000b2c <__addsf3+0x78>
 8000b26:	4249      	negs	r1, r1
 8000b28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b30:	d313      	bcc.n	8000b5a <__addsf3+0xa6>
 8000b32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b36:	d306      	bcc.n	8000b46 <__addsf3+0x92>
 8000b38:	0840      	lsrs	r0, r0, #1
 8000b3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3e:	f102 0201 	add.w	r2, r2, #1
 8000b42:	2afe      	cmp	r2, #254	; 0xfe
 8000b44:	d251      	bcs.n	8000bea <__addsf3+0x136>
 8000b46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4e:	bf08      	it	eq
 8000b50:	f020 0001 	biceq.w	r0, r0, #1
 8000b54:	ea40 0003 	orr.w	r0, r0, r3
 8000b58:	4770      	bx	lr
 8000b5a:	0049      	lsls	r1, r1, #1
 8000b5c:	eb40 0000 	adc.w	r0, r0, r0
 8000b60:	3a01      	subs	r2, #1
 8000b62:	bf28      	it	cs
 8000b64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b68:	d2ed      	bcs.n	8000b46 <__addsf3+0x92>
 8000b6a:	fab0 fc80 	clz	ip, r0
 8000b6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b72:	ebb2 020c 	subs.w	r2, r2, ip
 8000b76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7a:	bfaa      	itet	ge
 8000b7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b80:	4252      	neglt	r2, r2
 8000b82:	4318      	orrge	r0, r3
 8000b84:	bfbc      	itt	lt
 8000b86:	40d0      	lsrlt	r0, r2
 8000b88:	4318      	orrlt	r0, r3
 8000b8a:	4770      	bx	lr
 8000b8c:	f092 0f00 	teq	r2, #0
 8000b90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b94:	bf06      	itte	eq
 8000b96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9a:	3201      	addeq	r2, #1
 8000b9c:	3b01      	subne	r3, #1
 8000b9e:	e7b5      	b.n	8000b0c <__addsf3+0x58>
 8000ba0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba8:	bf18      	it	ne
 8000baa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bae:	d021      	beq.n	8000bf4 <__addsf3+0x140>
 8000bb0:	ea92 0f03 	teq	r2, r3
 8000bb4:	d004      	beq.n	8000bc0 <__addsf3+0x10c>
 8000bb6:	f092 0f00 	teq	r2, #0
 8000bba:	bf08      	it	eq
 8000bbc:	4608      	moveq	r0, r1
 8000bbe:	4770      	bx	lr
 8000bc0:	ea90 0f01 	teq	r0, r1
 8000bc4:	bf1c      	itt	ne
 8000bc6:	2000      	movne	r0, #0
 8000bc8:	4770      	bxne	lr
 8000bca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bce:	d104      	bne.n	8000bda <__addsf3+0x126>
 8000bd0:	0040      	lsls	r0, r0, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bd8:	4770      	bx	lr
 8000bda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bde:	bf3c      	itt	cc
 8000be0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bxcc	lr
 8000be6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	4770      	bx	lr
 8000bf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf8:	bf16      	itet	ne
 8000bfa:	4608      	movne	r0, r1
 8000bfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c00:	4601      	movne	r1, r0
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	bf06      	itte	eq
 8000c06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0a:	ea90 0f01 	teqeq	r0, r1
 8000c0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c12:	4770      	bx	lr

08000c14 <__aeabi_ui2f>:
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e004      	b.n	8000c24 <__aeabi_i2f+0x8>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_i2f>:
 8000c1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c20:	bf48      	it	mi
 8000c22:	4240      	negmi	r0, r0
 8000c24:	ea5f 0c00 	movs.w	ip, r0
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c30:	4601      	mov	r1, r0
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	e01c      	b.n	8000c72 <__aeabi_l2f+0x2a>

08000c38 <__aeabi_ul2f>:
 8000c38:	ea50 0201 	orrs.w	r2, r0, r1
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e00a      	b.n	8000c5c <__aeabi_l2f+0x14>
 8000c46:	bf00      	nop

08000c48 <__aeabi_l2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__aeabi_l2f+0x14>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	ea5f 0c01 	movs.w	ip, r1
 8000c60:	bf02      	ittt	eq
 8000c62:	4684      	moveq	ip, r0
 8000c64:	4601      	moveq	r1, r0
 8000c66:	2000      	moveq	r0, #0
 8000c68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c6c:	bf08      	it	eq
 8000c6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c76:	fabc f28c 	clz	r2, ip
 8000c7a:	3a08      	subs	r2, #8
 8000c7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c80:	db10      	blt.n	8000ca4 <__aeabi_l2f+0x5c>
 8000c82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c86:	4463      	add	r3, ip
 8000c88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c94:	fa20 f202 	lsr.w	r2, r0, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ca2:	4770      	bx	lr
 8000ca4:	f102 0220 	add.w	r2, r2, #32
 8000ca8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc2:	4770      	bx	lr

08000cc4 <selfrel_offset31>:
 8000cc4:	6803      	ldr	r3, [r0, #0]
 8000cc6:	005a      	lsls	r2, r3, #1
 8000cc8:	bf4c      	ite	mi
 8000cca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000cce:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000cd2:	4418      	add	r0, r3
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <search_EIT_table>:
 8000cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cdc:	b339      	cbz	r1, 8000d2e <search_EIT_table+0x56>
 8000cde:	1e4f      	subs	r7, r1, #1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4615      	mov	r5, r2
 8000ce4:	463e      	mov	r6, r7
 8000ce6:	f04f 0800 	mov.w	r8, #0
 8000cea:	eb08 0106 	add.w	r1, r8, r6
 8000cee:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000cf2:	1049      	asrs	r1, r1, #1
 8000cf4:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000cf8:	4648      	mov	r0, r9
 8000cfa:	f7ff ffe3 	bl	8000cc4 <selfrel_offset31>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	00c8      	lsls	r0, r1, #3
 8000d02:	3008      	adds	r0, #8
 8000d04:	428f      	cmp	r7, r1
 8000d06:	4420      	add	r0, r4
 8000d08:	d00b      	beq.n	8000d22 <search_EIT_table+0x4a>
 8000d0a:	42ab      	cmp	r3, r5
 8000d0c:	d80b      	bhi.n	8000d26 <search_EIT_table+0x4e>
 8000d0e:	f7ff ffd9 	bl	8000cc4 <selfrel_offset31>
 8000d12:	3801      	subs	r0, #1
 8000d14:	42a8      	cmp	r0, r5
 8000d16:	f101 0801 	add.w	r8, r1, #1
 8000d1a:	d3e6      	bcc.n	8000cea <search_EIT_table+0x12>
 8000d1c:	4648      	mov	r0, r9
 8000d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d9fa      	bls.n	8000d1c <search_EIT_table+0x44>
 8000d26:	4588      	cmp	r8, r1
 8000d28:	d001      	beq.n	8000d2e <search_EIT_table+0x56>
 8000d2a:	1e4e      	subs	r6, r1, #1
 8000d2c:	e7dd      	b.n	8000cea <search_EIT_table+0x12>
 8000d2e:	f04f 0900 	mov.w	r9, #0
 8000d32:	4648      	mov	r0, r9
 8000d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000d38 <__gnu_unwind_get_pr_addr>:
 8000d38:	2801      	cmp	r0, #1
 8000d3a:	d007      	beq.n	8000d4c <__gnu_unwind_get_pr_addr+0x14>
 8000d3c:	2802      	cmp	r0, #2
 8000d3e:	d007      	beq.n	8000d50 <__gnu_unwind_get_pr_addr+0x18>
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__gnu_unwind_get_pr_addr+0x1c>)
 8000d42:	2800      	cmp	r0, #0
 8000d44:	bf0c      	ite	eq
 8000d46:	4618      	moveq	r0, r3
 8000d48:	2000      	movne	r0, #0
 8000d4a:	4770      	bx	lr
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <__gnu_unwind_get_pr_addr+0x20>)
 8000d4e:	4770      	bx	lr
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <__gnu_unwind_get_pr_addr+0x24>)
 8000d52:	4770      	bx	lr
 8000d54:	08001429 	.word	0x08001429
 8000d58:	0800142d 	.word	0x0800142d
 8000d5c:	08001431 	.word	0x08001431

08000d60 <get_eit_entry>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <get_eit_entry+0x94>)
 8000d64:	4604      	mov	r4, r0
 8000d66:	b083      	sub	sp, #12
 8000d68:	1e8d      	subs	r5, r1, #2
 8000d6a:	b33b      	cbz	r3, 8000dbc <get_eit_entry+0x5c>
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	a901      	add	r1, sp, #4
 8000d70:	f3af 8000 	nop.w
 8000d74:	b1e8      	cbz	r0, 8000db2 <get_eit_entry+0x52>
 8000d76:	9901      	ldr	r1, [sp, #4]
 8000d78:	462a      	mov	r2, r5
 8000d7a:	f7ff ffad 	bl	8000cd8 <search_EIT_table>
 8000d7e:	4601      	mov	r1, r0
 8000d80:	b1b8      	cbz	r0, 8000db2 <get_eit_entry+0x52>
 8000d82:	f7ff ff9f 	bl	8000cc4 <selfrel_offset31>
 8000d86:	684b      	ldr	r3, [r1, #4]
 8000d88:	64a0      	str	r0, [r4, #72]	; 0x48
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d02e      	beq.n	8000dec <get_eit_entry+0x8c>
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db27      	blt.n	8000de2 <get_eit_entry+0x82>
 8000d92:	1d08      	adds	r0, r1, #4
 8000d94:	f7ff ff96 	bl	8000cc4 <selfrel_offset31>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000d9e:	6803      	ldr	r3, [r0, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db12      	blt.n	8000dca <get_eit_entry+0x6a>
 8000da4:	f7ff ff8e 	bl	8000cc4 <selfrel_offset31>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2000      	movs	r0, #0
 8000dac:	6123      	str	r3, [r4, #16]
 8000dae:	b003      	add	sp, #12
 8000db0:	bd30      	pop	{r4, r5, pc}
 8000db2:	2300      	movs	r3, #0
 8000db4:	2009      	movs	r0, #9
 8000db6:	6123      	str	r3, [r4, #16]
 8000db8:	b003      	add	sp, #12
 8000dba:	bd30      	pop	{r4, r5, pc}
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <get_eit_entry+0x98>)
 8000dbe:	490f      	ldr	r1, [pc, #60]	; (8000dfc <get_eit_entry+0x9c>)
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	10c9      	asrs	r1, r1, #3
 8000dc6:	9101      	str	r1, [sp, #4]
 8000dc8:	e7d6      	b.n	8000d78 <get_eit_entry+0x18>
 8000dca:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000dce:	f7ff ffb3 	bl	8000d38 <__gnu_unwind_get_pr_addr>
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	bf14      	ite	ne
 8000dd8:	2000      	movne	r0, #0
 8000dda:	2009      	moveq	r0, #9
 8000ddc:	6123      	str	r3, [r4, #16]
 8000dde:	b003      	add	sp, #12
 8000de0:	bd30      	pop	{r4, r5, pc}
 8000de2:	2301      	movs	r3, #1
 8000de4:	1d08      	adds	r0, r1, #4
 8000de6:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000dea:	e7d8      	b.n	8000d9e <get_eit_entry+0x3e>
 8000dec:	2300      	movs	r3, #0
 8000dee:	2005      	movs	r0, #5
 8000df0:	6123      	str	r3, [r4, #16]
 8000df2:	e7dc      	b.n	8000dae <get_eit_entry+0x4e>
 8000df4:	00000000 	.word	0x00000000
 8000df8:	08005a78 	.word	0x08005a78
 8000dfc:	08005c80 	.word	0x08005c80

08000e00 <restore_non_core_regs>:
 8000e00:	6803      	ldr	r3, [r0, #0]
 8000e02:	b510      	push	{r4, lr}
 8000e04:	07da      	lsls	r2, r3, #31
 8000e06:	4604      	mov	r4, r0
 8000e08:	d406      	bmi.n	8000e18 <restore_non_core_regs+0x18>
 8000e0a:	079b      	lsls	r3, r3, #30
 8000e0c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000e10:	d509      	bpl.n	8000e26 <restore_non_core_regs+0x26>
 8000e12:	f000 fc5d 	bl	80016d0 <__gnu_Unwind_Restore_VFP_D>
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	0759      	lsls	r1, r3, #29
 8000e1a:	d509      	bpl.n	8000e30 <restore_non_core_regs+0x30>
 8000e1c:	071a      	lsls	r2, r3, #28
 8000e1e:	d50e      	bpl.n	8000e3e <restore_non_core_regs+0x3e>
 8000e20:	06db      	lsls	r3, r3, #27
 8000e22:	d513      	bpl.n	8000e4c <restore_non_core_regs+0x4c>
 8000e24:	bd10      	pop	{r4, pc}
 8000e26:	f000 fc4b 	bl	80016c0 <__gnu_Unwind_Restore_VFP>
 8000e2a:	6823      	ldr	r3, [r4, #0]
 8000e2c:	0759      	lsls	r1, r3, #29
 8000e2e:	d4f5      	bmi.n	8000e1c <restore_non_core_regs+0x1c>
 8000e30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000e34:	f000 fc54 	bl	80016e0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	071a      	lsls	r2, r3, #28
 8000e3c:	d4f0      	bmi.n	8000e20 <restore_non_core_regs+0x20>
 8000e3e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000e42:	f000 fc55 	bl	80016f0 <__gnu_Unwind_Restore_WMMXD>
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	06db      	lsls	r3, r3, #27
 8000e4a:	d4eb      	bmi.n	8000e24 <restore_non_core_regs+0x24>
 8000e4c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e54:	f000 bc90 	b.w	8001778 <__gnu_Unwind_Restore_WMMXC>

08000e58 <__gnu_unwind_24bit.constprop.0>:
 8000e58:	2009      	movs	r0, #9
 8000e5a:	4770      	bx	lr

08000e5c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	6800      	ldr	r0, [r0, #0]
 8000e60:	b100      	cbz	r0, 8000e64 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000e62:	4418      	add	r0, r3
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <_Unwind_DebugHook>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <unwind_phase2>:
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	4604      	mov	r4, r0
 8000e70:	460e      	mov	r6, r1
 8000e72:	4620      	mov	r0, r4
 8000e74:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000e76:	f7ff ff73 	bl	8000d60 <get_eit_entry>
 8000e7a:	4605      	mov	r5, r0
 8000e7c:	b998      	cbnz	r0, 8000ea6 <unwind_phase2+0x3a>
 8000e7e:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 8000e82:	4632      	mov	r2, r6
 8000e84:	4621      	mov	r1, r4
 8000e86:	2001      	movs	r0, #1
 8000e88:	6923      	ldr	r3, [r4, #16]
 8000e8a:	f8c4 c014 	str.w	ip, [r4, #20]
 8000e8e:	4798      	blx	r3
 8000e90:	2808      	cmp	r0, #8
 8000e92:	d0ee      	beq.n	8000e72 <unwind_phase2+0x6>
 8000e94:	2807      	cmp	r0, #7
 8000e96:	d106      	bne.n	8000ea6 <unwind_phase2+0x3a>
 8000e98:	4628      	mov	r0, r5
 8000e9a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000e9c:	f7ff ffe4 	bl	8000e68 <_Unwind_DebugHook>
 8000ea0:	1d30      	adds	r0, r6, #4
 8000ea2:	f000 fc01 	bl	80016a8 <__restore_core_regs>
 8000ea6:	f004 faf1 	bl	800548c <abort>
 8000eaa:	bf00      	nop

08000eac <unwind_phase2_forced>:
 8000eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb0:	f04f 0a00 	mov.w	sl, #0
 8000eb4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000eb8:	f10d 0e0c 	add.w	lr, sp, #12
 8000ebc:	f101 0c04 	add.w	ip, r1, #4
 8000ec0:	68c7      	ldr	r7, [r0, #12]
 8000ec2:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000ec6:	4606      	mov	r6, r0
 8000ec8:	4614      	mov	r4, r2
 8000eca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000ece:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000ed2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000ed6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000eda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000ede:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000ee2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000ee6:	ad02      	add	r5, sp, #8
 8000ee8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000eec:	f8c5 a000 	str.w	sl, [r5]
 8000ef0:	e021      	b.n	8000f36 <unwind_phase2_forced+0x8a>
 8000ef2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000ef4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000ef8:	4629      	mov	r1, r5
 8000efa:	6173      	str	r3, [r6, #20]
 8000efc:	a87a      	add	r0, sp, #488	; 0x1e8
 8000efe:	f004 fb07 	bl	8005510 <memcpy>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4650      	mov	r0, sl
 8000f06:	6933      	ldr	r3, [r6, #16]
 8000f08:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000f0a:	4798      	blx	r3
 8000f0c:	9c88      	ldr	r4, [sp, #544]	; 0x220
 8000f0e:	4682      	mov	sl, r0
 8000f10:	646c      	str	r4, [r5, #68]	; 0x44
 8000f12:	4633      	mov	r3, r6
 8000f14:	4632      	mov	r2, r6
 8000f16:	4649      	mov	r1, r9
 8000f18:	2001      	movs	r0, #1
 8000f1a:	e9cd 5800 	strd	r5, r8, [sp]
 8000f1e:	47b8      	blx	r7
 8000f20:	4604      	mov	r4, r0
 8000f22:	b9f0      	cbnz	r0, 8000f62 <unwind_phase2_forced+0xb6>
 8000f24:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000f28:	4628      	mov	r0, r5
 8000f2a:	a97a      	add	r1, sp, #488	; 0x1e8
 8000f2c:	f004 faf0 	bl	8005510 <memcpy>
 8000f30:	f1ba 0f08 	cmp.w	sl, #8
 8000f34:	d11b      	bne.n	8000f6e <unwind_phase2_forced+0xc2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f3a:	f7ff ff11 	bl	8000d60 <get_eit_entry>
 8000f3e:	f104 0909 	add.w	r9, r4, #9
 8000f42:	fa5f fa89 	uxtb.w	sl, r9
 8000f46:	4604      	mov	r4, r0
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d0d2      	beq.n	8000ef2 <unwind_phase2_forced+0x46>
 8000f4c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000f4e:	4633      	mov	r3, r6
 8000f50:	6469      	str	r1, [r5, #68]	; 0x44
 8000f52:	4632      	mov	r2, r6
 8000f54:	2001      	movs	r0, #1
 8000f56:	e9cd 5800 	strd	r5, r8, [sp]
 8000f5a:	f04a 0110 	orr.w	r1, sl, #16
 8000f5e:	47b8      	blx	r7
 8000f60:	b100      	cbz	r0, 8000f64 <unwind_phase2_forced+0xb8>
 8000f62:	2409      	movs	r4, #9
 8000f64:	4620      	mov	r0, r4
 8000f66:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1ba 0f07 	cmp.w	sl, #7
 8000f72:	d1f6      	bne.n	8000f62 <unwind_phase2_forced+0xb6>
 8000f74:	4620      	mov	r0, r4
 8000f76:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f78:	f7ff ff76 	bl	8000e68 <_Unwind_DebugHook>
 8000f7c:	a803      	add	r0, sp, #12
 8000f7e:	f000 fb93 	bl	80016a8 <__restore_core_regs>
 8000f82:	bf00      	nop

08000f84 <_Unwind_GetCFA>:
 8000f84:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000f86:	4770      	bx	lr

08000f88 <__gnu_Unwind_RaiseException>:
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	f04f 37ff 	mov.w	r7, #4294967295
 8000f8e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000f90:	b0f9      	sub	sp, #484	; 0x1e4
 8000f92:	640b      	str	r3, [r1, #64]	; 0x40
 8000f94:	ac01      	add	r4, sp, #4
 8000f96:	f101 0c04 	add.w	ip, r1, #4
 8000f9a:	460e      	mov	r6, r1
 8000f9c:	4605      	mov	r5, r0
 8000f9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000faa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fb8:	9700      	str	r7, [sp, #0]
 8000fba:	e006      	b.n	8000fca <__gnu_Unwind_RaiseException+0x42>
 8000fbc:	466a      	mov	r2, sp
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	692b      	ldr	r3, [r5, #16]
 8000fc2:	4798      	blx	r3
 8000fc4:	2808      	cmp	r0, #8
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	d108      	bne.n	8000fdc <__gnu_Unwind_RaiseException+0x54>
 8000fca:	4628      	mov	r0, r5
 8000fcc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000fce:	f7ff fec7 	bl	8000d60 <get_eit_entry>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d0f2      	beq.n	8000fbc <__gnu_Unwind_RaiseException+0x34>
 8000fd6:	2009      	movs	r0, #9
 8000fd8:	b079      	add	sp, #484	; 0x1e4
 8000fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fdc:	4668      	mov	r0, sp
 8000fde:	f7ff ff0f 	bl	8000e00 <restore_non_core_regs>
 8000fe2:	2c06      	cmp	r4, #6
 8000fe4:	d1f7      	bne.n	8000fd6 <__gnu_Unwind_RaiseException+0x4e>
 8000fe6:	4631      	mov	r1, r6
 8000fe8:	4628      	mov	r0, r5
 8000fea:	f7ff ff3f 	bl	8000e6c <unwind_phase2>
 8000fee:	bf00      	nop

08000ff0 <__gnu_Unwind_ForcedUnwind>:
 8000ff0:	b410      	push	{r4}
 8000ff2:	4614      	mov	r4, r2
 8000ff4:	6184      	str	r4, [r0, #24]
 8000ff6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000ff8:	60c1      	str	r1, [r0, #12]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	641c      	str	r4, [r3, #64]	; 0x40
 8000ffe:	4619      	mov	r1, r3
 8001000:	bc10      	pop	{r4}
 8001002:	e753      	b.n	8000eac <unwind_phase2_forced>

08001004 <__gnu_Unwind_Resume>:
 8001004:	b570      	push	{r4, r5, r6, lr}
 8001006:	6943      	ldr	r3, [r0, #20]
 8001008:	68c6      	ldr	r6, [r0, #12]
 800100a:	640b      	str	r3, [r1, #64]	; 0x40
 800100c:	b9ae      	cbnz	r6, 800103a <__gnu_Unwind_Resume+0x36>
 800100e:	460a      	mov	r2, r1
 8001010:	6903      	ldr	r3, [r0, #16]
 8001012:	4604      	mov	r4, r0
 8001014:	460d      	mov	r5, r1
 8001016:	4601      	mov	r1, r0
 8001018:	2002      	movs	r0, #2
 800101a:	4798      	blx	r3
 800101c:	2807      	cmp	r0, #7
 800101e:	d005      	beq.n	800102c <__gnu_Unwind_Resume+0x28>
 8001020:	2808      	cmp	r0, #8
 8001022:	d10f      	bne.n	8001044 <__gnu_Unwind_Resume+0x40>
 8001024:	4629      	mov	r1, r5
 8001026:	4620      	mov	r0, r4
 8001028:	f7ff ff20 	bl	8000e6c <unwind_phase2>
 800102c:	4630      	mov	r0, r6
 800102e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001030:	f7ff ff1a 	bl	8000e68 <_Unwind_DebugHook>
 8001034:	1d28      	adds	r0, r5, #4
 8001036:	f000 fb37 	bl	80016a8 <__restore_core_regs>
 800103a:	2201      	movs	r2, #1
 800103c:	f7ff ff36 	bl	8000eac <unwind_phase2_forced>
 8001040:	f004 fa24 	bl	800548c <abort>
 8001044:	f004 fa22 	bl	800548c <abort>

08001048 <__gnu_Unwind_Resume_or_Rethrow>:
 8001048:	68c2      	ldr	r2, [r0, #12]
 800104a:	b12a      	cbz	r2, 8001058 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 800104c:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 8001050:	2200      	movs	r2, #0
 8001052:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 8001056:	e729      	b.n	8000eac <unwind_phase2_forced>
 8001058:	e796      	b.n	8000f88 <__gnu_Unwind_RaiseException>
 800105a:	bf00      	nop

0800105c <_Unwind_Complete>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <_Unwind_DeleteException>:
 8001060:	6883      	ldr	r3, [r0, #8]
 8001062:	4601      	mov	r1, r0
 8001064:	b10b      	cbz	r3, 800106a <_Unwind_DeleteException+0xa>
 8001066:	2001      	movs	r0, #1
 8001068:	4718      	bx	r3
 800106a:	4770      	bx	lr

0800106c <_Unwind_VRS_Get>:
 800106c:	2901      	cmp	r1, #1
 800106e:	d012      	beq.n	8001096 <_Unwind_VRS_Get+0x2a>
 8001070:	d809      	bhi.n	8001086 <_Unwind_VRS_Get+0x1a>
 8001072:	b973      	cbnz	r3, 8001092 <_Unwind_VRS_Get+0x26>
 8001074:	2a0f      	cmp	r2, #15
 8001076:	d80c      	bhi.n	8001092 <_Unwind_VRS_Get+0x26>
 8001078:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800107c:	6842      	ldr	r2, [r0, #4]
 800107e:	4618      	mov	r0, r3
 8001080:	9b00      	ldr	r3, [sp, #0]
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	4770      	bx	lr
 8001086:	3903      	subs	r1, #3
 8001088:	2901      	cmp	r1, #1
 800108a:	bf94      	ite	ls
 800108c:	2001      	movls	r0, #1
 800108e:	2002      	movhi	r0, #2
 8001090:	4770      	bx	lr
 8001092:	2002      	movs	r0, #2
 8001094:	4770      	bx	lr
 8001096:	4608      	mov	r0, r1
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <_Unwind_GetGR>:
 800109c:	2300      	movs	r3, #0
 800109e:	b500      	push	{lr}
 80010a0:	b085      	sub	sp, #20
 80010a2:	460a      	mov	r2, r1
 80010a4:	a903      	add	r1, sp, #12
 80010a6:	9100      	str	r1, [sp, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff ffdf 	bl	800106c <_Unwind_VRS_Get>
 80010ae:	9803      	ldr	r0, [sp, #12]
 80010b0:	b005      	add	sp, #20
 80010b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010b6:	bf00      	nop

080010b8 <_Unwind_VRS_Set>:
 80010b8:	2901      	cmp	r1, #1
 80010ba:	d012      	beq.n	80010e2 <_Unwind_VRS_Set+0x2a>
 80010bc:	d809      	bhi.n	80010d2 <_Unwind_VRS_Set+0x1a>
 80010be:	b973      	cbnz	r3, 80010de <_Unwind_VRS_Set+0x26>
 80010c0:	2a0f      	cmp	r2, #15
 80010c2:	d80c      	bhi.n	80010de <_Unwind_VRS_Set+0x26>
 80010c4:	9900      	ldr	r1, [sp, #0]
 80010c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80010ca:	6809      	ldr	r1, [r1, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	6051      	str	r1, [r2, #4]
 80010d0:	4770      	bx	lr
 80010d2:	3903      	subs	r1, #3
 80010d4:	2901      	cmp	r1, #1
 80010d6:	bf94      	ite	ls
 80010d8:	2001      	movls	r0, #1
 80010da:	2002      	movhi	r0, #2
 80010dc:	4770      	bx	lr
 80010de:	2002      	movs	r0, #2
 80010e0:	4770      	bx	lr
 80010e2:	4608      	mov	r0, r1
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <_Unwind_SetGR>:
 80010e8:	2300      	movs	r3, #0
 80010ea:	b510      	push	{r4, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	ac03      	add	r4, sp, #12
 80010f0:	9203      	str	r2, [sp, #12]
 80010f2:	9400      	str	r4, [sp, #0]
 80010f4:	460a      	mov	r2, r1
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff ffde 	bl	80010b8 <_Unwind_VRS_Set>
 80010fc:	b004      	add	sp, #16
 80010fe:	bd10      	pop	{r4, pc}

08001100 <__gnu_Unwind_Backtrace>:
 8001100:	b570      	push	{r4, r5, r6, lr}
 8001102:	f04f 36ff 	mov.w	r6, #4294967295
 8001106:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001108:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8001112:	f102 0c04 	add.w	ip, r2, #4
 8001116:	4605      	mov	r5, r0
 8001118:	460c      	mov	r4, r1
 800111a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800111e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001122:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001126:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800112a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800112e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001132:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001136:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800113a:	9616      	str	r6, [sp, #88]	; 0x58
 800113c:	e012      	b.n	8001164 <__gnu_Unwind_Backtrace+0x64>
 800113e:	210c      	movs	r1, #12
 8001140:	a816      	add	r0, sp, #88	; 0x58
 8001142:	466a      	mov	r2, sp
 8001144:	f7ff ffd0 	bl	80010e8 <_Unwind_SetGR>
 8001148:	4621      	mov	r1, r4
 800114a:	a816      	add	r0, sp, #88	; 0x58
 800114c:	47a8      	blx	r5
 800114e:	b978      	cbnz	r0, 8001170 <__gnu_Unwind_Backtrace+0x70>
 8001150:	4669      	mov	r1, sp
 8001152:	2008      	movs	r0, #8
 8001154:	9b04      	ldr	r3, [sp, #16]
 8001156:	aa16      	add	r2, sp, #88	; 0x58
 8001158:	4798      	blx	r3
 800115a:	2805      	cmp	r0, #5
 800115c:	4606      	mov	r6, r0
 800115e:	d008      	beq.n	8001172 <__gnu_Unwind_Backtrace+0x72>
 8001160:	2809      	cmp	r0, #9
 8001162:	d005      	beq.n	8001170 <__gnu_Unwind_Backtrace+0x70>
 8001164:	4668      	mov	r0, sp
 8001166:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001168:	f7ff fdfa 	bl	8000d60 <get_eit_entry>
 800116c:	2800      	cmp	r0, #0
 800116e:	d0e6      	beq.n	800113e <__gnu_Unwind_Backtrace+0x3e>
 8001170:	2609      	movs	r6, #9
 8001172:	a816      	add	r0, sp, #88	; 0x58
 8001174:	f7ff fe44 	bl	8000e00 <restore_non_core_regs>
 8001178:	4630      	mov	r0, r6
 800117a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800117e:	bd70      	pop	{r4, r5, r6, pc}

08001180 <__gnu_unwind_pr_common>:
 8001180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001184:	461e      	mov	r6, r3
 8001186:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8001188:	b089      	sub	sp, #36	; 0x24
 800118a:	f854 3b04 	ldr.w	r3, [r4], #4
 800118e:	460d      	mov	r5, r1
 8001190:	4617      	mov	r7, r2
 8001192:	f000 0803 	and.w	r8, r0, #3
 8001196:	9406      	str	r4, [sp, #24]
 8001198:	2e00      	cmp	r6, #0
 800119a:	d079      	beq.n	8001290 <__gnu_unwind_pr_common+0x110>
 800119c:	2202      	movs	r2, #2
 800119e:	f88d 201c 	strb.w	r2, [sp, #28]
 80011a2:	0c1a      	lsrs	r2, r3, #16
 80011a4:	f88d 201d 	strb.w	r2, [sp, #29]
 80011a8:	041b      	lsls	r3, r3, #16
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	9305      	str	r3, [sp, #20]
 80011ae:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80011b2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80011b4:	f1b8 0f02 	cmp.w	r8, #2
 80011b8:	bf08      	it	eq
 80011ba:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80011bc:	f013 0301 	ands.w	r3, r3, #1
 80011c0:	d00c      	beq.n	80011dc <__gnu_unwind_pr_common+0x5c>
 80011c2:	4638      	mov	r0, r7
 80011c4:	a905      	add	r1, sp, #20
 80011c6:	f000 fb71 	bl	80018ac <__gnu_unwind_execute>
 80011ca:	b918      	cbnz	r0, 80011d4 <__gnu_unwind_pr_common+0x54>
 80011cc:	2008      	movs	r0, #8
 80011ce:	b009      	add	sp, #36	; 0x24
 80011d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011d4:	2009      	movs	r0, #9
 80011d6:	b009      	add	sp, #36	; 0x24
 80011d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011dc:	f8d4 a000 	ldr.w	sl, [r4]
 80011e0:	f1ba 0f00 	cmp.w	sl, #0
 80011e4:	d0ed      	beq.n	80011c2 <__gnu_unwind_pr_common+0x42>
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	f000 0308 	and.w	r3, r0, #8
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	2e02      	cmp	r6, #2
 80011f0:	d04a      	beq.n	8001288 <__gnu_unwind_pr_common+0x108>
 80011f2:	f8b4 a000 	ldrh.w	sl, [r4]
 80011f6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80011fa:	3404      	adds	r4, #4
 80011fc:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80011fe:	210f      	movs	r1, #15
 8001200:	4638      	mov	r0, r7
 8001202:	f029 0b01 	bic.w	fp, r9, #1
 8001206:	4493      	add	fp, r2
 8001208:	f7ff ff48 	bl	800109c <_Unwind_GetGR>
 800120c:	4583      	cmp	fp, r0
 800120e:	d839      	bhi.n	8001284 <__gnu_unwind_pr_common+0x104>
 8001210:	f02a 0201 	bic.w	r2, sl, #1
 8001214:	445a      	add	r2, fp
 8001216:	4282      	cmp	r2, r0
 8001218:	bf94      	ite	ls
 800121a:	2000      	movls	r0, #0
 800121c:	2001      	movhi	r0, #1
 800121e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	f00a 0a01 	and.w	sl, sl, #1
 800122a:	ea43 030a 	orr.w	r3, r3, sl
 800122e:	2b01      	cmp	r3, #1
 8001230:	d049      	beq.n	80012c6 <__gnu_unwind_pr_common+0x146>
 8001232:	2b02      	cmp	r3, #2
 8001234:	d032      	beq.n	800129c <__gnu_unwind_pr_common+0x11c>
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1cc      	bne.n	80011d4 <__gnu_unwind_pr_common+0x54>
 800123a:	f1b8 0f00 	cmp.w	r8, #0
 800123e:	d002      	beq.n	8001246 <__gnu_unwind_pr_common+0xc6>
 8001240:	2800      	cmp	r0, #0
 8001242:	f040 80ce 	bne.w	80013e2 <__gnu_unwind_pr_common+0x262>
 8001246:	3404      	adds	r4, #4
 8001248:	f8d4 a000 	ldr.w	sl, [r4]
 800124c:	f1ba 0f00 	cmp.w	sl, #0
 8001250:	d1cd      	bne.n	80011ee <__gnu_unwind_pr_common+0x6e>
 8001252:	4638      	mov	r0, r7
 8001254:	a905      	add	r1, sp, #20
 8001256:	f000 fb29 	bl	80018ac <__gnu_unwind_execute>
 800125a:	2800      	cmp	r0, #0
 800125c:	d1ba      	bne.n	80011d4 <__gnu_unwind_pr_common+0x54>
 800125e:	9b01      	ldr	r3, [sp, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0b3      	beq.n	80011cc <__gnu_unwind_pr_common+0x4c>
 8001264:	210f      	movs	r1, #15
 8001266:	4638      	mov	r0, r7
 8001268:	f7ff ff18 	bl	800109c <_Unwind_GetGR>
 800126c:	210e      	movs	r1, #14
 800126e:	4602      	mov	r2, r0
 8001270:	4638      	mov	r0, r7
 8001272:	f7ff ff39 	bl	80010e8 <_Unwind_SetGR>
 8001276:	4638      	mov	r0, r7
 8001278:	210f      	movs	r1, #15
 800127a:	4a6a      	ldr	r2, [pc, #424]	; (8001424 <__gnu_unwind_pr_common+0x2a4>)
 800127c:	f7ff ff34 	bl	80010e8 <_Unwind_SetGR>
 8001280:	2007      	movs	r0, #7
 8001282:	e7a8      	b.n	80011d6 <__gnu_unwind_pr_common+0x56>
 8001284:	2000      	movs	r0, #0
 8001286:	e7ca      	b.n	800121e <__gnu_unwind_pr_common+0x9e>
 8001288:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800128c:	3408      	adds	r4, #8
 800128e:	e7b5      	b.n	80011fc <__gnu_unwind_pr_common+0x7c>
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	9305      	str	r3, [sp, #20]
 8001294:	2303      	movs	r3, #3
 8001296:	f8ad 301c 	strh.w	r3, [sp, #28]
 800129a:	e78a      	b.n	80011b2 <__gnu_unwind_pr_common+0x32>
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80012a2:	f1b8 0f00 	cmp.w	r8, #0
 80012a6:	d145      	bne.n	8001334 <__gnu_unwind_pr_common+0x1b4>
 80012a8:	b128      	cbz	r0, 80012b6 <__gnu_unwind_pr_common+0x136>
 80012aa:	9a02      	ldr	r2, [sp, #8]
 80012ac:	2a00      	cmp	r2, #0
 80012ae:	d05c      	beq.n	800136a <__gnu_unwind_pr_common+0x1ea>
 80012b0:	f1bb 0f00 	cmp.w	fp, #0
 80012b4:	d074      	beq.n	80013a0 <__gnu_unwind_pr_common+0x220>
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	da00      	bge.n	80012bc <__gnu_unwind_pr_common+0x13c>
 80012ba:	3404      	adds	r4, #4
 80012bc:	f10b 0b01 	add.w	fp, fp, #1
 80012c0:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 80012c4:	e7c0      	b.n	8001248 <__gnu_unwind_pr_common+0xc8>
 80012c6:	f1b8 0f00 	cmp.w	r8, #0
 80012ca:	d119      	bne.n	8001300 <__gnu_unwind_pr_common+0x180>
 80012cc:	b1b0      	cbz	r0, 80012fc <__gnu_unwind_pr_common+0x17c>
 80012ce:	6863      	ldr	r3, [r4, #4]
 80012d0:	6822      	ldr	r2, [r4, #0]
 80012d2:	1c99      	adds	r1, r3, #2
 80012d4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80012d8:	f43f af7c 	beq.w	80011d4 <__gnu_unwind_pr_common+0x54>
 80012dc:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80012e0:	3301      	adds	r3, #1
 80012e2:	9104      	str	r1, [sp, #16]
 80012e4:	f000 8091 	beq.w	800140a <__gnu_unwind_pr_common+0x28a>
 80012e8:	1d20      	adds	r0, r4, #4
 80012ea:	f7ff fdb7 	bl	8000e5c <_Unwind_decode_typeinfo_ptr.constprop.0>
 80012ee:	ab04      	add	r3, sp, #16
 80012f0:	4601      	mov	r1, r0
 80012f2:	4628      	mov	r0, r5
 80012f4:	f003 fbf6 	bl	8004ae4 <__cxa_type_match>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d15c      	bne.n	80013b6 <__gnu_unwind_pr_common+0x236>
 80012fc:	3408      	adds	r4, #8
 80012fe:	e7a3      	b.n	8001248 <__gnu_unwind_pr_common+0xc8>
 8001300:	210d      	movs	r1, #13
 8001302:	4638      	mov	r0, r7
 8001304:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8001308:	f7ff fec8 	bl	800109c <_Unwind_GetGR>
 800130c:	4581      	cmp	r9, r0
 800130e:	d1f5      	bne.n	80012fc <__gnu_unwind_pr_common+0x17c>
 8001310:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001312:	429c      	cmp	r4, r3
 8001314:	d1f2      	bne.n	80012fc <__gnu_unwind_pr_common+0x17c>
 8001316:	4620      	mov	r0, r4
 8001318:	f7ff fcd4 	bl	8000cc4 <selfrel_offset31>
 800131c:	210f      	movs	r1, #15
 800131e:	4602      	mov	r2, r0
 8001320:	4638      	mov	r0, r7
 8001322:	f7ff fee1 	bl	80010e8 <_Unwind_SetGR>
 8001326:	4638      	mov	r0, r7
 8001328:	462a      	mov	r2, r5
 800132a:	2100      	movs	r1, #0
 800132c:	f7ff fedc 	bl	80010e8 <_Unwind_SetGR>
 8001330:	2007      	movs	r0, #7
 8001332:	e750      	b.n	80011d6 <__gnu_unwind_pr_common+0x56>
 8001334:	210d      	movs	r1, #13
 8001336:	4638      	mov	r0, r7
 8001338:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800133c:	f7ff feae 	bl	800109c <_Unwind_GetGR>
 8001340:	4581      	cmp	r9, r0
 8001342:	d001      	beq.n	8001348 <__gnu_unwind_pr_common+0x1c8>
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	e7b6      	b.n	80012b6 <__gnu_unwind_pr_common+0x136>
 8001348:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800134a:	429c      	cmp	r4, r3
 800134c:	d1fa      	bne.n	8001344 <__gnu_unwind_pr_common+0x1c4>
 800134e:	2304      	movs	r3, #4
 8001350:	2200      	movs	r2, #0
 8001352:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8001356:	18e3      	adds	r3, r4, r3
 8001358:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 800135c:	636b      	str	r3, [r5, #52]	; 0x34
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db5a      	blt.n	800141a <__gnu_unwind_pr_common+0x29a>
 8001364:	2301      	movs	r3, #1
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	e7a8      	b.n	80012bc <__gnu_unwind_pr_common+0x13c>
 800136a:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800136e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001372:	4691      	mov	r9, r2
 8001374:	46b0      	mov	r8, r6
 8001376:	f104 0a04 	add.w	sl, r4, #4
 800137a:	461e      	mov	r6, r3
 800137c:	e00e      	b.n	800139c <__gnu_unwind_pr_common+0x21c>
 800137e:	4650      	mov	r0, sl
 8001380:	9604      	str	r6, [sp, #16]
 8001382:	f7ff fd6b 	bl	8000e5c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001386:	2200      	movs	r2, #0
 8001388:	4601      	mov	r1, r0
 800138a:	ab04      	add	r3, sp, #16
 800138c:	4628      	mov	r0, r5
 800138e:	f109 0901 	add.w	r9, r9, #1
 8001392:	f10a 0a04 	add.w	sl, sl, #4
 8001396:	f003 fba5 	bl	8004ae4 <__cxa_type_match>
 800139a:	b9e8      	cbnz	r0, 80013d8 <__gnu_unwind_pr_common+0x258>
 800139c:	45d9      	cmp	r9, fp
 800139e:	d1ee      	bne.n	800137e <__gnu_unwind_pr_common+0x1fe>
 80013a0:	210d      	movs	r1, #13
 80013a2:	4638      	mov	r0, r7
 80013a4:	f7ff fe7a 	bl	800109c <_Unwind_GetGR>
 80013a8:	4603      	mov	r3, r0
 80013aa:	9a04      	ldr	r2, [sp, #16]
 80013ac:	2006      	movs	r0, #6
 80013ae:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 80013b2:	622b      	str	r3, [r5, #32]
 80013b4:	e70f      	b.n	80011d6 <__gnu_unwind_pr_common+0x56>
 80013b6:	4681      	mov	r9, r0
 80013b8:	210d      	movs	r1, #13
 80013ba:	4638      	mov	r0, r7
 80013bc:	f7ff fe6e 	bl	800109c <_Unwind_GetGR>
 80013c0:	f1b9 0f02 	cmp.w	r9, #2
 80013c4:	6228      	str	r0, [r5, #32]
 80013c6:	d125      	bne.n	8001414 <__gnu_unwind_pr_common+0x294>
 80013c8:	462b      	mov	r3, r5
 80013ca:	9a04      	ldr	r2, [sp, #16]
 80013cc:	f843 2f2c 	str.w	r2, [r3, #44]!
 80013d0:	626b      	str	r3, [r5, #36]	; 0x24
 80013d2:	2006      	movs	r0, #6
 80013d4:	62ac      	str	r4, [r5, #40]	; 0x28
 80013d6:	e6fe      	b.n	80011d6 <__gnu_unwind_pr_common+0x56>
 80013d8:	4646      	mov	r6, r8
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80013e0:	e769      	b.n	80012b6 <__gnu_unwind_pr_common+0x136>
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff fc6e 	bl	8000cc4 <selfrel_offset31>
 80013e8:	4602      	mov	r2, r0
 80013ea:	3404      	adds	r4, #4
 80013ec:	63ac      	str	r4, [r5, #56]	; 0x38
 80013ee:	4628      	mov	r0, r5
 80013f0:	4614      	mov	r4, r2
 80013f2:	f003 fbd5 	bl	8004ba0 <__cxa_begin_cleanup>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	f43f aeec 	beq.w	80011d4 <__gnu_unwind_pr_common+0x54>
 80013fc:	4638      	mov	r0, r7
 80013fe:	4622      	mov	r2, r4
 8001400:	210f      	movs	r1, #15
 8001402:	f7ff fe71 	bl	80010e8 <_Unwind_SetGR>
 8001406:	2007      	movs	r0, #7
 8001408:	e6e5      	b.n	80011d6 <__gnu_unwind_pr_common+0x56>
 800140a:	210d      	movs	r1, #13
 800140c:	4638      	mov	r0, r7
 800140e:	f7ff fe45 	bl	800109c <_Unwind_GetGR>
 8001412:	6228      	str	r0, [r5, #32]
 8001414:	9b04      	ldr	r3, [sp, #16]
 8001416:	626b      	str	r3, [r5, #36]	; 0x24
 8001418:	e7db      	b.n	80013d2 <__gnu_unwind_pr_common+0x252>
 800141a:	f10b 0001 	add.w	r0, fp, #1
 800141e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001422:	e779      	b.n	8001318 <__gnu_unwind_pr_common+0x198>
 8001424:	080053c9 	.word	0x080053c9

08001428 <__aeabi_unwind_cpp_pr0>:
 8001428:	2300      	movs	r3, #0
 800142a:	e6a9      	b.n	8001180 <__gnu_unwind_pr_common>

0800142c <__aeabi_unwind_cpp_pr1>:
 800142c:	2301      	movs	r3, #1
 800142e:	e6a7      	b.n	8001180 <__gnu_unwind_pr_common>

08001430 <__aeabi_unwind_cpp_pr2>:
 8001430:	2302      	movs	r3, #2
 8001432:	e6a5      	b.n	8001180 <__gnu_unwind_pr_common>

08001434 <_Unwind_VRS_Pop>:
 8001434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001438:	4606      	mov	r6, r0
 800143a:	4615      	mov	r5, r2
 800143c:	461c      	mov	r4, r3
 800143e:	b0c3      	sub	sp, #268	; 0x10c
 8001440:	2904      	cmp	r1, #4
 8001442:	f200 80b8 	bhi.w	80015b6 <_Unwind_VRS_Pop+0x182>
 8001446:	e8df f001 	tbb	[pc, r1]
 800144a:	569c      	.short	0x569c
 800144c:	2db6      	.short	0x2db6
 800144e:	03          	.byte	0x03
 800144f:	00          	.byte	0x00
 8001450:	2c00      	cmp	r4, #0
 8001452:	f040 80b0 	bne.w	80015b6 <_Unwind_VRS_Pop+0x182>
 8001456:	2a10      	cmp	r2, #16
 8001458:	f200 80ad 	bhi.w	80015b6 <_Unwind_VRS_Pop+0x182>
 800145c:	6803      	ldr	r3, [r0, #0]
 800145e:	06d8      	lsls	r0, r3, #27
 8001460:	f100 80f1 	bmi.w	8001646 <_Unwind_VRS_Pop+0x212>
 8001464:	af20      	add	r7, sp, #128	; 0x80
 8001466:	4638      	mov	r0, r7
 8001468:	f000 f990 	bl	800178c <__gnu_Unwind_Save_WMMXC>
 800146c:	2401      	movs	r4, #1
 800146e:	4638      	mov	r0, r7
 8001470:	2300      	movs	r3, #0
 8001472:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8001474:	fa04 f203 	lsl.w	r2, r4, r3
 8001478:	422a      	tst	r2, r5
 800147a:	f103 0301 	add.w	r3, r3, #1
 800147e:	d005      	beq.n	800148c <_Unwind_VRS_Pop+0x58>
 8001480:	460a      	mov	r2, r1
 8001482:	f852 cb04 	ldr.w	ip, [r2], #4
 8001486:	4611      	mov	r1, r2
 8001488:	f8c0 c000 	str.w	ip, [r0]
 800148c:	2b04      	cmp	r3, #4
 800148e:	f100 0004 	add.w	r0, r0, #4
 8001492:	d1ef      	bne.n	8001474 <_Unwind_VRS_Pop+0x40>
 8001494:	4638      	mov	r0, r7
 8001496:	63b1      	str	r1, [r6, #56]	; 0x38
 8001498:	f000 f96e 	bl	8001778 <__gnu_Unwind_Restore_WMMXC>
 800149c:	2000      	movs	r0, #0
 800149e:	b043      	add	sp, #268	; 0x10c
 80014a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014a4:	2c03      	cmp	r4, #3
 80014a6:	f040 8086 	bne.w	80015b6 <_Unwind_VRS_Pop+0x182>
 80014aa:	b294      	uxth	r4, r2
 80014ac:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 80014b0:	2b10      	cmp	r3, #16
 80014b2:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80014b6:	d87e      	bhi.n	80015b6 <_Unwind_VRS_Pop+0x182>
 80014b8:	6803      	ldr	r3, [r0, #0]
 80014ba:	071f      	lsls	r7, r3, #28
 80014bc:	f100 80cb 	bmi.w	8001656 <_Unwind_VRS_Pop+0x222>
 80014c0:	af20      	add	r7, sp, #128	; 0x80
 80014c2:	4638      	mov	r0, r7
 80014c4:	f000 f936 	bl	8001734 <__gnu_Unwind_Save_WMMXD>
 80014c8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80014ca:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80014ce:	b154      	cbz	r4, 80014e6 <_Unwind_VRS_Pop+0xb2>
 80014d0:	460b      	mov	r3, r1
 80014d2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80014d6:	1ad0      	subs	r0, r2, r3
 80014d8:	00e4      	lsls	r4, r4, #3
 80014da:	581d      	ldr	r5, [r3, r0]
 80014dc:	f843 5b04 	str.w	r5, [r3], #4
 80014e0:	428b      	cmp	r3, r1
 80014e2:	d1fa      	bne.n	80014da <_Unwind_VRS_Pop+0xa6>
 80014e4:	4422      	add	r2, r4
 80014e6:	4638      	mov	r0, r7
 80014e8:	63b2      	str	r2, [r6, #56]	; 0x38
 80014ea:	f000 f901 	bl	80016f0 <__gnu_Unwind_Restore_WMMXD>
 80014ee:	2000      	movs	r0, #0
 80014f0:	b043      	add	sp, #268	; 0x10c
 80014f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014f6:	2c01      	cmp	r4, #1
 80014f8:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80014fc:	b295      	uxth	r5, r2
 80014fe:	d056      	beq.n	80015ae <_Unwind_VRS_Pop+0x17a>
 8001500:	2c05      	cmp	r4, #5
 8001502:	d158      	bne.n	80015b6 <_Unwind_VRS_Pop+0x182>
 8001504:	eb08 0905 	add.w	r9, r8, r5
 8001508:	f1b9 0f20 	cmp.w	r9, #32
 800150c:	d853      	bhi.n	80015b6 <_Unwind_VRS_Pop+0x182>
 800150e:	f1b8 0f0f 	cmp.w	r8, #15
 8001512:	d973      	bls.n	80015fc <_Unwind_VRS_Pop+0x1c8>
 8001514:	46a9      	mov	r9, r5
 8001516:	2d00      	cmp	r5, #0
 8001518:	f040 8084 	bne.w	8001624 <_Unwind_VRS_Pop+0x1f0>
 800151c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800151e:	b365      	cbz	r5, 800157a <_Unwind_VRS_Pop+0x146>
 8001520:	af20      	add	r7, sp, #128	; 0x80
 8001522:	f04f 0900 	mov.w	r9, #0
 8001526:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800152a:	3f04      	subs	r7, #4
 800152c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8001530:	f853 1b04 	ldr.w	r1, [r3], #4
 8001534:	42ab      	cmp	r3, r5
 8001536:	f847 1f04 	str.w	r1, [r7, #4]!
 800153a:	d1f9      	bne.n	8001530 <_Unwind_VRS_Pop+0xfc>
 800153c:	f1b9 0f00 	cmp.w	r9, #0
 8001540:	d00f      	beq.n	8001562 <_Unwind_VRS_Pop+0x12e>
 8001542:	466f      	mov	r7, sp
 8001544:	4641      	mov	r1, r8
 8001546:	2910      	cmp	r1, #16
 8001548:	bf38      	it	cc
 800154a:	2110      	movcc	r1, #16
 800154c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001550:	3984      	subs	r1, #132	; 0x84
 8001552:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8001556:	f853 0b04 	ldr.w	r0, [r3], #4
 800155a:	42ab      	cmp	r3, r5
 800155c:	f841 0f04 	str.w	r0, [r1, #4]!
 8001560:	d1f9      	bne.n	8001556 <_Unwind_VRS_Pop+0x122>
 8001562:	2c01      	cmp	r4, #1
 8001564:	d07f      	beq.n	8001666 <_Unwind_VRS_Pop+0x232>
 8001566:	f1b8 0f0f 	cmp.w	r8, #15
 800156a:	63b5      	str	r5, [r6, #56]	; 0x38
 800156c:	d942      	bls.n	80015f4 <_Unwind_VRS_Pop+0x1c0>
 800156e:	f1b9 0f00 	cmp.w	r9, #0
 8001572:	d002      	beq.n	800157a <_Unwind_VRS_Pop+0x146>
 8001574:	4668      	mov	r0, sp
 8001576:	f000 f8b3 	bl	80016e0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800157a:	2000      	movs	r0, #0
 800157c:	b043      	add	sp, #268	; 0x10c
 800157e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001582:	b9c4      	cbnz	r4, 80015b6 <_Unwind_VRS_Pop+0x182>
 8001584:	4623      	mov	r3, r4
 8001586:	2401      	movs	r4, #1
 8001588:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800158a:	1d37      	adds	r7, r6, #4
 800158c:	b2a8      	uxth	r0, r5
 800158e:	fa04 f103 	lsl.w	r1, r4, r3
 8001592:	4201      	tst	r1, r0
 8001594:	bf1c      	itt	ne
 8001596:	f852 1b04 	ldrne.w	r1, [r2], #4
 800159a:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 800159e:	3301      	adds	r3, #1
 80015a0:	2b10      	cmp	r3, #16
 80015a2:	d1f4      	bne.n	800158e <_Unwind_VRS_Pop+0x15a>
 80015a4:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 80015a8:	d1e7      	bne.n	800157a <_Unwind_VRS_Pop+0x146>
 80015aa:	63b2      	str	r2, [r6, #56]	; 0x38
 80015ac:	e004      	b.n	80015b8 <_Unwind_VRS_Pop+0x184>
 80015ae:	eb08 0305 	add.w	r3, r8, r5
 80015b2:	2b10      	cmp	r3, #16
 80015b4:	d903      	bls.n	80015be <_Unwind_VRS_Pop+0x18a>
 80015b6:	2002      	movs	r0, #2
 80015b8:	b043      	add	sp, #268	; 0x10c
 80015ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015be:	f1b8 0f0f 	cmp.w	r8, #15
 80015c2:	d8f8      	bhi.n	80015b6 <_Unwind_VRS_Pop+0x182>
 80015c4:	6833      	ldr	r3, [r6, #0]
 80015c6:	07da      	lsls	r2, r3, #31
 80015c8:	d506      	bpl.n	80015d8 <_Unwind_VRS_Pop+0x1a4>
 80015ca:	4630      	mov	r0, r6
 80015cc:	f023 0303 	bic.w	r3, r3, #3
 80015d0:	f840 3b48 	str.w	r3, [r0], #72
 80015d4:	f000 f878 	bl	80016c8 <__gnu_Unwind_Save_VFP>
 80015d8:	af20      	add	r7, sp, #128	; 0x80
 80015da:	4638      	mov	r0, r7
 80015dc:	f000 f874 	bl	80016c8 <__gnu_Unwind_Save_VFP>
 80015e0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80015e2:	2d00      	cmp	r5, #0
 80015e4:	d19d      	bne.n	8001522 <_Unwind_VRS_Pop+0xee>
 80015e6:	461d      	mov	r5, r3
 80015e8:	3504      	adds	r5, #4
 80015ea:	4638      	mov	r0, r7
 80015ec:	63b5      	str	r5, [r6, #56]	; 0x38
 80015ee:	f000 f867 	bl	80016c0 <__gnu_Unwind_Restore_VFP>
 80015f2:	e7c2      	b.n	800157a <_Unwind_VRS_Pop+0x146>
 80015f4:	a820      	add	r0, sp, #128	; 0x80
 80015f6:	f000 f86b 	bl	80016d0 <__gnu_Unwind_Restore_VFP_D>
 80015fa:	e7b8      	b.n	800156e <_Unwind_VRS_Pop+0x13a>
 80015fc:	f1b9 0f10 	cmp.w	r9, #16
 8001600:	d93f      	bls.n	8001682 <_Unwind_VRS_Pop+0x24e>
 8001602:	f1a9 0910 	sub.w	r9, r9, #16
 8001606:	6833      	ldr	r3, [r6, #0]
 8001608:	07d9      	lsls	r1, r3, #31
 800160a:	d508      	bpl.n	800161e <_Unwind_VRS_Pop+0x1ea>
 800160c:	4630      	mov	r0, r6
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	f840 3b48 	str.w	r3, [r0], #72
 800161a:	f000 f85d 	bl	80016d8 <__gnu_Unwind_Save_VFP_D>
 800161e:	f1b9 0f00 	cmp.w	r9, #0
 8001622:	d031      	beq.n	8001688 <_Unwind_VRS_Pop+0x254>
 8001624:	6833      	ldr	r3, [r6, #0]
 8001626:	075a      	lsls	r2, r3, #29
 8001628:	d41f      	bmi.n	800166a <_Unwind_VRS_Pop+0x236>
 800162a:	f1b8 0f0f 	cmp.w	r8, #15
 800162e:	d924      	bls.n	800167a <_Unwind_VRS_Pop+0x246>
 8001630:	466f      	mov	r7, sp
 8001632:	f1c8 0510 	rsb	r5, r8, #16
 8001636:	4638      	mov	r0, r7
 8001638:	f000 f856 	bl	80016e8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800163c:	2d00      	cmp	r5, #0
 800163e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001640:	dd80      	ble.n	8001544 <_Unwind_VRS_Pop+0x110>
 8001642:	af20      	add	r7, sp, #128	; 0x80
 8001644:	e76f      	b.n	8001526 <_Unwind_VRS_Pop+0xf2>
 8001646:	f023 0310 	bic.w	r3, r3, #16
 800164a:	6033      	str	r3, [r6, #0]
 800164c:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8001650:	f000 f89c 	bl	800178c <__gnu_Unwind_Save_WMMXC>
 8001654:	e706      	b.n	8001464 <_Unwind_VRS_Pop+0x30>
 8001656:	f023 0308 	bic.w	r3, r3, #8
 800165a:	6003      	str	r3, [r0, #0]
 800165c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001660:	f000 f868 	bl	8001734 <__gnu_Unwind_Save_WMMXD>
 8001664:	e72c      	b.n	80014c0 <_Unwind_VRS_Pop+0x8c>
 8001666:	af20      	add	r7, sp, #128	; 0x80
 8001668:	e7be      	b.n	80015e8 <_Unwind_VRS_Pop+0x1b4>
 800166a:	4630      	mov	r0, r6
 800166c:	f023 0304 	bic.w	r3, r3, #4
 8001670:	f840 3bd0 	str.w	r3, [r0], #208
 8001674:	f000 f838 	bl	80016e8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001678:	e7d7      	b.n	800162a <_Unwind_VRS_Pop+0x1f6>
 800167a:	a820      	add	r0, sp, #128	; 0x80
 800167c:	f000 f82c 	bl	80016d8 <__gnu_Unwind_Save_VFP_D>
 8001680:	e7d6      	b.n	8001630 <_Unwind_VRS_Pop+0x1fc>
 8001682:	f04f 0900 	mov.w	r9, #0
 8001686:	e7be      	b.n	8001606 <_Unwind_VRS_Pop+0x1d2>
 8001688:	f1b8 0f0f 	cmp.w	r8, #15
 800168c:	f63f af46 	bhi.w	800151c <_Unwind_VRS_Pop+0xe8>
 8001690:	af20      	add	r7, sp, #128	; 0x80
 8001692:	4638      	mov	r0, r7
 8001694:	f000 f820 	bl	80016d8 <__gnu_Unwind_Save_VFP_D>
 8001698:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800169a:	2d00      	cmp	r5, #0
 800169c:	f47f af41 	bne.w	8001522 <_Unwind_VRS_Pop+0xee>
 80016a0:	4638      	mov	r0, r7
 80016a2:	f000 f815 	bl	80016d0 <__gnu_Unwind_Restore_VFP_D>
 80016a6:	e768      	b.n	800157a <_Unwind_VRS_Pop+0x146>

080016a8 <__restore_core_regs>:
 80016a8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80016ac:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80016b0:	469c      	mov	ip, r3
 80016b2:	46a6      	mov	lr, r4
 80016b4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80016b8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80016bc:	46e5      	mov	sp, ip
 80016be:	bd00      	pop	{pc}

080016c0 <__gnu_Unwind_Restore_VFP>:
 80016c0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <__gnu_Unwind_Save_VFP>:
 80016c8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop

080016d0 <__gnu_Unwind_Restore_VFP_D>:
 80016d0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <__gnu_Unwind_Save_VFP_D>:
 80016d8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop

080016e0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80016e0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop

080016e8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80016e8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop

080016f0 <__gnu_Unwind_Restore_WMMXD>:
 80016f0:	ecf0 0102 	ldfe	f0, [r0], #8
 80016f4:	ecf0 1102 	ldfe	f1, [r0], #8
 80016f8:	ecf0 2102 	ldfe	f2, [r0], #8
 80016fc:	ecf0 3102 	ldfe	f3, [r0], #8
 8001700:	ecf0 4102 	ldfe	f4, [r0], #8
 8001704:	ecf0 5102 	ldfe	f5, [r0], #8
 8001708:	ecf0 6102 	ldfe	f6, [r0], #8
 800170c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001710:	ecf0 8102 	ldfp	f0, [r0], #8
 8001714:	ecf0 9102 	ldfp	f1, [r0], #8
 8001718:	ecf0 a102 	ldfp	f2, [r0], #8
 800171c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001720:	ecf0 c102 	ldfp	f4, [r0], #8
 8001724:	ecf0 d102 	ldfp	f5, [r0], #8
 8001728:	ecf0 e102 	ldfp	f6, [r0], #8
 800172c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop

08001734 <__gnu_Unwind_Save_WMMXD>:
 8001734:	ece0 0102 	stfe	f0, [r0], #8
 8001738:	ece0 1102 	stfe	f1, [r0], #8
 800173c:	ece0 2102 	stfe	f2, [r0], #8
 8001740:	ece0 3102 	stfe	f3, [r0], #8
 8001744:	ece0 4102 	stfe	f4, [r0], #8
 8001748:	ece0 5102 	stfe	f5, [r0], #8
 800174c:	ece0 6102 	stfe	f6, [r0], #8
 8001750:	ece0 7102 	stfe	f7, [r0], #8
 8001754:	ece0 8102 	stfp	f0, [r0], #8
 8001758:	ece0 9102 	stfp	f1, [r0], #8
 800175c:	ece0 a102 	stfp	f2, [r0], #8
 8001760:	ece0 b102 	stfp	f3, [r0], #8
 8001764:	ece0 c102 	stfp	f4, [r0], #8
 8001768:	ece0 d102 	stfp	f5, [r0], #8
 800176c:	ece0 e102 	stfp	f6, [r0], #8
 8001770:	ece0 f102 	stfp	f7, [r0], #8
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop

08001778 <__gnu_Unwind_Restore_WMMXC>:
 8001778:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800177c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001780:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001784:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop

0800178c <__gnu_Unwind_Save_WMMXC>:
 800178c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001790:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001794:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001798:	fca0 b101 	stc2	1, cr11, [r0], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop

080017a0 <_Unwind_RaiseException>:
 80017a0:	46ec      	mov	ip, sp
 80017a2:	b500      	push	{lr}
 80017a4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80017a8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80017b4:	a901      	add	r1, sp, #4
 80017b6:	f7ff fbe7 	bl	8000f88 <__gnu_Unwind_RaiseException>
 80017ba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80017be:	b012      	add	sp, #72	; 0x48
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <_Unwind_Resume>:
 80017c4:	46ec      	mov	ip, sp
 80017c6:	b500      	push	{lr}
 80017c8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80017cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80017d8:	a901      	add	r1, sp, #4
 80017da:	f7ff fc13 	bl	8001004 <__gnu_Unwind_Resume>
 80017de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80017e2:	b012      	add	sp, #72	; 0x48
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop

080017e8 <_Unwind_Resume_or_Rethrow>:
 80017e8:	46ec      	mov	ip, sp
 80017ea:	b500      	push	{lr}
 80017ec:	e92d 5000 	stmdb	sp!, {ip, lr}
 80017f0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80017fc:	a901      	add	r1, sp, #4
 80017fe:	f7ff fc23 	bl	8001048 <__gnu_Unwind_Resume_or_Rethrow>
 8001802:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001806:	b012      	add	sp, #72	; 0x48
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <_Unwind_ForcedUnwind>:
 800180c:	46ec      	mov	ip, sp
 800180e:	b500      	push	{lr}
 8001810:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001814:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001820:	ab01      	add	r3, sp, #4
 8001822:	f7ff fbe5 	bl	8000ff0 <__gnu_Unwind_ForcedUnwind>
 8001826:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800182a:	b012      	add	sp, #72	; 0x48
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop

08001830 <_Unwind_Backtrace>:
 8001830:	46ec      	mov	ip, sp
 8001832:	b500      	push	{lr}
 8001834:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001838:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001844:	aa01      	add	r2, sp, #4
 8001846:	f7ff fc5b 	bl	8001100 <__gnu_Unwind_Backtrace>
 800184a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800184e:	b012      	add	sp, #72	; 0x48
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop

08001854 <next_unwind_byte>:
 8001854:	7a02      	ldrb	r2, [r0, #8]
 8001856:	4603      	mov	r3, r0
 8001858:	b97a      	cbnz	r2, 800187a <next_unwind_byte+0x26>
 800185a:	7a42      	ldrb	r2, [r0, #9]
 800185c:	b1a2      	cbz	r2, 8001888 <next_unwind_byte+0x34>
 800185e:	f04f 0c03 	mov.w	ip, #3
 8001862:	6841      	ldr	r1, [r0, #4]
 8001864:	3a01      	subs	r2, #1
 8001866:	7242      	strb	r2, [r0, #9]
 8001868:	6808      	ldr	r0, [r1, #0]
 800186a:	1d0a      	adds	r2, r1, #4
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	0202      	lsls	r2, r0, #8
 8001870:	f883 c008 	strb.w	ip, [r3, #8]
 8001874:	0e00      	lsrs	r0, r0, #24
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	4770      	bx	lr
 800187a:	6800      	ldr	r0, [r0, #0]
 800187c:	3a01      	subs	r2, #1
 800187e:	721a      	strb	r2, [r3, #8]
 8001880:	0202      	lsls	r2, r0, #8
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	0e00      	lsrs	r0, r0, #24
 8001886:	4770      	bx	lr
 8001888:	20b0      	movs	r0, #176	; 0xb0
 800188a:	4770      	bx	lr

0800188c <_Unwind_GetGR.constprop.0>:
 800188c:	2300      	movs	r3, #0
 800188e:	b500      	push	{lr}
 8001890:	b085      	sub	sp, #20
 8001892:	a903      	add	r1, sp, #12
 8001894:	9100      	str	r1, [sp, #0]
 8001896:	220c      	movs	r2, #12
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff fbe7 	bl	800106c <_Unwind_VRS_Get>
 800189e:	9803      	ldr	r0, [sp, #12]
 80018a0:	b005      	add	sp, #20
 80018a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80018a6:	bf00      	nop

080018a8 <unwind_UCB_from_context>:
 80018a8:	e7f0      	b.n	800188c <_Unwind_GetGR.constprop.0>
 80018aa:	bf00      	nop

080018ac <__gnu_unwind_execute>:
 80018ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018b0:	f04f 0800 	mov.w	r8, #0
 80018b4:	4605      	mov	r5, r0
 80018b6:	460e      	mov	r6, r1
 80018b8:	b085      	sub	sp, #20
 80018ba:	4630      	mov	r0, r6
 80018bc:	f7ff ffca 	bl	8001854 <next_unwind_byte>
 80018c0:	28b0      	cmp	r0, #176	; 0xb0
 80018c2:	4604      	mov	r4, r0
 80018c4:	f000 80ba 	beq.w	8001a3c <__gnu_unwind_execute+0x190>
 80018c8:	0607      	lsls	r7, r0, #24
 80018ca:	d520      	bpl.n	800190e <__gnu_unwind_execute+0x62>
 80018cc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80018d0:	2b80      	cmp	r3, #128	; 0x80
 80018d2:	d04d      	beq.n	8001970 <__gnu_unwind_execute+0xc4>
 80018d4:	2b90      	cmp	r3, #144	; 0x90
 80018d6:	d036      	beq.n	8001946 <__gnu_unwind_execute+0x9a>
 80018d8:	2ba0      	cmp	r3, #160	; 0xa0
 80018da:	d060      	beq.n	800199e <__gnu_unwind_execute+0xf2>
 80018dc:	2bb0      	cmp	r3, #176	; 0xb0
 80018de:	d073      	beq.n	80019c8 <__gnu_unwind_execute+0x11c>
 80018e0:	2bc0      	cmp	r3, #192	; 0xc0
 80018e2:	f000 808a 	beq.w	80019fa <__gnu_unwind_execute+0x14e>
 80018e6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80018ea:	2bd0      	cmp	r3, #208	; 0xd0
 80018ec:	d10b      	bne.n	8001906 <__gnu_unwind_execute+0x5a>
 80018ee:	f000 0207 	and.w	r2, r0, #7
 80018f2:	3201      	adds	r2, #1
 80018f4:	2305      	movs	r3, #5
 80018f6:	2101      	movs	r1, #1
 80018f8:	4628      	mov	r0, r5
 80018fa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80018fe:	f7ff fd99 	bl	8001434 <_Unwind_VRS_Pop>
 8001902:	2800      	cmp	r0, #0
 8001904:	d0d9      	beq.n	80018ba <__gnu_unwind_execute+0xe>
 8001906:	2009      	movs	r0, #9
 8001908:	b005      	add	sp, #20
 800190a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800190e:	0083      	lsls	r3, r0, #2
 8001910:	b2db      	uxtb	r3, r3
 8001912:	1d1f      	adds	r7, r3, #4
 8001914:	2300      	movs	r3, #0
 8001916:	f10d 090c 	add.w	r9, sp, #12
 800191a:	4619      	mov	r1, r3
 800191c:	220d      	movs	r2, #13
 800191e:	4628      	mov	r0, r5
 8001920:	f8cd 9000 	str.w	r9, [sp]
 8001924:	f7ff fba2 	bl	800106c <_Unwind_VRS_Get>
 8001928:	9b03      	ldr	r3, [sp, #12]
 800192a:	0660      	lsls	r0, r4, #25
 800192c:	bf4c      	ite	mi
 800192e:	1bdf      	submi	r7, r3, r7
 8001930:	18ff      	addpl	r7, r7, r3
 8001932:	2300      	movs	r3, #0
 8001934:	220d      	movs	r2, #13
 8001936:	4628      	mov	r0, r5
 8001938:	4619      	mov	r1, r3
 800193a:	f8cd 9000 	str.w	r9, [sp]
 800193e:	9703      	str	r7, [sp, #12]
 8001940:	f7ff fbba 	bl	80010b8 <_Unwind_VRS_Set>
 8001944:	e7b9      	b.n	80018ba <__gnu_unwind_execute+0xe>
 8001946:	f000 030d 	and.w	r3, r0, #13
 800194a:	2b0d      	cmp	r3, #13
 800194c:	d0db      	beq.n	8001906 <__gnu_unwind_execute+0x5a>
 800194e:	2300      	movs	r3, #0
 8001950:	af03      	add	r7, sp, #12
 8001952:	4619      	mov	r1, r3
 8001954:	f000 020f 	and.w	r2, r0, #15
 8001958:	9700      	str	r7, [sp, #0]
 800195a:	4628      	mov	r0, r5
 800195c:	f7ff fb86 	bl	800106c <_Unwind_VRS_Get>
 8001960:	2300      	movs	r3, #0
 8001962:	220d      	movs	r2, #13
 8001964:	4628      	mov	r0, r5
 8001966:	4619      	mov	r1, r3
 8001968:	9700      	str	r7, [sp, #0]
 800196a:	f7ff fba5 	bl	80010b8 <_Unwind_VRS_Set>
 800196e:	e7a4      	b.n	80018ba <__gnu_unwind_execute+0xe>
 8001970:	4630      	mov	r0, r6
 8001972:	f7ff ff6f 	bl	8001854 <next_unwind_byte>
 8001976:	0224      	lsls	r4, r4, #8
 8001978:	4320      	orrs	r0, r4
 800197a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800197e:	d0c2      	beq.n	8001906 <__gnu_unwind_execute+0x5a>
 8001980:	2300      	movs	r3, #0
 8001982:	0104      	lsls	r4, r0, #4
 8001984:	4619      	mov	r1, r3
 8001986:	4628      	mov	r0, r5
 8001988:	b2a2      	uxth	r2, r4
 800198a:	f7ff fd53 	bl	8001434 <_Unwind_VRS_Pop>
 800198e:	2800      	cmp	r0, #0
 8001990:	d1b9      	bne.n	8001906 <__gnu_unwind_execute+0x5a>
 8001992:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001996:	bf18      	it	ne
 8001998:	f04f 0801 	movne.w	r8, #1
 800199c:	e78d      	b.n	80018ba <__gnu_unwind_execute+0xe>
 800199e:	43c3      	mvns	r3, r0
 80019a0:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	411a      	asrs	r2, r3
 80019aa:	2300      	movs	r3, #0
 80019ac:	0701      	lsls	r1, r0, #28
 80019ae:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80019b2:	bf48      	it	mi
 80019b4:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80019b8:	4628      	mov	r0, r5
 80019ba:	4619      	mov	r1, r3
 80019bc:	f7ff fd3a 	bl	8001434 <_Unwind_VRS_Pop>
 80019c0:	2800      	cmp	r0, #0
 80019c2:	f43f af7a 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 80019c6:	e79e      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 80019c8:	28b1      	cmp	r0, #177	; 0xb1
 80019ca:	d03c      	beq.n	8001a46 <__gnu_unwind_execute+0x19a>
 80019cc:	28b2      	cmp	r0, #178	; 0xb2
 80019ce:	f000 80b0 	beq.w	8001b32 <__gnu_unwind_execute+0x286>
 80019d2:	28b3      	cmp	r0, #179	; 0xb3
 80019d4:	d04a      	beq.n	8001a6c <__gnu_unwind_execute+0x1c0>
 80019d6:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80019da:	2bb4      	cmp	r3, #180	; 0xb4
 80019dc:	d093      	beq.n	8001906 <__gnu_unwind_execute+0x5a>
 80019de:	2301      	movs	r3, #1
 80019e0:	f000 0207 	and.w	r2, r0, #7
 80019e4:	441a      	add	r2, r3
 80019e6:	4628      	mov	r0, r5
 80019e8:	4619      	mov	r1, r3
 80019ea:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019ee:	f7ff fd21 	bl	8001434 <_Unwind_VRS_Pop>
 80019f2:	2800      	cmp	r0, #0
 80019f4:	f43f af61 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 80019f8:	e785      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 80019fa:	28c6      	cmp	r0, #198	; 0xc6
 80019fc:	d04f      	beq.n	8001a9e <__gnu_unwind_execute+0x1f2>
 80019fe:	28c7      	cmp	r0, #199	; 0xc7
 8001a00:	d061      	beq.n	8001ac6 <__gnu_unwind_execute+0x21a>
 8001a02:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001a06:	2bc0      	cmp	r3, #192	; 0xc0
 8001a08:	d070      	beq.n	8001aec <__gnu_unwind_execute+0x240>
 8001a0a:	28c8      	cmp	r0, #200	; 0xc8
 8001a0c:	d07c      	beq.n	8001b08 <__gnu_unwind_execute+0x25c>
 8001a0e:	28c9      	cmp	r0, #201	; 0xc9
 8001a10:	f47f af79 	bne.w	8001906 <__gnu_unwind_execute+0x5a>
 8001a14:	4630      	mov	r0, r6
 8001a16:	f7ff ff1d 	bl	8001854 <next_unwind_byte>
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4628      	mov	r0, r5
 8001a22:	0314      	lsls	r4, r2, #12
 8001a24:	f002 020f 	and.w	r2, r2, #15
 8001a28:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8001a2c:	440a      	add	r2, r1
 8001a2e:	4322      	orrs	r2, r4
 8001a30:	f7ff fd00 	bl	8001434 <_Unwind_VRS_Pop>
 8001a34:	2800      	cmp	r0, #0
 8001a36:	f43f af40 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 8001a3a:	e764      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 8001a3c:	f1b8 0f00 	cmp.w	r8, #0
 8001a40:	d01c      	beq.n	8001a7c <__gnu_unwind_execute+0x1d0>
 8001a42:	2000      	movs	r0, #0
 8001a44:	e760      	b.n	8001908 <__gnu_unwind_execute+0x5c>
 8001a46:	4630      	mov	r0, r6
 8001a48:	f7ff ff04 	bl	8001854 <next_unwind_byte>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	f43f af59 	beq.w	8001906 <__gnu_unwind_execute+0x5a>
 8001a54:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001a58:	f47f af55 	bne.w	8001906 <__gnu_unwind_execute+0x5a>
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4628      	mov	r0, r5
 8001a60:	f7ff fce8 	bl	8001434 <_Unwind_VRS_Pop>
 8001a64:	2800      	cmp	r0, #0
 8001a66:	f43f af28 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 8001a6a:	e74c      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	f7ff fef1 	bl	8001854 <next_unwind_byte>
 8001a72:	2301      	movs	r3, #1
 8001a74:	4602      	mov	r2, r0
 8001a76:	4619      	mov	r1, r3
 8001a78:	4628      	mov	r0, r5
 8001a7a:	e7d2      	b.n	8001a22 <__gnu_unwind_execute+0x176>
 8001a7c:	ac03      	add	r4, sp, #12
 8001a7e:	4643      	mov	r3, r8
 8001a80:	220e      	movs	r2, #14
 8001a82:	4641      	mov	r1, r8
 8001a84:	4628      	mov	r0, r5
 8001a86:	9400      	str	r4, [sp, #0]
 8001a88:	f7ff faf0 	bl	800106c <_Unwind_VRS_Get>
 8001a8c:	4643      	mov	r3, r8
 8001a8e:	220f      	movs	r2, #15
 8001a90:	4628      	mov	r0, r5
 8001a92:	4641      	mov	r1, r8
 8001a94:	9400      	str	r4, [sp, #0]
 8001a96:	f7ff fb0f 	bl	80010b8 <_Unwind_VRS_Set>
 8001a9a:	4640      	mov	r0, r8
 8001a9c:	e734      	b.n	8001908 <__gnu_unwind_execute+0x5c>
 8001a9e:	4630      	mov	r0, r6
 8001aa0:	f7ff fed8 	bl	8001854 <next_unwind_byte>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	0314      	lsls	r4, r2, #12
 8001aaa:	f002 020f 	and.w	r2, r2, #15
 8001aae:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8001ab2:	3201      	adds	r2, #1
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4322      	orrs	r2, r4
 8001aba:	f7ff fcbb 	bl	8001434 <_Unwind_VRS_Pop>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	f43f aefb 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 8001ac4:	e71f      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f7ff fec4 	bl	8001854 <next_unwind_byte>
 8001acc:	4602      	mov	r2, r0
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	f43f af19 	beq.w	8001906 <__gnu_unwind_execute+0x5a>
 8001ad4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001ad8:	f47f af15 	bne.w	8001906 <__gnu_unwind_execute+0x5a>
 8001adc:	2104      	movs	r1, #4
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f7ff fca8 	bl	8001434 <_Unwind_VRS_Pop>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	f43f aee8 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 8001aea:	e70c      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 8001aec:	2303      	movs	r3, #3
 8001aee:	f000 020f 	and.w	r2, r0, #15
 8001af2:	3201      	adds	r2, #1
 8001af4:	4628      	mov	r0, r5
 8001af6:	4619      	mov	r1, r3
 8001af8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001afc:	f7ff fc9a 	bl	8001434 <_Unwind_VRS_Pop>
 8001b00:	2800      	cmp	r0, #0
 8001b02:	f43f aeda 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 8001b06:	e6fe      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 8001b08:	4630      	mov	r0, r6
 8001b0a:	f7ff fea3 	bl	8001854 <next_unwind_byte>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	2101      	movs	r1, #1
 8001b12:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8001b16:	f002 020f 	and.w	r2, r2, #15
 8001b1a:	3410      	adds	r4, #16
 8001b1c:	440a      	add	r2, r1
 8001b1e:	2305      	movs	r3, #5
 8001b20:	4628      	mov	r0, r5
 8001b22:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001b26:	f7ff fc85 	bl	8001434 <_Unwind_VRS_Pop>
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	f43f aec5 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 8001b30:	e6e9      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 8001b32:	2300      	movs	r3, #0
 8001b34:	f10d 090c 	add.w	r9, sp, #12
 8001b38:	220d      	movs	r2, #13
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4628      	mov	r0, r5
 8001b3e:	f8cd 9000 	str.w	r9, [sp]
 8001b42:	f7ff fa93 	bl	800106c <_Unwind_VRS_Get>
 8001b46:	4630      	mov	r0, r6
 8001b48:	f7ff fe84 	bl	8001854 <next_unwind_byte>
 8001b4c:	0602      	lsls	r2, r0, #24
 8001b4e:	f04f 0402 	mov.w	r4, #2
 8001b52:	d50c      	bpl.n	8001b6e <__gnu_unwind_execute+0x2c2>
 8001b54:	9b03      	ldr	r3, [sp, #12]
 8001b56:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001b5a:	40a0      	lsls	r0, r4
 8001b5c:	4418      	add	r0, r3
 8001b5e:	9003      	str	r0, [sp, #12]
 8001b60:	4630      	mov	r0, r6
 8001b62:	f7ff fe77 	bl	8001854 <next_unwind_byte>
 8001b66:	0603      	lsls	r3, r0, #24
 8001b68:	f104 0407 	add.w	r4, r4, #7
 8001b6c:	d4f2      	bmi.n	8001b54 <__gnu_unwind_execute+0x2a8>
 8001b6e:	9b03      	ldr	r3, [sp, #12]
 8001b70:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001b74:	40a2      	lsls	r2, r4
 8001b76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b7a:	441a      	add	r2, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9203      	str	r2, [sp, #12]
 8001b80:	4628      	mov	r0, r5
 8001b82:	220d      	movs	r2, #13
 8001b84:	4619      	mov	r1, r3
 8001b86:	f8cd 9000 	str.w	r9, [sp]
 8001b8a:	f7ff fa95 	bl	80010b8 <_Unwind_VRS_Set>
 8001b8e:	e694      	b.n	80018ba <__gnu_unwind_execute+0xe>

08001b90 <__gnu_unwind_frame>:
 8001b90:	460b      	mov	r3, r1
 8001b92:	f04f 0c03 	mov.w	ip, #3
 8001b96:	b500      	push	{lr}
 8001b98:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	6853      	ldr	r3, [r2, #4]
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	9202      	str	r2, [sp, #8]
 8001ba4:	a901      	add	r1, sp, #4
 8001ba6:	0e1a      	lsrs	r2, r3, #24
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	f88d c00c 	strb.w	ip, [sp, #12]
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	f88d 200d 	strb.w	r2, [sp, #13]
 8001bb4:	f7ff fe7a 	bl	80018ac <__gnu_unwind_execute>
 8001bb8:	b005      	add	sp, #20
 8001bba:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bbe:	bf00      	nop

08001bc0 <_Unwind_GetRegionStart>:
 8001bc0:	b508      	push	{r3, lr}
 8001bc2:	f7ff fe71 	bl	80018a8 <unwind_UCB_from_context>
 8001bc6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001bc8:	bd08      	pop	{r3, pc}
 8001bca:	bf00      	nop

08001bcc <_Unwind_GetLanguageSpecificData>:
 8001bcc:	b508      	push	{r3, lr}
 8001bce:	f7ff fe6b 	bl	80018a8 <unwind_UCB_from_context>
 8001bd2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001bd4:	79c3      	ldrb	r3, [r0, #7]
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001bdc:	bd08      	pop	{r3, pc}
 8001bde:	bf00      	nop

08001be0 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	2300      	movs	r3, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f805 	bl	8001c1c <_ZNSt8__detail17_List_node_header7_M_initEv>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
#endif
      }
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f87b 	bl	8001d46 <_ZNSaIN6CRSLib3Can6RM00087RxFrameEED1Ev>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 f85e 	bl	8001d26 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE12_Vector_implC1Ev>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ffeb 	bl	8001c5a <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EEC1Ev>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f88e 	bl	8001db8 <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIfEEEED1Ev>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f871 	bl	8001d98 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE10_List_implC1Ev>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_ZNSt7__cxx114listIPN8servo_md13CanControllerIfEESaIS4_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ffeb 	bl	8001ca6 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EEC1Ev>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE10_List_implD1Ev>:
      struct _List_impl
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f892 	bl	8001e0c <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIhEEEED1Ev>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EEC1Ev>:
      _List_base() = default;
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f875 	bl	8001dec <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE10_List_implC1Ev>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_ZNSt7__cxx114listIPN8servo_md13CanControllerIhEESaIS4_EEC1Ev>:
      list() = default;
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ffeb 	bl	8001cf2 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EEC1Ev>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f886 	bl	8001e40 <_ZNSaIN6CRSLib3Can6RM00087RxFrameEEC1Ev>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f88e 	bl	8001e58 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_Vector_impl_dataC1Ev>
	{ }
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_ZNSaIN6CRSLib3Can6RM00087RxFrameEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
	...

08001d5c <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	10db      	asrs	r3, r3, #3
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev+0x38>)
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f87e 	bl	8001e7e <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE13_M_deallocateEPS3_j>
      }
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5c 	bl	8001c42 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE12_Vector_implD1Ev>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	aaaaaaab 	.word	0xaaaaaaab

08001d98 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f87f 	bl	8001ea4 <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEC1Ev>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff2b 	bl	8001c04 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIfEEEED1Ev>:
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f871 	bl	8001ebc <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE8_M_clearEv>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff56 	bl	8001c8e <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE10_List_implD1Ev>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f894 	bl	8001f22 <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEC1Ev>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff01 	bl	8001c04 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIhEEEED1Ev>:
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f886 	bl	8001f3a <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE8_M_clearEv>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff52 	bl	8001cda <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE10_List_implD1Ev>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_ZNSaIN6CRSLib3Can6RM00087RxFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f8a9 	bl	8001fa0 <_ZN9__gnu_cxx13new_allocatorIN6CRSLib3Can6RM00087RxFrameEEC1Ev>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
	{ }
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
	if (__p)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f88c 	bl	8001fb4 <_ZNSt16allocator_traitsISaIN6CRSLib3Can6RM00087RxFrameEEE10deallocateERS4_PS3_j>
      }
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEC1Ev>:
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8a0 	bl	8001ff2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIfEEEEC1Ev>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d015      	beq.n	8001efe <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE8_M_clearEv+0x42>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8001edc:	6938      	ldr	r0, [r7, #16]
 8001ede:	f000 f812 	bl	8001f06 <_ZNSt10_List_nodeIPN8servo_md13CanControllerIfEEE9_M_valptrEv>
 8001ee2:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f88e 	bl	8002006 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE21_M_get_Node_allocatorEv>
 8001eea:	4603      	mov	r3, r0
 8001eec:	68f9      	ldr	r1, [r7, #12]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f893 	bl	800201a <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEE7destroyIS4_EEvRS6_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 8001ef4:	6939      	ldr	r1, [r7, #16]
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f89b 	bl	8002032 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE11_M_put_nodeEPSt10_List_nodeIS4_E>
      while (__cur != &_M_impl._M_node)
 8001efc:	e7e5      	b.n	8001eca <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE8_M_clearEv+0xe>
	}
    }
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_ZNSt10_List_nodeIPN8servo_md13CanControllerIfEEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3308      	adds	r3, #8
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f8b4 	bl	8002080 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIfEEE6_M_ptrEv>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEC1Ev>:
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8b4 	bl	8002098 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIhEEEEC1Ev>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d015      	beq.n	8001f7c <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8001f5a:	6938      	ldr	r0, [r7, #16]
 8001f5c:	f000 f812 	bl	8001f84 <_ZNSt10_List_nodeIPN8servo_md13CanControllerIhEEE9_M_valptrEv>
 8001f60:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8a2 	bl	80020ac <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE21_M_get_Node_allocatorEv>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	68f9      	ldr	r1, [r7, #12]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f8a7 	bl	80020c0 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEE7destroyIS4_EEvRS6_PT_>
	  _M_put_node(__tmp);
 8001f72:	6939      	ldr	r1, [r7, #16]
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8af 	bl	80020d8 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE11_M_put_nodeEPSt10_List_nodeIS4_E>
      while (__cur != &_M_impl._M_node)
 8001f7a:	e7e5      	b.n	8001f48 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE8_M_clearEv+0xe>
    }
 8001f7c:	bf00      	nop
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_ZNSt10_List_nodeIPN8servo_md13CanControllerIhEEE9_M_valptrEv>:
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3308      	adds	r3, #8
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f8b0 	bl	80020f6 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIhEEE6_M_ptrEv>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_ZN9__gnu_cxx13new_allocatorIN6CRSLib3Can6RM00087RxFrameEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <_ZNSt16allocator_traitsISaIN6CRSLib3Can6RM00087RxFrameEEE10deallocateERS4_PS3_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 8001fcc:	f7ff fe08 	bl	8001be0 <_ZSt21is_constant_evaluatedv>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <_ZNSt16allocator_traitsISaIN6CRSLib3Can6RM00087RxFrameEEE10deallocateERS4_PS3_j+0x2a>
	  {
	    ::operator delete(__p);
 8001fd6:	69b8      	ldr	r0, [r7, #24]
 8001fd8:	f002 fd62 	bl	8004aa0 <_ZdlPv>
	    return;
 8001fdc:	e005      	b.n	8001fea <_ZNSt16allocator_traitsISaIN6CRSLib3Can6RM00087RxFrameEEE10deallocateERS4_PS3_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	69b9      	ldr	r1, [r7, #24]
 8001fe2:	69f8      	ldr	r0, [r7, #28]
 8001fe4:	f000 f916 	bl	8002214 <_ZN9__gnu_cxx13new_allocatorIN6CRSLib3Can6RM00087RxFrameEE10deallocateEPS4_j>
      { __a.deallocate(__p, __n); }
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIfEEEEC1Ev>:
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEE7destroyIS4_EEvRS6_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
 8002024:	6838      	ldr	r0, [r7, #0]
 8002026:	f000 f872 	bl	800210e <_ZSt10destroy_atIPN8servo_md13CanControllerIfEEEvPT_>
#endif
	}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE11_M_put_nodeEPSt10_List_nodeIS4_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	6839      	ldr	r1, [r7, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f86c 	bl	8002120 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEE10deallocateERS6_PS5_j>
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <_ZSt8_DestroyIPN6CRSLib3Can6RM00087RxFrameES3_EvT_S5_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f87c 	bl	8002170 <_ZSt8_DestroyIPN6CRSLib3Can6RM00087RxFrameEEvT_S5_>
    }
 8002078:	bf00      	nop
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIfEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f887 	bl	800219c <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIfEEE7_M_addrEv>
 800208e:	4603      	mov	r3, r0
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIhEEEEC1Ev>:
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80020ca:	6838      	ldr	r0, [r7, #0]
 80020cc:	f000 f870 	bl	80021b0 <_ZSt10destroy_atIPN8servo_md13CanControllerIhEEEvPT_>
	}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE11_M_put_nodeEPSt10_List_nodeIS4_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	6839      	ldr	r1, [r7, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 f86a 	bl	80021c2 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEE10deallocateERS6_PS5_j>
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIhEEE6_M_ptrEv>:
      _M_ptr() noexcept
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f87e 	bl	8002200 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIhEEE7_M_addrEv>
 8002104:	4603      	mov	r3, r0
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <_ZSt10destroy_atIPN8servo_md13CanControllerIfEEEvPT_>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#if __cplusplus >= 201703L
  template <typename _Tp>
    _GLIBCXX20_CONSTEXPR inline void
    destroy_at(_Tp* __location)
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
	  for (auto& __x : *__location)
	    std::destroy_at(std::__addressof(__x));
	}
      else
	__location->~_Tp();
    }
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002138:	f7ff fd52 	bl	8001be0 <_ZSt21is_constant_evaluatedv>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 8002142:	69b8      	ldr	r0, [r7, #24]
 8002144:	f002 fcac 	bl	8004aa0 <_ZdlPv>
	    return;
 8002148:	e005      	b.n	8002156 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	69b9      	ldr	r1, [r7, #24]
 800214e:	69f8      	ldr	r0, [r7, #28]
 8002150:	f000 f894 	bl	800227c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIfEEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_ZSt10destroy_atIN6CRSLib3Can6RM00087RxFrameEEvPT_>:
    destroy_at(_Tp* __location)
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
    }
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <_ZSt8_DestroyIPN6CRSLib3Can6RM00087RxFrameEEvT_S5_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 800217a:	f7ff fd31 	bl	8001be0 <_ZSt21is_constant_evaluatedv>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d004      	beq.n	800218e <_ZSt8_DestroyIPN6CRSLib3Can6RM00087RxFrameEEvT_S5_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8002184:	6839      	ldr	r1, [r7, #0]
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f856 	bl	8002238 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN6CRSLib3Can6RM00087RxFrameEEEvT_S7_>
 800218c:	e003      	b.n	8002196 <_ZSt8_DestroyIPN6CRSLib3Can6RM00087RxFrameEEvT_S5_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800218e:	6839      	ldr	r1, [r7, #0]
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f869 	bl	8002268 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN6CRSLib3Can6RM00087RxFrameEEEvT_S7_>
    }
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIfEEE7_M_addrEv>:
      _M_addr() noexcept
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <_ZSt10destroy_atIPN8servo_md13CanControllerIhEEEvPT_>:
    destroy_at(_Tp* __location)
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    }
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr

080021c2 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b088      	sub	sp, #32
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80021da:	f7ff fd01 	bl	8001be0 <_ZSt21is_constant_evaluatedv>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 80021e4:	69b8      	ldr	r0, [r7, #24]
 80021e6:	f002 fc5b 	bl	8004aa0 <_ZdlPv>
	    return;
 80021ea:	e005      	b.n	80021f8 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	69b9      	ldr	r1, [r7, #24]
 80021f0:	69f8      	ldr	r0, [r7, #28]
 80021f2:	f000 f86a 	bl	80022ca <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIhEEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIhEEE7_M_addrEv>:
      _M_addr() noexcept
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <_ZN9__gnu_cxx13new_allocatorIN6CRSLib3Can6RM00087RxFrameEE10deallocateEPS4_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4619      	mov	r1, r3
 800222c:	68b8      	ldr	r0, [r7, #8]
 800222e:	f002 fc39 	bl	8004aa4 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN6CRSLib3Can6RM00087RxFrameEEEvT_S7_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d00a      	beq.n	8002260 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN6CRSLib3Can6RM00087RxFrameEEEvT_S7_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f828 	bl	80022a0 <_ZSt11__addressofIN6CRSLib3Can6RM00087RxFrameEEPT_RS4_>
 8002250:	4603      	mov	r3, r0
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f82e 	bl	80022b4 <_ZSt8_DestroyIN6CRSLib3Can6RM00087RxFrameEEvPT_>
	  for (; __first != __last; ++__first)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3318      	adds	r3, #24
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	e7f0      	b.n	8002242 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN6CRSLib3Can6RM00087RxFrameEEEvT_S7_+0xa>
	}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN6CRSLib3Can6RM00087RxFrameEEEvT_S7_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIfEEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4619      	mov	r1, r3
 8002294:	68b8      	ldr	r0, [r7, #8]
 8002296:	f002 fc05 	bl	8004aa4 <_ZdlPvj>
      }
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <_ZSt11__addressofIN6CRSLib3Can6RM00087RxFrameEEPT_RS4_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <_ZSt8_DestroyIN6CRSLib3Can6RM00087RxFrameEEvPT_>:
    _Destroy(_Tp* __pointer)
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff4e 	bl	800215e <_ZSt10destroy_atIN6CRSLib3Can6RM00087RxFrameEEvPT_>
    }
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIhEEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4619      	mov	r1, r3
 80022e2:	68b8      	ldr	r0, [r7, #8]
 80022e4:	f002 fbde 	bl	8004aa4 <_ZdlPvj>
      }
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_ZNSt7__cxx114listIPN8servo_md13CanControllerIhEESaIS4_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fd91 	bl	8001e20 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EED1Ev>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_ZNSt7__cxx114listIPN8servo_md13CanControllerIfEESaIS4_EED1Ev>:
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fd5a 	bl	8001dcc <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EED1Ev>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <_Z41__static_initialization_and_destruction_0ii>:
	void CanController<T>::trigger_update(){
		for(CanController<T>* pController : pInstances){
			pController->update();
		}
	}
}
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d148      	bne.n	80023c6 <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800233a:	4293      	cmp	r3, r2
 800233c:	d143      	bne.n	80023c6 <_Z41__static_initialization_and_destruction_0ii+0xa2>
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController<T>::rx_frames;
 800233e:	4b4a      	ldr	r3, [pc, #296]	; (8002468 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3301      	adds	r3, #1
 8002344:	4a48      	ldr	r2, [pc, #288]	; (8002468 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b47      	ldr	r3, [pc, #284]	; (8002468 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	bf0c      	ite	eq
 8002350:	2301      	moveq	r3, #1
 8002352:	2300      	movne	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800235a:	4844      	ldr	r0, [pc, #272]	; (800246c <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800235c:	f7ff fc8a 	bl	8001c74 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EEC1Ev>
	std::list<CanController<T>*> CanController<T>::pInstances;
 8002360:	4b43      	ldr	r3, [pc, #268]	; (8002470 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	4a42      	ldr	r2, [pc, #264]	; (8002470 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b41      	ldr	r3, [pc, #260]	; (8002470 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	bf0c      	ite	eq
 8002372:	2301      	moveq	r3, #1
 8002374:	2300      	movne	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 800237c:	483d      	ldr	r0, [pc, #244]	; (8002474 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800237e:	f7ff fc9f 	bl	8001cc0 <_ZNSt7__cxx114listIPN8servo_md13CanControllerIfEESaIS4_EEC1Ev>
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController<T>::rx_frames;
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	3301      	adds	r3, #1
 8002388:	4a3b      	ldr	r2, [pc, #236]	; (8002478 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b3a      	ldr	r3, [pc, #232]	; (8002478 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <_Z41__static_initialization_and_destruction_0ii+0x80>
 800239e:	4837      	ldr	r0, [pc, #220]	; (800247c <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80023a0:	f7ff fc68 	bl	8001c74 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EEC1Ev>
	std::list<CanController<T>*> CanController<T>::pInstances;
 80023a4:	4b36      	ldr	r3, [pc, #216]	; (8002480 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3301      	adds	r3, #1
 80023aa:	4a35      	ldr	r2, [pc, #212]	; (8002480 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b34      	ldr	r3, [pc, #208]	; (8002480 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	bf0c      	ite	eq
 80023b6:	2301      	moveq	r3, #1
 80023b8:	2300      	movne	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <_Z41__static_initialization_and_destruction_0ii+0xa2>
 80023c0:	4830      	ldr	r0, [pc, #192]	; (8002484 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80023c2:	f7ff fca3 	bl	8001d0c <_ZNSt7__cxx114listIPN8servo_md13CanControllerIhEESaIS4_EEC1Ev>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d148      	bne.n	800245e <_Z41__static_initialization_and_destruction_0ii+0x13a>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d143      	bne.n	800245e <_Z41__static_initialization_and_destruction_0ii+0x13a>
 80023d6:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3b01      	subs	r3, #1
 80023dc:	4a28      	ldr	r2, [pc, #160]	; (8002480 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 80023f2:	4824      	ldr	r0, [pc, #144]	; (8002484 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80023f4:	f7ff ff7b 	bl	80022ee <_ZNSt7__cxx114listIPN8servo_md13CanControllerIhEESaIS4_EED1Ev>
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController<T>::rx_frames;
 80023f8:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	4a1e      	ldr	r2, [pc, #120]	; (8002478 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf0c      	ite	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	2300      	movne	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <_Z41__static_initialization_and_destruction_0ii+0xf6>
 8002414:	4819      	ldr	r0, [pc, #100]	; (800247c <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8002416:	f000 f837 	bl	8002488 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev>
	std::list<CanController<T>*> CanController<T>::pInstances;
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3b01      	subs	r3, #1
 8002420:	4a13      	ldr	r2, [pc, #76]	; (8002470 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <_Z41__static_initialization_and_destruction_0ii+0x118>
 8002436:	480f      	ldr	r0, [pc, #60]	; (8002474 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8002438:	f7ff ff66 	bl	8002308 <_ZNSt7__cxx114listIPN8servo_md13CanControllerIfEESaIS4_EED1Ev>
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController<T>::rx_frames;
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3b01      	subs	r3, #1
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	bf0c      	ite	eq
 800244e:	2301      	moveq	r3, #1
 8002450:	2300      	movne	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <_Z41__static_initialization_and_destruction_0ii+0x13a>
 8002458:	4804      	ldr	r0, [pc, #16]	; (800246c <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800245a:	f000 f815 	bl	8002488 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200000c8 	.word	0x200000c8
 800246c:	20000098 	.word	0x20000098
 8002470:	200000cc 	.word	0x200000cc
 8002474:	200000a4 	.word	0x200000a4
 8002478:	200000d0 	.word	0x200000d0
 800247c:	200000b0 	.word	0x200000b0
 8002480:	200000d4 	.word	0x200000d4
 8002484:	200000bc 	.word	0x200000bc

08002488 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681c      	ldr	r4, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fdd8 	bl	8002050 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE19_M_get_Tp_allocatorEv>
 80024a0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80024a2:	461a      	mov	r2, r3
 80024a4:	4629      	mov	r1, r5
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7ff fddc 	bl	8002064 <_ZSt8_DestroyIPN6CRSLib3Can6RM00087RxFrameES3_EvT_S5_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fc54 	bl	8001d5c <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bdb0      	pop	{r4, r5, r7, pc}

080024be <_GLOBAL__sub_I_CanController.cpp>:
 80024be:	b580      	push	{r7, lr}
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024c6:	2001      	movs	r0, #1
 80024c8:	f7ff ff2c 	bl	8002324 <_Z41__static_initialization_and_destruction_0ii>
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_GLOBAL__sub_D_CanController.cpp>:
 80024ce:	b580      	push	{r7, lr}
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024d6:	2000      	movs	r0, #0
 80024d8:	f7ff ff24 	bl	8002324 <_Z41__static_initialization_and_destruction_0ii>
 80024dc:	bd80      	pop	{r7, pc}

080024de <_ZN8servo_md15MotorController18emergency_callbackEv>:

			//角度はラジアンで指定する
			void set_angle(float angle);

			//Emergencyスイッチが扱われたときに呼ばれるコールバック関数
			void emergency_callback(void){
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
				is_emergency = true;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	751a      	strb	r2, [r3, #20]

				//PWMを止めると角度が0になるため、どちらが良いか？
				//HAL_TIM_PWM_Stop(pwm_tim, pwm_channel);
			}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <_ZN8servo_md15MotorController6updateEv>:
			//パラメーターを保持する保管庫的なクラスを登録する関数
			void set_register(Parameters& params);

			//パラメーターの値を読み込み、それに従ってモーターに出力する関数
			//定期的に呼ばれる
			void update(){
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
				if(!is_emergency){
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7d1b      	ldrb	r3, [r3, #20]
 8002502:	f083 0301 	eor.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d010      	beq.n	800252e <_ZN8servo_md15MotorController6updateEv+0x38>
					//パラメーターの値を読み込む
					MotorParam motorparam = params.get_motor_params();
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	f107 0308 	add.w	r3, r7, #8
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f000 faaa 	bl	8002a70 <_ZN8servo_md10Parameters16get_motor_paramsEv>
					angle = motorparam.target;
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	60da      	str	r2, [r3, #12]
					//読み込んだ値をモーターに出力する
					set_angle(angle);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	4619      	mov	r1, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f82d 	bl	8002588 <_ZN8servo_md15MotorController9set_angleEf>
				}
			}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE10_List_implD1Ev>:
      struct _List_impl
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f8ee 	bl	8002720 <_ZNSaISt10_List_nodeIPN8servo_md15MotorControllerEEED1Ev>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EEC1Ev>:
      _List_base() = default;
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4618      	mov	r0, r3
 800255a:	f000 f8d1 	bl	8002700 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE10_List_implC1Ev>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EEC1Ev>:
      list() = default;
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ffeb 	bl	800254e <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EEC1Ev>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	0000      	movs	r0, r0
 8002584:	0000      	movs	r0, r0
	...

08002588 <_ZN8servo_md15MotorController9set_angleEf>:
{
	std::list<MotorController*> MotorController::pInstances;

	//角度からPWMのパルス幅を計算する関数
    void MotorController::set_angle(float angle)
    {
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
        //角度からパルス幅を計算する angle [0,pi] -> count [pwm_count_min,pwm_count_max]
        uint16_t count = (uint16_t)(pwm_count_min + (pwm_count_max - pwm_count_min) * angle / std::numbers::pi);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	8a1b      	ldrh	r3, [r3, #16]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fd ffea 	bl	8000570 <__aeabi_i2d>
 800259c:	4604      	mov	r4, r0
 800259e:	460d      	mov	r5, r1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8a5b      	ldrh	r3, [r3, #18]
 80025a4:	461a      	mov	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	8a1b      	ldrh	r3, [r3, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe fb35 	bl	8000c1c <__aeabi_i2f>
 80025b2:	4603      	mov	r3, r0
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fd fdd4 	bl	8000164 <__aeabi_fmul>
 80025bc:	4603      	mov	r3, r0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ffe8 	bl	8000594 <__aeabi_f2d>
 80025c4:	a31c      	add	r3, pc, #112	; (adr r3, 8002638 <_ZN8servo_md15MotorController9set_angleEf+0xb0>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fe f965 	bl	8000898 <__aeabi_ddiv>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fd fe7f 	bl	80002d8 <__adddf3>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fe fa41 	bl	8000a68 <__aeabi_d2uiz>
 80025e6:	4603      	mov	r3, r0
 80025e8:	81fb      	strh	r3, [r7, #14]
        //パルス幅を設定する
        __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, count);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	791b      	ldrb	r3, [r3, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <_ZN8servo_md15MotorController9set_angleEf+0x76>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	89fa      	ldrh	r2, [r7, #14]
 80025fa:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80025fc:	e018      	b.n	8002630 <_ZN8servo_md15MotorController9set_angleEf+0xa8>
        __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, count);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	791b      	ldrb	r3, [r3, #4]
 8002602:	2b04      	cmp	r3, #4
 8002604:	d105      	bne.n	8002612 <_ZN8servo_md15MotorController9set_angleEf+0x8a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	89fa      	ldrh	r2, [r7, #14]
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8002610:	e00e      	b.n	8002630 <_ZN8servo_md15MotorController9set_angleEf+0xa8>
        __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, count);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	791b      	ldrb	r3, [r3, #4]
 8002616:	2b08      	cmp	r3, #8
 8002618:	d105      	bne.n	8002626 <_ZN8servo_md15MotorController9set_angleEf+0x9e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	89fa      	ldrh	r2, [r7, #14]
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8002624:	e004      	b.n	8002630 <_ZN8servo_md15MotorController9set_angleEf+0xa8>
        __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, count);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	89fa      	ldrh	r2, [r7, #14]
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bdb0      	pop	{r4, r5, r7, pc}
 8002638:	54442d18 	.word	0x54442d18
 800263c:	400921fb 	.word	0x400921fb

08002640 <_ZN8servo_md15MotorController26trigger_emergency_callbackEv>:
    void MotorController::set_register(Parameters &parameters)
    {
        this->params = parameters;
    }

    void MotorController::trigger_emergency_callback(void){
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
    	for(MotorController* pInstance : pInstances){
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <_ZN8servo_md15MotorController26trigger_emergency_callbackEv+0x5c>)
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f882 	bl	8002754 <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE5beginEv>
 8002650:	4603      	mov	r3, r0
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f88e 	bl	8002776 <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE3endEv>
 800265a:	4603      	mov	r3, r0
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	463a      	mov	r2, r7
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f000 f896 	bl	8002796 <_ZSteqRKSt14_List_iteratorIPN8servo_md15MotorControllerEES5_>
 800266a:	4603      	mov	r3, r0
 800266c:	f083 0301 	eor.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00e      	beq.n	8002694 <_ZN8servo_md15MotorController26trigger_emergency_callbackEv+0x54>
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f8ae 	bl	80027da <_ZNKSt14_List_iteratorIPN8servo_md15MotorControllerEEdeEv>
 800267e:	4603      	mov	r3, r0
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60bb      	str	r3, [r7, #8]
    		pInstance->emergency_callback();
 8002684:	68b8      	ldr	r0, [r7, #8]
 8002686:	f7ff ff2a 	bl	80024de <_ZN8servo_md15MotorController18emergency_callbackEv>
    	for(MotorController* pInstance : pInstances){
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f895 	bl	80027bc <_ZNSt14_List_iteratorIPN8servo_md15MotorControllerEEppEv>
 8002692:	e7e4      	b.n	800265e <_ZN8servo_md15MotorController26trigger_emergency_callbackEv+0x1e>
    	}
    }
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200000d8 	.word	0x200000d8

080026a0 <_ZN8servo_md15MotorController14trigger_updateEv>:

    void MotorController::trigger_update(void){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
    	for(MotorController* pInstance : pInstances){
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <_ZN8servo_md15MotorController14trigger_updateEv+0x5c>)
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f852 	bl	8002754 <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE5beginEv>
 80026b0:	4603      	mov	r3, r0
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f85e 	bl	8002776 <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE3endEv>
 80026ba:	4603      	mov	r3, r0
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	463a      	mov	r2, r7
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f866 	bl	8002796 <_ZSteqRKSt14_List_iteratorIPN8servo_md15MotorControllerEES5_>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f083 0301 	eor.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00e      	beq.n	80026f4 <_ZN8servo_md15MotorController14trigger_updateEv+0x54>
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 f87e 	bl	80027da <_ZNKSt14_List_iteratorIPN8servo_md15MotorControllerEEdeEv>
 80026de:	4603      	mov	r3, r0
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60bb      	str	r3, [r7, #8]
    		pInstance->update();
 80026e4:	68b8      	ldr	r0, [r7, #8]
 80026e6:	f7ff ff06 	bl	80024f6 <_ZN8servo_md15MotorController6updateEv>
    	for(MotorController* pInstance : pInstances){
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f865 	bl	80027bc <_ZNSt14_List_iteratorIPN8servo_md15MotorControllerEEppEv>
 80026f2:	e7e4      	b.n	80026be <_ZN8servo_md15MotorController14trigger_updateEv+0x1e>
    	}
    }
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	200000d8 	.word	0x200000d8

08002700 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f874 	bl	80027f6 <_ZNSaISt10_List_nodeIPN8servo_md15MotorControllerEEEC1Ev>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fa77 	bl	8001c04 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <_ZNSaISt10_List_nodeIPN8servo_md15MotorControllerEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f866 	bl	800280e <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE8_M_clearEv>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fef6 	bl	8002536 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE10_List_implD1Ev>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f876 	bl	8002858 <_ZNSt14_List_iteratorIPN8servo_md15MotorControllerEEC1EPNSt8__detail15_List_node_baseE>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %list.  Iteration is done in ordinary element
       *  order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	f107 030c 	add.w	r3, r7, #12
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f866 	bl	8002858 <_ZNSt14_List_iteratorIPN8servo_md15MotorControllerEEC1EPNSt8__detail15_List_node_baseE>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <_ZSteqRKSt14_List_iteratorIPN8servo_md15MotorControllerEES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <_ZNSt14_List_iteratorIPN8servo_md15MotorControllerEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	601a      	str	r2, [r3, #0]
	return *this;
 80027ce:	687b      	ldr	r3, [r7, #4]
      }
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <_ZNKSt14_List_iteratorIPN8servo_md15MotorControllerEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f844 	bl	8002874 <_ZNSt10_List_nodeIPN8servo_md15MotorControllerEE9_M_valptrEv>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_ZNSaISt10_List_nodeIPN8servo_md15MotorControllerEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f846 	bl	8002890 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEEC1Ev>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	429a      	cmp	r2, r3
 8002822:	d015      	beq.n	8002850 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 800282e:	6938      	ldr	r0, [r7, #16]
 8002830:	f000 f820 	bl	8002874 <_ZNSt10_List_nodeIPN8servo_md15MotorControllerEE9_M_valptrEv>
 8002834:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f834 	bl	80028a4 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE21_M_get_Node_allocatorEv>
 800283c:	4603      	mov	r3, r0
 800283e:	68f9      	ldr	r1, [r7, #12]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 f839 	bl	80028b8 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE7destroyIS3_EEvRS5_PT_>
	  _M_put_node(__tmp);
 8002846:	6939      	ldr	r1, [r7, #16]
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f841 	bl	80028d0 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      while (__cur != &_M_impl._M_node)
 800284e:	e7e5      	b.n	800281c <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE8_M_clearEv+0xe>
    }
 8002850:	bf00      	nop
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_ZNSt14_List_iteratorIPN8servo_md15MotorControllerEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <_ZNSt10_List_nodeIPN8servo_md15MotorControllerEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3308      	adds	r3, #8
 8002880:	4618      	mov	r0, r3
 8002882:	f000 f834 	bl	80028ee <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md15MotorControllerEE6_M_ptrEv>
 8002886:	4603      	mov	r3, r0
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80028c2:	6838      	ldr	r0, [r7, #0]
 80028c4:	f000 f81f 	bl	8002906 <_ZSt10destroy_atIPN8servo_md15MotorControllerEEvPT_>
	}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	6839      	ldr	r1, [r7, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f819 	bl	8002918 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE10deallocateERS5_PS4_j>
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md15MotorControllerEE6_M_ptrEv>:
      _M_ptr() noexcept
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f82d 	bl	8002956 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md15MotorControllerEE7_M_addrEv>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_ZSt10destroy_atIPN8servo_md15MotorControllerEEvPT_>:
    destroy_at(_Tp* __location)
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
    }
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002930:	f7ff f956 	bl	8001be0 <_ZSt21is_constant_evaluatedv>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE10deallocateERS5_PS4_j+0x2a>
	    ::operator delete(__p);
 800293a:	69b8      	ldr	r0, [r7, #24]
 800293c:	f002 f8b0 	bl	8004aa0 <_ZdlPv>
	    return;
 8002940:	e005      	b.n	800294e <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE10deallocateERS5_PS4_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	69b9      	ldr	r1, [r7, #24]
 8002946:	69f8      	ldr	r0, [r7, #28]
 8002948:	f000 f80f 	bl	800296a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md15MotorControllerEE7_M_addrEv>:
      _M_addr() noexcept
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4619      	mov	r1, r3
 8002982:	68b8      	ldr	r0, [r7, #8]
 8002984:	f002 f88e 	bl	8004aa4 <_ZdlPvj>
      }
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EED1Ev>:
      ~list() = default;
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fecb 	bl	8002734 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EED1Ev>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <_Z41__static_initialization_and_destruction_0ii>:

} // namespace servo_md
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d107      	bne.n	80029c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029be:	4293      	cmp	r3, r2
 80029c0:	d102      	bne.n	80029c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
	std::list<MotorController*> MotorController::pInstances;
 80029c2:	4809      	ldr	r0, [pc, #36]	; (80029e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80029c4:	f7ff fdd0 	bl	8002568 <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EEC1Ev>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d107      	bne.n	80029de <_Z41__static_initialization_and_destruction_0ii+0x36>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d102      	bne.n	80029de <_Z41__static_initialization_and_destruction_0ii+0x36>
 80029d8:	4803      	ldr	r0, [pc, #12]	; (80029e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80029da:	f7ff ffd8 	bl	800298e <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EED1Ev>
} // namespace servo_md
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200000d8 	.word	0x200000d8

080029ec <_GLOBAL__sub_I__ZN8servo_md15MotorController10pInstancesB5cxx11E>:
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7ff ffd7 	bl	80029a8 <_Z41__static_initialization_and_destruction_0ii>
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_GLOBAL__sub_D__ZN8servo_md15MotorController10pInstancesB5cxx11E>:
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7ff ffcf 	bl	80029a8 <_Z41__static_initialization_and_destruction_0ii>
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_ZN8servo_md10Parameters18emergency_callbackEv>:
			MotorParam SMParam;

			static std::list<Parameters*> pInstances;

			//Emergencyボタンが押されたときに呼ばれるコールバック関数
			void emergency_callback(void){
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
				SMParam.mode = MD_MODE::DEFAULT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	605a      	str	r2, [r3, #4]
			}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE10_List_implD1Ev>:
      struct _List_impl
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f88f 	bl	8002b50 <_ZNSaISt10_List_nodeIPN8servo_md10ParametersEEED1Ev>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EEC1Ev>:
      _List_base() = default;
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f872 	bl	8002b30 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE10_List_implC1Ev>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EEC1Ev>:
      list() = default;
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ffeb 	bl	8002a3c <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EEC1Ev>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_ZN8servo_md10Parameters16get_motor_paramsEv>:
	std::list<Parameters*> Parameters::pInstances;

    //パラメータを取得する関数
	//第1引数は結果を格納する構造体オブジェクトへのポインタ
	MotorParam Parameters::get_motor_params()
    {
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
        return SMParam;
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a84:	e882 0003 	stmia.w	r2, {r0, r1}
    }
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <_ZN8servo_md10Parameters15set_motor_paramERKNS_10MotorParamE>:

	//パラメータを設定する関数
	//第1引数は設定内容が書かれた構造体オブジェクト
	void Parameters::set_motor_param(const MotorParam& param)
    {
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
        SMParam = param;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aa6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <_ZN8servo_md10Parameters7set_BIDEm>:
        return BID;
    }

	//BIDを設定する関数
	void Parameters::set_BID(const uint32_t bid)
    {
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
        BID = bid;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	801a      	strh	r2, [r3, #0]
    }
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <_ZN8servo_md10Parameters26trigger_emergency_callbackEv>:

	void Parameters::trigger_emergency_callback(void){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
		for(Parameters* pParameters : pInstances){
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <_ZN8servo_md10Parameters26trigger_emergency_callbackEv+0x5c>)
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f852 	bl	8002b84 <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EE5beginEv>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f85e 	bl	8002ba6 <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EE3endEv>
 8002aea:	4603      	mov	r3, r0
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	463a      	mov	r2, r7
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 f866 	bl	8002bc6 <_ZSteqRKSt14_List_iteratorIPN8servo_md10ParametersEES5_>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f083 0301 	eor.w	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00e      	beq.n	8002b24 <_ZN8servo_md10Parameters26trigger_emergency_callbackEv+0x54>
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 f87e 	bl	8002c0a <_ZNKSt14_List_iteratorIPN8servo_md10ParametersEEdeEv>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60bb      	str	r3, [r7, #8]
			pParameters->emergency_callback();
 8002b14:	68b8      	ldr	r0, [r7, #8]
 8002b16:	f7ff ff79 	bl	8002a0c <_ZN8servo_md10Parameters18emergency_callbackEv>
		for(Parameters* pParameters : pInstances){
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f865 	bl	8002bec <_ZNSt14_List_iteratorIPN8servo_md10ParametersEEppEv>
 8002b22:	e7e4      	b.n	8002aee <_ZN8servo_md10Parameters26trigger_emergency_callbackEv+0x1e>
		}
	}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	200000e4 	.word	0x200000e4

08002b30 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f874 	bl	8002c26 <_ZNSaISt10_List_nodeIPN8servo_md10ParametersEEEC1Ev>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff f85f 	bl	8001c04 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <_ZNSaISt10_List_nodeIPN8servo_md10ParametersEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f866 	bl	8002c3e <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE8_M_clearEv>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff55 	bl	8002a24 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE10_List_implD1Ev>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f876 	bl	8002c88 <_ZNSt14_List_iteratorIPN8servo_md10ParametersEEC1EPNSt8__detail15_List_node_baseE>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f866 	bl	8002c88 <_ZNSt14_List_iteratorIPN8servo_md10ParametersEEC1EPNSt8__detail15_List_node_baseE>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <_ZSteqRKSt14_List_iteratorIPN8servo_md10ParametersEES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <_ZNSt14_List_iteratorIPN8servo_md10ParametersEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	601a      	str	r2, [r3, #0]
	return *this;
 8002bfe:	687b      	ldr	r3, [r7, #4]
      }
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <_ZNKSt14_List_iteratorIPN8servo_md10ParametersEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f844 	bl	8002ca4 <_ZNSt10_List_nodeIPN8servo_md10ParametersEE9_M_valptrEv>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <_ZNSaISt10_List_nodeIPN8servo_md10ParametersEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f846 	bl	8002cc0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md10ParametersEEEC1Ev>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d015      	beq.n	8002c80 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8002c5e:	6938      	ldr	r0, [r7, #16]
 8002c60:	f000 f820 	bl	8002ca4 <_ZNSt10_List_nodeIPN8servo_md10ParametersEE9_M_valptrEv>
 8002c64:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f834 	bl	8002cd4 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE21_M_get_Node_allocatorEv>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	68f9      	ldr	r1, [r7, #12]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f839 	bl	8002ce8 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md10ParametersEEEE7destroyIS3_EEvRS5_PT_>
	  _M_put_node(__tmp);
 8002c76:	6939      	ldr	r1, [r7, #16]
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f841 	bl	8002d00 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      while (__cur != &_M_impl._M_node)
 8002c7e:	e7e5      	b.n	8002c4c <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE8_M_clearEv+0xe>
    }
 8002c80:	bf00      	nop
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <_ZNSt14_List_iteratorIPN8servo_md10ParametersEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <_ZNSt10_List_nodeIPN8servo_md10ParametersEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3308      	adds	r3, #8
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f834 	bl	8002d1e <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md10ParametersEE6_M_ptrEv>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md10ParametersEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md10ParametersEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8002cf2:	6838      	ldr	r0, [r7, #0]
 8002cf4:	f000 f81f 	bl	8002d36 <_ZSt10destroy_atIPN8servo_md10ParametersEEvPT_>
	}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	6839      	ldr	r1, [r7, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f819 	bl	8002d48 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md10ParametersEEEE10deallocateERS5_PS4_j>
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md10ParametersEE6_M_ptrEv>:
      _M_ptr() noexcept
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f82d 	bl	8002d86 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md10ParametersEE7_M_addrEv>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <_ZSt10destroy_atIPN8servo_md10ParametersEEvPT_>:
    destroy_at(_Tp* __location)
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
    }
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md10ParametersEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002d60:	f7fe ff3e 	bl	8001be0 <_ZSt21is_constant_evaluatedv>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md10ParametersEEEE10deallocateERS5_PS4_j+0x2a>
	    ::operator delete(__p);
 8002d6a:	69b8      	ldr	r0, [r7, #24]
 8002d6c:	f001 fe98 	bl	8004aa0 <_ZdlPv>
	    return;
 8002d70:	e005      	b.n	8002d7e <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md10ParametersEEEE10deallocateERS5_PS4_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	69b9      	ldr	r1, [r7, #24]
 8002d76:	69f8      	ldr	r0, [r7, #28]
 8002d78:	f000 f80f 	bl	8002d9a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md10ParametersEEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md10ParametersEE7_M_addrEv>:
      _M_addr() noexcept
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md10ParametersEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4619      	mov	r1, r3
 8002db2:	68b8      	ldr	r0, [r7, #8]
 8002db4:	f001 fe76 	bl	8004aa4 <_ZdlPvj>
      }
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EED1Ev>:
      ~list() = default;
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fecb 	bl	8002b64 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EED1Ev>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <_Z41__static_initialization_and_destruction_0ii>:
}
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d102      	bne.n	8002df8 <_Z41__static_initialization_and_destruction_0ii+0x20>
	std::list<Parameters*> Parameters::pInstances;
 8002df2:	4809      	ldr	r0, [pc, #36]	; (8002e18 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002df4:	f7ff fe2f 	bl	8002a56 <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EEC1Ev>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d107      	bne.n	8002e0e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d102      	bne.n	8002e0e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002e08:	4803      	ldr	r0, [pc, #12]	; (8002e18 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002e0a:	f7ff ffd8 	bl	8002dbe <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EED1Ev>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200000e4 	.word	0x200000e4

08002e1c <_GLOBAL__sub_I__ZN8servo_md10Parameters10pInstancesB5cxx11E>:
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e24:	2001      	movs	r0, #1
 8002e26:	f7ff ffd7 	bl	8002dd8 <_Z41__static_initialization_and_destruction_0ii>
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <_GLOBAL__sub_D__ZN8servo_md10Parameters10pInstancesB5cxx11E>:
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e34:	2000      	movs	r0, #0
 8002e36:	f7ff ffcf 	bl	8002dd8 <_Z41__static_initialization_and_destruction_0ii>
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <_ZN8servo_md7led_mgr11led_processEv>:
static bool is_yellow_led_on = false;
static uint8_t blink_num;
static uint8_t enabled_motor_num = 0;

namespace servo_md::led_mgr{
	void led_process(void){
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
		constexpr unsigned int can_led_on_time = 60; //ms
 8002e42:	233c      	movs	r3, #60	; 0x3c
 8002e44:	61fb      	str	r3, [r7, #28]
		constexpr unsigned int green_led_on_time = 1900; //ms
 8002e46:	f240 736c 	movw	r3, #1900	; 0x76c
 8002e4a:	61bb      	str	r3, [r7, #24]
		constexpr unsigned int green_led_off_time = 100; //ms
 8002e4c:	2364      	movs	r3, #100	; 0x64
 8002e4e:	617b      	str	r3, [r7, #20]
		constexpr unsigned int yellow_led_period = 2000; //ms
 8002e50:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002e54:	613b      	str	r3, [r7, #16]
		constexpr unsigned int yellow_led_margin = 500; //ms
 8002e56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e5a:	60fb      	str	r3, [r7, #12]
		constexpr unsigned int yellow_led_blink_period = yellow_led_period - yellow_led_margin;
 8002e5c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002e60:	60bb      	str	r3, [r7, #8]
		if(is_can_led_on && ((HAL_GetTick() - can_led_last_on) > can_led_on_time)){
 8002e62:	4b77      	ldr	r3, [pc, #476]	; (8003040 <_ZN8servo_md7led_mgr11led_processEv+0x204>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <_ZN8servo_md7led_mgr11led_processEv+0x42>
 8002e6a:	f000 feed 	bl	8003c48 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b74      	ldr	r3, [pc, #464]	; (8003044 <_ZN8servo_md7led_mgr11led_processEv+0x208>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b3c      	cmp	r3, #60	; 0x3c
 8002e78:	d901      	bls.n	8002e7e <_ZN8servo_md7led_mgr11led_processEv+0x42>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <_ZN8servo_md7led_mgr11led_processEv+0x44>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <_ZN8servo_md7led_mgr11led_processEv+0x5a>
			HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8002e84:	2200      	movs	r2, #0
 8002e86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e8a:	486f      	ldr	r0, [pc, #444]	; (8003048 <_ZN8servo_md7led_mgr11led_processEv+0x20c>)
 8002e8c:	f001 f8a0 	bl	8003fd0 <HAL_GPIO_WritePin>
			is_can_led_on = true;
 8002e90:	4b6b      	ldr	r3, [pc, #428]	; (8003040 <_ZN8servo_md7led_mgr11led_processEv+0x204>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
		}

		if(is_green_led_on && ((HAL_GetTick() - green_led_last_toggle) > green_led_on_time)){
 8002e96:	4b6d      	ldr	r3, [pc, #436]	; (800304c <_ZN8servo_md7led_mgr11led_processEv+0x210>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <_ZN8servo_md7led_mgr11led_processEv+0x7a>
 8002e9e:	f000 fed3 	bl	8003c48 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <_ZN8servo_md7led_mgr11led_processEv+0x214>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f240 726c 	movw	r2, #1900	; 0x76c
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <_ZN8servo_md7led_mgr11led_processEv+0x7a>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <_ZN8servo_md7led_mgr11led_processEv+0x7c>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00d      	beq.n	8002ed8 <_ZN8servo_md7led_mgr11led_processEv+0x9c>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4864      	ldr	r0, [pc, #400]	; (8003054 <_ZN8servo_md7led_mgr11led_processEv+0x218>)
 8002ec2:	f001 f885 	bl	8003fd0 <HAL_GPIO_WritePin>
			is_green_led_on = false;
 8002ec6:	4b61      	ldr	r3, [pc, #388]	; (800304c <_ZN8servo_md7led_mgr11led_processEv+0x210>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
			green_led_last_toggle = HAL_GetTick();
 8002ecc:	f000 febc 	bl	8003c48 <HAL_GetTick>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4a5f      	ldr	r2, [pc, #380]	; (8003050 <_ZN8servo_md7led_mgr11led_processEv+0x214>)
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e020      	b.n	8002f1a <_ZN8servo_md7led_mgr11led_processEv+0xde>
		}else if((!is_green_led_on) && ((HAL_GetTick() - green_led_last_toggle) > green_led_off_time)){
 8002ed8:	4b5c      	ldr	r3, [pc, #368]	; (800304c <_ZN8servo_md7led_mgr11led_processEv+0x210>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	f083 0301 	eor.w	r3, r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <_ZN8servo_md7led_mgr11led_processEv+0xbe>
 8002ee6:	f000 feaf 	bl	8003c48 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	4b58      	ldr	r3, [pc, #352]	; (8003050 <_ZN8servo_md7led_mgr11led_processEv+0x214>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <_ZN8servo_md7led_mgr11led_processEv+0xbe>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <_ZN8servo_md7led_mgr11led_processEv+0xc0>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00c      	beq.n	8002f1a <_ZN8servo_md7led_mgr11led_processEv+0xde>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8002f00:	2201      	movs	r2, #1
 8002f02:	2101      	movs	r1, #1
 8002f04:	4853      	ldr	r0, [pc, #332]	; (8003054 <_ZN8servo_md7led_mgr11led_processEv+0x218>)
 8002f06:	f001 f863 	bl	8003fd0 <HAL_GPIO_WritePin>
			is_green_led_on = true;
 8002f0a:	4b50      	ldr	r3, [pc, #320]	; (800304c <_ZN8servo_md7led_mgr11led_processEv+0x210>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
			green_led_last_toggle = HAL_GetTick();
 8002f10:	f000 fe9a 	bl	8003c48 <HAL_GetTick>
 8002f14:	4603      	mov	r3, r0
 8002f16:	4a4e      	ldr	r2, [pc, #312]	; (8003050 <_ZN8servo_md7led_mgr11led_processEv+0x214>)
 8002f18:	6013      	str	r3, [r2, #0]
		}

		if(enabled_motor_num != 0){
 8002f1a:	4b4f      	ldr	r3, [pc, #316]	; (8003058 <_ZN8servo_md7led_mgr11led_processEv+0x21c>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d07f      	beq.n	8003022 <_ZN8servo_md7led_mgr11led_processEv+0x1e6>
			int yellow_led_on_time, yellow_led_off_time;
			yellow_led_on_time = yellow_led_off_time = yellow_led_blink_period / enabled_motor_num / 2;
 8002f22:	4b4d      	ldr	r3, [pc, #308]	; (8003058 <_ZN8servo_md7led_mgr11led_processEv+0x21c>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
			if(blink_num < enabled_motor_num){
 8002f36:	4b49      	ldr	r3, [pc, #292]	; (800305c <_ZN8servo_md7led_mgr11led_processEv+0x220>)
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	4b47      	ldr	r3, [pc, #284]	; (8003058 <_ZN8servo_md7led_mgr11led_processEv+0x21c>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d250      	bcs.n	8002fe4 <_ZN8servo_md7led_mgr11led_processEv+0x1a8>
				if(is_yellow_led_on && (HAL_GetTick() - yellow_led_last_toggle) > yellow_led_on_time){
 8002f42:	4b47      	ldr	r3, [pc, #284]	; (8003060 <_ZN8servo_md7led_mgr11led_processEv+0x224>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <_ZN8servo_md7led_mgr11led_processEv+0x124>
 8002f4a:	f000 fe7d 	bl	8003c48 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	4b44      	ldr	r3, [pc, #272]	; (8003064 <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	1ad2      	subs	r2, r2, r3
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d901      	bls.n	8002f60 <_ZN8servo_md7led_mgr11led_processEv+0x124>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <_ZN8servo_md7led_mgr11led_processEv+0x126>
 8002f60:	2300      	movs	r3, #0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <_ZN8servo_md7led_mgr11led_processEv+0x146>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2102      	movs	r1, #2
 8002f6a:	483a      	ldr	r0, [pc, #232]	; (8003054 <_ZN8servo_md7led_mgr11led_processEv+0x218>)
 8002f6c:	f001 f830 	bl	8003fd0 <HAL_GPIO_WritePin>
					is_yellow_led_on = false;
 8002f70:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <_ZN8servo_md7led_mgr11led_processEv+0x224>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
					yellow_led_last_toggle = HAL_GetTick();
 8002f76:	f000 fe67 	bl	8003c48 <HAL_GetTick>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4a39      	ldr	r2, [pc, #228]	; (8003064 <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 8002f7e:	6013      	str	r3, [r2, #0]
			}
		}else{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
			yellow_led_last_toggle = HAL_GetTick();
		}
	}
 8002f80:	e059      	b.n	8003036 <_ZN8servo_md7led_mgr11led_processEv+0x1fa>
				}else if((!is_yellow_led_on) && (HAL_GetTick() - yellow_led_last_toggle) > yellow_led_off_time){
 8002f82:	4b37      	ldr	r3, [pc, #220]	; (8003060 <_ZN8servo_md7led_mgr11led_processEv+0x224>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	f083 0301 	eor.w	r3, r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <_ZN8servo_md7led_mgr11led_processEv+0x16a>
 8002f90:	f000 fe5a 	bl	8003c48 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b33      	ldr	r3, [pc, #204]	; (8003064 <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	1ad2      	subs	r2, r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d901      	bls.n	8002fa6 <_ZN8servo_md7led_mgr11led_processEv+0x16a>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <_ZN8servo_md7led_mgr11led_processEv+0x16c>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d044      	beq.n	8003036 <_ZN8servo_md7led_mgr11led_processEv+0x1fa>
					if(blink_num < enabled_motor_num - 1){
 8002fac:	4b2b      	ldr	r3, [pc, #172]	; (800305c <_ZN8servo_md7led_mgr11led_processEv+0x220>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <_ZN8servo_md7led_mgr11led_processEv+0x21c>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	da07      	bge.n	8002fcc <_ZN8servo_md7led_mgr11led_processEv+0x190>
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	4824      	ldr	r0, [pc, #144]	; (8003054 <_ZN8servo_md7led_mgr11led_processEv+0x218>)
 8002fc2:	f001 f805 	bl	8003fd0 <HAL_GPIO_WritePin>
						is_yellow_led_on = true;
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <_ZN8servo_md7led_mgr11led_processEv+0x224>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
					blink_num++;
 8002fcc:	4b23      	ldr	r3, [pc, #140]	; (800305c <_ZN8servo_md7led_mgr11led_processEv+0x220>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	4b21      	ldr	r3, [pc, #132]	; (800305c <_ZN8servo_md7led_mgr11led_processEv+0x220>)
 8002fd6:	701a      	strb	r2, [r3, #0]
					yellow_led_last_toggle = HAL_GetTick();
 8002fd8:	f000 fe36 	bl	8003c48 <HAL_GetTick>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4a21      	ldr	r2, [pc, #132]	; (8003064 <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 8002fe0:	6013      	str	r3, [r2, #0]
	}
 8002fe2:	e028      	b.n	8003036 <_ZN8servo_md7led_mgr11led_processEv+0x1fa>
				if((HAL_GetTick() - yellow_led_last_toggle) > yellow_led_margin){
 8002fe4:	f000 fe30 	bl	8003c48 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ff4:	bf8c      	ite	hi
 8002ff6:	2301      	movhi	r3, #1
 8002ff8:	2300      	movls	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01a      	beq.n	8003036 <_ZN8servo_md7led_mgr11led_processEv+0x1fa>
					blink_num = 0;
 8003000:	4b16      	ldr	r3, [pc, #88]	; (800305c <_ZN8servo_md7led_mgr11led_processEv+0x220>)
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8003006:	2201      	movs	r2, #1
 8003008:	2102      	movs	r1, #2
 800300a:	4812      	ldr	r0, [pc, #72]	; (8003054 <_ZN8servo_md7led_mgr11led_processEv+0x218>)
 800300c:	f000 ffe0 	bl	8003fd0 <HAL_GPIO_WritePin>
					is_yellow_led_on = true;
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <_ZN8servo_md7led_mgr11led_processEv+0x224>)
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
					yellow_led_last_toggle = HAL_GetTick();
 8003016:	f000 fe17 	bl	8003c48 <HAL_GetTick>
 800301a:	4603      	mov	r3, r0
 800301c:	4a11      	ldr	r2, [pc, #68]	; (8003064 <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 800301e:	6013      	str	r3, [r2, #0]
	}
 8003020:	e009      	b.n	8003036 <_ZN8servo_md7led_mgr11led_processEv+0x1fa>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8003022:	2200      	movs	r2, #0
 8003024:	2102      	movs	r1, #2
 8003026:	480b      	ldr	r0, [pc, #44]	; (8003054 <_ZN8servo_md7led_mgr11led_processEv+0x218>)
 8003028:	f000 ffd2 	bl	8003fd0 <HAL_GPIO_WritePin>
			yellow_led_last_toggle = HAL_GetTick();
 800302c:	f000 fe0c 	bl	8003c48 <HAL_GetTick>
 8003030:	4603      	mov	r3, r0
 8003032:	4a0c      	ldr	r2, [pc, #48]	; (8003064 <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 8003034:	6013      	str	r3, [r2, #0]
	}
 8003036:	bf00      	nop
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200000fc 	.word	0x200000fc
 8003044:	200000f0 	.word	0x200000f0
 8003048:	40011000 	.word	0x40011000
 800304c:	20000000 	.word	0x20000000
 8003050:	200000f4 	.word	0x200000f4
 8003054:	40010c00 	.word	0x40010c00
 8003058:	200000ff 	.word	0x200000ff
 800305c:	200000fe 	.word	0x200000fe
 8003060:	200000fd 	.word	0x200000fd
 8003064:	200000f8 	.word	0x200000f8

08003068 <_ZN8servo_md7led_mgr17disable_all_motorEv>:

	void decrease_enabled_motor(){
		enabled_motor_num = enabled_motor_num > 0? enabled_motor_num - 1 : 0;
	}

	void disable_all_motor(){
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
		enabled_motor_num = 0;
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <_ZN8servo_md7led_mgr17disable_all_motorEv+0x14>)
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
	}
 8003072:	bf00      	nop
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	200000ff 	.word	0x200000ff

08003080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003080:	b510      	push	{r4, lr}
 8003082:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003084:	2214      	movs	r2, #20
 8003086:	2100      	movs	r1, #0
 8003088:	a808      	add	r0, sp, #32
 800308a:	f002 fa4f 	bl	800552c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800308e:	2214      	movs	r2, #20
 8003090:	2100      	movs	r1, #0
 8003092:	a801      	add	r0, sp, #4
 8003094:	f002 fa4a 	bl	800552c <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003098:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800309a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800309e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030a0:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030ac:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030ae:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030b0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b2:	f000 ff9f 	bl	8003ff4 <HAL_RCC_OscConfig>
 80030b6:	b108      	cbz	r0, 80030bc <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030b8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030ba:	e7fe      	b.n	80030ba <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030bc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030be:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030c6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030c8:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030cc:	4621      	mov	r1, r4
 80030ce:	a801      	add	r0, sp, #4
 80030d0:	f001 f966 	bl	80043a0 <HAL_RCC_ClockConfig>
 80030d4:	b108      	cbz	r0, 80030da <SystemClock_Config+0x5a>
 80030d6:	b672      	cpsid	i
  while (1)
 80030d8:	e7fe      	b.n	80030d8 <SystemClock_Config+0x58>
}
 80030da:	b010      	add	sp, #64	; 0x40
 80030dc:	bd10      	pop	{r4, pc}
	...

080030e0 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	2610      	movs	r6, #16
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 80030e6:	f000 fd91 	bl	8003c0c <HAL_Init>
  SystemClock_Config();
 80030ea:	f7ff ffc9 	bl	8003080 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ee:	4632      	mov	r2, r6
 80030f0:	2100      	movs	r1, #0
 80030f2:	a812      	add	r0, sp, #72	; 0x48
 80030f4:	f002 fa1a 	bl	800552c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f8:	4baa      	ldr	r3, [pc, #680]	; (80033a4 <main+0x2c4>)
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 80030fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030fe:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8003100:	48a9      	ldr	r0, [pc, #676]	; (80033a8 <main+0x2c8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003102:	4332      	orrs	r2, r6
 8003104:	619a      	str	r2, [r3, #24]
 8003106:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003108:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800310a:	4032      	ands	r2, r6
 800310c:	9201      	str	r2, [sp, #4]
 800310e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003110:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003112:	2402      	movs	r4, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003114:	f042 0220 	orr.w	r2, r2, #32
 8003118:	619a      	str	r2, [r3, #24]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	f002 0220 	and.w	r2, r2, #32
 8003120:	9202      	str	r2, [sp, #8]
 8003122:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	f042 0204 	orr.w	r2, r2, #4
 800312a:	619a      	str	r2, [r3, #24]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	f002 0204 	and.w	r2, r2, #4
 8003132:	9203      	str	r2, [sp, #12]
 8003134:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	f042 0208 	orr.w	r2, r2, #8
 800313c:	619a      	str	r2, [r3, #24]
 800313e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8003140:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	9304      	str	r3, [sp, #16]
 8003148:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 800314a:	f000 ff41 	bl	8003fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 800314e:	2200      	movs	r2, #0
 8003150:	2103      	movs	r1, #3
 8003152:	4896      	ldr	r0, [pc, #600]	; (80033ac <main+0x2cc>)
 8003154:	f000 ff3c 	bl	8003fd0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003158:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 800315c:	4892      	ldr	r0, [pc, #584]	; (80033a8 <main+0x2c8>)
 800315e:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003160:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003164:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 8003168:	f000 fe56 	bl	8003e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 800316c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316e:	488f      	ldr	r0, [pc, #572]	; (80033ac <main+0x2cc>)
 8003170:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003172:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003176:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	f000 fe4d 	bl	8003e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800317e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003182:	4b8b      	ldr	r3, [pc, #556]	; (80033b0 <main+0x2d0>)
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 8003184:	4889      	ldr	r0, [pc, #548]	; (80033ac <main+0x2cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003186:	e9cd 1312 	strd	r1, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 800318a:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800318c:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 800318e:	f000 fe43 	bl	8003e18 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2028      	movs	r0, #40	; 0x28
 8003196:	4611      	mov	r1, r2
 8003198:	f000 fdea 	bl	8003d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800319c:	2028      	movs	r0, #40	; 0x28
 800319e:	f000 fe19 	bl	8003dd4 <HAL_NVIC_EnableIRQ>
  hcan.Instance = CAN1;
 80031a2:	4884      	ldr	r0, [pc, #528]	; (80033b4 <main+0x2d4>)
 80031a4:	4b84      	ldr	r3, [pc, #528]	; (80033b8 <main+0x2d8>)
  hcan.Init.Prescaler = 16;
 80031a6:	e9c0 3600 	strd	r3, r6, [r0]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80031aa:	2300      	movs	r3, #0
  hcan.Init.TimeTriggeredMode = DISABLE;
 80031ac:	6183      	str	r3, [r0, #24]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80031ae:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80031b0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80031b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80031b8:	f000 fd4c 	bl	8003c54 <HAL_CAN_Init>
 80031bc:	4605      	mov	r5, r0
 80031be:	b108      	cbz	r0, 80031c4 <main+0xe4>
 80031c0:	b672      	cpsid	i
  while (1)
 80031c2:	e7fe      	b.n	80031c2 <main+0xe2>
  htim1.Init.Prescaler = 71;
 80031c4:	f04f 0847 	mov.w	r8, #71	; 0x47
  htim1.Init.Period = 999;
 80031c8:	f240 37e7 	movw	r7, #999	; 0x3e7
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031cc:	4601      	mov	r1, r0
 80031ce:	4632      	mov	r2, r6
 80031d0:	a807      	add	r0, sp, #28
 80031d2:	f002 f9ab 	bl	800552c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031d6:	221c      	movs	r2, #28
 80031d8:	4629      	mov	r1, r5
 80031da:	a80b      	add	r0, sp, #44	; 0x2c
  htim1.Instance = TIM1;
 80031dc:	4c77      	ldr	r4, [pc, #476]	; (80033bc <main+0x2dc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031de:	e9cd 5505 	strd	r5, r5, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031e2:	f002 f9a3 	bl	800552c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031e6:	2220      	movs	r2, #32
 80031e8:	4629      	mov	r1, r5
 80031ea:	a812      	add	r0, sp, #72	; 0x48
 80031ec:	f002 f99e 	bl	800552c <memset>
  htim1.Init.Prescaler = 71;
 80031f0:	4b73      	ldr	r3, [pc, #460]	; (80033c0 <main+0x2e0>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031f2:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 71;
 80031f4:	e9c4 3800 	strd	r3, r8, [r4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f8:	e9c4 7503 	strd	r7, r5, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003200:	60a5      	str	r5, [r4, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003202:	f001 fa21 	bl	8004648 <HAL_TIM_Base_Init>
 8003206:	b108      	cbz	r0, 800320c <main+0x12c>
 8003208:	b672      	cpsid	i
  while (1)
 800320a:	e7fe      	b.n	800320a <main+0x12a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800320c:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003210:	4620      	mov	r0, r4
 8003212:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003214:	f8cd 901c 	str.w	r9, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003218:	f001 faff 	bl	800481a <HAL_TIM_ConfigClockSource>
 800321c:	b108      	cbz	r0, 8003222 <main+0x142>
 800321e:	b672      	cpsid	i
  while (1)
 8003220:	e7fe      	b.n	8003220 <main+0x140>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003222:	4620      	mov	r0, r4
 8003224:	f001 fa3c 	bl	80046a0 <HAL_TIM_PWM_Init>
 8003228:	b108      	cbz	r0, 800322e <main+0x14e>
 800322a:	b672      	cpsid	i
  while (1)
 800322c:	e7fe      	b.n	800322c <main+0x14c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800322e:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003232:	a905      	add	r1, sp, #20
 8003234:	4620      	mov	r0, r4
 8003236:	f001 fbe3 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 800323a:	4602      	mov	r2, r0
 800323c:	b108      	cbz	r0, 8003242 <main+0x162>
 800323e:	b672      	cpsid	i
  while (1)
 8003240:	e7fe      	b.n	8003240 <main+0x160>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003242:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003244:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8003248:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800324c:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003250:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003252:	a90b      	add	r1, sp, #44	; 0x2c
 8003254:	4620      	mov	r0, r4
 8003256:	f001 fa7b 	bl	8004750 <HAL_TIM_PWM_ConfigChannel>
 800325a:	b108      	cbz	r0, 8003260 <main+0x180>
 800325c:	b672      	cpsid	i
  while (1)
 800325e:	e7fe      	b.n	800325e <main+0x17e>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003264:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 8003268:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800326c:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800326e:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003270:	a912      	add	r1, sp, #72	; 0x48
 8003272:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003274:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003276:	f001 fbed 	bl	8004a54 <HAL_TIMEx_ConfigBreakDeadTime>
 800327a:	4605      	mov	r5, r0
 800327c:	b108      	cbz	r0, 8003282 <main+0x1a2>
 800327e:	b672      	cpsid	i
  while (1)
 8003280:	e7fe      	b.n	8003280 <main+0x1a0>
  HAL_TIM_MspPostInit(&htim1);
 8003282:	4620      	mov	r0, r4
 8003284:	f000 f93e 	bl	8003504 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003288:	4632      	mov	r2, r6
 800328a:	4629      	mov	r1, r5
 800328c:	a80b      	add	r0, sp, #44	; 0x2c
 800328e:	f002 f94d 	bl	800552c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003292:	221c      	movs	r2, #28
 8003294:	4629      	mov	r1, r5
 8003296:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003298:	e9cd 5507 	strd	r5, r5, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800329c:	f002 f946 	bl	800552c <memset>
  htim2.Instance = TIM2;
 80032a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032a4:	4c47      	ldr	r4, [pc, #284]	; (80033c4 <main+0x2e4>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032a6:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 71;
 80032a8:	e9c4 3800 	strd	r3, r8, [r4]
  htim2.Init.Period = 999;
 80032ac:	e9c4 5702 	strd	r5, r7, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032b0:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b2:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032b4:	f001 f9c8 	bl	8004648 <HAL_TIM_Base_Init>
 80032b8:	b108      	cbz	r0, 80032be <main+0x1de>
 80032ba:	b672      	cpsid	i
  while (1)
 80032bc:	e7fe      	b.n	80032bc <main+0x1dc>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032be:	4620      	mov	r0, r4
 80032c0:	a90b      	add	r1, sp, #44	; 0x2c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032c2:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032c6:	f001 faa8 	bl	800481a <HAL_TIM_ConfigClockSource>
 80032ca:	b108      	cbz	r0, 80032d0 <main+0x1f0>
 80032cc:	b672      	cpsid	i
  while (1)
 80032ce:	e7fe      	b.n	80032ce <main+0x1ee>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032d0:	4620      	mov	r0, r4
 80032d2:	f001 f9e5 	bl	80046a0 <HAL_TIM_PWM_Init>
 80032d6:	b108      	cbz	r0, 80032dc <main+0x1fc>
 80032d8:	b672      	cpsid	i
  while (1)
 80032da:	e7fe      	b.n	80032da <main+0x1fa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032dc:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032de:	4839      	ldr	r0, [pc, #228]	; (80033c4 <main+0x2e4>)
 80032e0:	a907      	add	r1, sp, #28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032e6:	f001 fb8b 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 80032ea:	4602      	mov	r2, r0
 80032ec:	b108      	cbz	r0, 80032f2 <main+0x212>
 80032ee:	b672      	cpsid	i
  while (1)
 80032f0:	e7fe      	b.n	80032f0 <main+0x210>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032f2:	2660      	movs	r6, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032f4:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.Pulse = 0;
 80032f6:	e9cd 6012 	strd	r6, r0, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032fa:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032fc:	a912      	add	r1, sp, #72	; 0x48
 80032fe:	4831      	ldr	r0, [pc, #196]	; (80033c4 <main+0x2e4>)
 8003300:	f001 fa26 	bl	8004750 <HAL_TIM_PWM_ConfigChannel>
 8003304:	4605      	mov	r5, r0
 8003306:	b108      	cbz	r0, 800330c <main+0x22c>
 8003308:	b672      	cpsid	i
  while (1)
 800330a:	e7fe      	b.n	800330a <main+0x22a>
  HAL_TIM_MspPostInit(&htim2);
 800330c:	482d      	ldr	r0, [pc, #180]	; (80033c4 <main+0x2e4>)
 800330e:	f000 f8f9 	bl	8003504 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003312:	2210      	movs	r2, #16
 8003314:	4629      	mov	r1, r5
 8003316:	a80b      	add	r0, sp, #44	; 0x2c
 8003318:	f002 f908 	bl	800552c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800331c:	221c      	movs	r2, #28
 800331e:	4629      	mov	r1, r5
 8003320:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003322:	e9cd 5507 	strd	r5, r5, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003326:	f002 f901 	bl	800552c <memset>
  htim3.Init.Prescaler = 71;
 800332a:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 800332c:	4c26      	ldr	r4, [pc, #152]	; (80033c8 <main+0x2e8>)
  htim3.Init.Prescaler = 71;
 800332e:	4a27      	ldr	r2, [pc, #156]	; (80033cc <main+0x2ec>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003330:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 71;
 8003332:	e9c4 2300 	strd	r2, r3, [r4]
  htim3.Init.Period = 999;
 8003336:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800333a:	60a5      	str	r5, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800333c:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003340:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003342:	f001 f981 	bl	8004648 <HAL_TIM_Base_Init>
 8003346:	b108      	cbz	r0, 800334c <main+0x26c>
 8003348:	b672      	cpsid	i
  while (1)
 800334a:	e7fe      	b.n	800334a <main+0x26a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800334c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003350:	4620      	mov	r0, r4
 8003352:	a90b      	add	r1, sp, #44	; 0x2c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003354:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003356:	f001 fa60 	bl	800481a <HAL_TIM_ConfigClockSource>
 800335a:	b108      	cbz	r0, 8003360 <main+0x280>
 800335c:	b672      	cpsid	i
  while (1)
 800335e:	e7fe      	b.n	800335e <main+0x27e>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003360:	4620      	mov	r0, r4
 8003362:	f001 f99d 	bl	80046a0 <HAL_TIM_PWM_Init>
 8003366:	b108      	cbz	r0, 800336c <main+0x28c>
 8003368:	b672      	cpsid	i
  while (1)
 800336a:	e7fe      	b.n	800336a <main+0x28a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800336c:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003370:	a907      	add	r1, sp, #28
 8003372:	4620      	mov	r0, r4
 8003374:	f001 fb44 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 8003378:	4602      	mov	r2, r0
 800337a:	b108      	cbz	r0, 8003380 <main+0x2a0>
 800337c:	b672      	cpsid	i
  while (1)
 800337e:	e7fe      	b.n	800337e <main+0x29e>
  sConfigOC.Pulse = 0;
 8003380:	e9cd 6012 	strd	r6, r0, [sp, #72]	; 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003384:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003386:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003388:	a912      	add	r1, sp, #72	; 0x48
 800338a:	4620      	mov	r0, r4
 800338c:	f001 f9e0 	bl	8004750 <HAL_TIM_PWM_ConfigChannel>
 8003390:	b108      	cbz	r0, 8003396 <main+0x2b6>
 8003392:	b672      	cpsid	i
  while (1)
 8003394:	e7fe      	b.n	8003394 <main+0x2b4>
  HAL_TIM_MspPostInit(&htim3);
 8003396:	4620      	mov	r0, r4
 8003398:	f000 f8b4 	bl	8003504 <HAL_TIM_MspPostInit>
  wrapper_cpp();
 800339c:	f000 f9b8 	bl	8003710 <wrapper_cpp>
  while (1)
 80033a0:	e7fe      	b.n	80033a0 <main+0x2c0>
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40011000 	.word	0x40011000
 80033ac:	40010c00 	.word	0x40010c00
 80033b0:	10210000 	.word	0x10210000
 80033b4:	20000100 	.word	0x20000100
 80033b8:	40006400 	.word	0x40006400
 80033bc:	20000128 	.word	0x20000128
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	20000170 	.word	0x20000170
 80033c8:	200001b8 	.word	0x200001b8
 80033cc:	40000400 	.word	0x40000400

080033d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80033d0:	4b0e      	ldr	r3, [pc, #56]	; (800340c <HAL_MspInit+0x3c>)
{
 80033d2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	619a      	str	r2, [r3, #24]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	f002 0201 	and.w	r2, r2, #1
 80033e2:	9200      	str	r2, [sp, #0]
 80033e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033ec:	61da      	str	r2, [r3, #28]
 80033ee:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033f0:	4a07      	ldr	r2, [pc, #28]	; (8003410 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033fa:	6853      	ldr	r3, [r2, #4]
 80033fc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003400:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003406:	b002      	add	sp, #8
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	40010000 	.word	0x40010000

08003414 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003414:	b510      	push	{r4, lr}
 8003416:	4604      	mov	r4, r0
 8003418:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341a:	2210      	movs	r2, #16
 800341c:	2100      	movs	r1, #0
 800341e:	a802      	add	r0, sp, #8
 8003420:	f002 f884 	bl	800552c <memset>
  if(hcan->Instance==CAN1)
 8003424:	6822      	ldr	r2, [r4, #0]
 8003426:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_CAN_MspInit+0x7c>)
 8003428:	429a      	cmp	r2, r3
 800342a:	d12e      	bne.n	800348a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800342c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8003430:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003432:	4818      	ldr	r0, [pc, #96]	; (8003494 <HAL_CAN_MspInit+0x80>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003434:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003438:	61da      	str	r2, [r3, #28]
 800343a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343c:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 800343e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003442:	9200      	str	r2, [sp, #0]
 8003444:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	f042 0208 	orr.w	r2, r2, #8
 800344c:	619a      	str	r2, [r3, #24]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800345c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345e:	f000 fcdb 	bl	8003e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003466:	2302      	movs	r3, #2
 8003468:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800346c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800346e:	4809      	ldr	r0, [pc, #36]	; (8003494 <HAL_CAN_MspInit+0x80>)
 8003470:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003472:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003474:	f000 fcd0 	bl	8003e18 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8003478:	4a07      	ldr	r2, [pc, #28]	; (8003498 <HAL_CAN_MspInit+0x84>)
 800347a:	6853      	ldr	r3, [r2, #4]
 800347c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003480:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003488:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800348a:	b006      	add	sp, #24
 800348c:	bd10      	pop	{r4, pc}
 800348e:	bf00      	nop
 8003490:	40006400 	.word	0x40006400
 8003494:	40010c00 	.word	0x40010c00
 8003498:	40010000 	.word	0x40010000

0800349c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 800349c:	6803      	ldr	r3, [r0, #0]
 800349e:	4a16      	ldr	r2, [pc, #88]	; (80034f8 <HAL_TIM_Base_MspInit+0x5c>)
{
 80034a0:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10b      	bne.n	80034be <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <HAL_TIM_Base_MspInit+0x60>)
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ae:	619a      	str	r2, [r3, #24]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80034ba:	b004      	add	sp, #16
 80034bc:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c2:	d10b      	bne.n	80034dc <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	61da      	str	r2, [r3, #28]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	9302      	str	r3, [sp, #8]
 80034d8:	9b02      	ldr	r3, [sp, #8]
 80034da:	e7ee      	b.n	80034ba <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 80034dc:	4a08      	ldr	r2, [pc, #32]	; (8003500 <HAL_TIM_Base_MspInit+0x64>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d1eb      	bne.n	80034ba <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_TIM_Base_MspInit+0x60>)
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	f042 0202 	orr.w	r2, r2, #2
 80034ea:	61da      	str	r2, [r3, #28]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	9303      	str	r3, [sp, #12]
 80034f4:	9b03      	ldr	r3, [sp, #12]
}
 80034f6:	e7e0      	b.n	80034ba <HAL_TIM_Base_MspInit+0x1e>
 80034f8:	40012c00 	.word	0x40012c00
 80034fc:	40021000 	.word	0x40021000
 8003500:	40000400 	.word	0x40000400

08003504 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003504:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003506:	2510      	movs	r5, #16
{
 8003508:	4604      	mov	r4, r0
 800350a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350c:	462a      	mov	r2, r5
 800350e:	2100      	movs	r1, #0
 8003510:	eb0d 0005 	add.w	r0, sp, r5
 8003514:	f002 f80a 	bl	800552c <memset>
  if(htim->Instance==TIM1)
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	4a27      	ldr	r2, [pc, #156]	; (80035b8 <HAL_TIM_MspPostInit+0xb4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d116      	bne.n	800354e <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003520:	4b26      	ldr	r3, [pc, #152]	; (80035bc <HAL_TIM_MspPostInit+0xb8>)
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	f042 0204 	orr.w	r2, r2, #4
 800352c:	619a      	str	r2, [r3, #24]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003538:	2302      	movs	r3, #2
 800353a:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003540:	eb0d 0105 	add.w	r1, sp, r5
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003544:	481e      	ldr	r0, [pc, #120]	; (80035c0 <HAL_TIM_MspPostInit+0xbc>)
 8003546:	f000 fc67 	bl	8003e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800354a:	b009      	add	sp, #36	; 0x24
 800354c:	bd30      	pop	{r4, r5, pc}
  else if(htim->Instance==TIM2)
 800354e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003552:	d111      	bne.n	8003578 <HAL_TIM_MspPostInit+0x74>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003554:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003558:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355a:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355c:	f042 0204 	orr.w	r2, r2, #4
 8003560:	619a      	str	r2, [r3, #24]
 8003562:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003564:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	9302      	str	r3, [sp, #8]
 800356c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356e:	2302      	movs	r3, #2
 8003570:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003574:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003576:	e7e5      	b.n	8003544 <HAL_TIM_MspPostInit+0x40>
  else if(htim->Instance==TIM3)
 8003578:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <HAL_TIM_MspPostInit+0xc0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d1e5      	bne.n	800354a <HAL_TIM_MspPostInit+0x46>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <HAL_TIM_MspPostInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003580:	4811      	ldr	r0, [pc, #68]	; (80035c8 <HAL_TIM_MspPostInit+0xc4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003582:	6999      	ldr	r1, [r3, #24]
 8003584:	f041 0108 	orr.w	r1, r1, #8
 8003588:	6199      	str	r1, [r3, #24]
 800358a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800358c:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	9303      	str	r3, [sp, #12]
 8003594:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003596:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003598:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359e:	f000 fc3b 	bl	8003e18 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80035a2:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <HAL_TIM_MspPostInit+0xc8>)
 80035a4:	6853      	ldr	r3, [r2, #4]
 80035a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80035aa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035b2:	6053      	str	r3, [r2, #4]
}
 80035b4:	e7c9      	b.n	800354a <HAL_TIM_MspPostInit+0x46>
 80035b6:	bf00      	nop
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40010800 	.word	0x40010800
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40010c00 	.word	0x40010c00
 80035cc:	40010000 	.word	0x40010000

080035d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035d0:	e7fe      	b.n	80035d0 <NMI_Handler>

080035d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035d2:	e7fe      	b.n	80035d2 <HardFault_Handler>

080035d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035d4:	e7fe      	b.n	80035d4 <MemManage_Handler>

080035d6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035d6:	e7fe      	b.n	80035d6 <BusFault_Handler>

080035d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035d8:	e7fe      	b.n	80035d8 <UsageFault_Handler>

080035da <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035da:	4770      	bx	lr

080035dc <DebugMon_Handler>:
 80035dc:	4770      	bx	lr

080035de <PendSV_Handler>:
 80035de:	4770      	bx	lr

080035e0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035e0:	f000 bb26 	b.w	8003c30 <HAL_IncTick>

080035e4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMS_Pin);
 80035e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80035e8:	f000 bcf8 	b.w	8003fdc <HAL_GPIO_EXTI_IRQHandler>

080035ec <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80035ec:	2001      	movs	r0, #1
 80035ee:	4770      	bx	lr

080035f0 <_kill>:

int _kill(int pid, int sig)
{
 80035f0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80035f2:	f001 ff53 	bl	800549c <__errno>
 80035f6:	2316      	movs	r3, #22
 80035f8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80035fa:	f04f 30ff 	mov.w	r0, #4294967295
 80035fe:	bd08      	pop	{r3, pc}

08003600 <_exit>:

void _exit (int status)
{
 8003600:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003602:	f001 ff4b 	bl	800549c <__errno>
 8003606:	2316      	movs	r3, #22
 8003608:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800360a:	e7fe      	b.n	800360a <_exit+0xa>

0800360c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800360c:	4a0b      	ldr	r2, [pc, #44]	; (800363c <_sbrk+0x30>)
{
 800360e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8003610:	6811      	ldr	r1, [r2, #0]
{
 8003612:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003614:	b909      	cbnz	r1, 800361a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8003616:	490a      	ldr	r1, [pc, #40]	; (8003640 <_sbrk+0x34>)
 8003618:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800361a:	6810      	ldr	r0, [r2, #0]
 800361c:	4909      	ldr	r1, [pc, #36]	; (8003644 <_sbrk+0x38>)
 800361e:	4c0a      	ldr	r4, [pc, #40]	; (8003648 <_sbrk+0x3c>)
 8003620:	4403      	add	r3, r0
 8003622:	1b09      	subs	r1, r1, r4
 8003624:	428b      	cmp	r3, r1
 8003626:	d906      	bls.n	8003636 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8003628:	f001 ff38 	bl	800549c <__errno>
 800362c:	230c      	movs	r3, #12
 800362e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003630:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003634:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003636:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8003638:	e7fc      	b.n	8003634 <_sbrk+0x28>
 800363a:	bf00      	nop
 800363c:	20000200 	.word	0x20000200
 8003640:	20000230 	.word	0x20000230
 8003644:	20002800 	.word	0x20002800
 8003648:	00000400 	.word	0x00000400

0800364c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800364c:	4770      	bx	lr

0800364e <_ZN8servo_md10ParametersC1Ev>:

		public:
			//コンストラクタ(引数やオーバーロードは自由に決めてよい)
			explicit Parameters(){}
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
	...

08003664 <_ZN8servo_md15MotorControllerC1EP17TIM_HandleTypeDefRNS_10ParametersEmhttt>:
			explicit MotorController(
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
			): pwm_tim(pwm_tim), pwm_channel(pwm_channel), params(params){
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800367e:	711a      	strb	r2, [r3, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	821a      	strh	r2, [r3, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	825a      	strh	r2, [r3, #18]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	751a      	strb	r2, [r3, #20]
				const uint16_t count_up_period = 1000000/(source_clock/(pwm_tim->Instance->PSC + 1));
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	3301      	adds	r3, #1
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ae:	4a16      	ldr	r2, [pc, #88]	; (8003708 <_ZN8servo_md15MotorControllerC1EP17TIM_HandleTypeDefRNS_10ParametersEmhttt+0xa4>)
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	82fb      	strh	r3, [r7, #22]
				pwm_count_max = pwm_pulse_max/count_up_period;
 80036b6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80036b8:	8afb      	ldrh	r3, [r7, #22]
 80036ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	825a      	strh	r2, [r3, #18]
				pwm_count_min = pwm_pulse_min/count_up_period;
 80036c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036c6:	8afb      	ldrh	r3, [r7, #22]
 80036c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	821a      	strh	r2, [r3, #16]
				pwm_tim->Instance->ARR = pwm_cycle/count_up_period;
 80036d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036d4:	8afb      	ldrh	r3, [r7, #22]
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	62da      	str	r2, [r3, #44]	; 0x2c
				HAL_TIM_PWM_Start(pwm_tim, pwm_channel);
 80036e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036e6:	4619      	mov	r1, r3
 80036e8:	68b8      	ldr	r0, [r7, #8]
 80036ea:	f001 f987 	bl	80049fc <HAL_TIM_PWM_Start>
				pInstances.push_back(this);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	f107 0310 	add.w	r3, r7, #16
 80036f6:	4619      	mov	r1, r3
 80036f8:	4804      	ldr	r0, [pc, #16]	; (800370c <_ZN8servo_md15MotorControllerC1EP17TIM_HandleTypeDefRNS_10ParametersEmhttt+0xa8>)
 80036fa:	f000 f8e7 	bl	80038cc <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE9push_backEOS3_>
			}
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	000f4240 	.word	0x000f4240
 800370c:	200000d8 	.word	0x200000d8

08003710 <wrapper_cpp>:
static inline unsigned long get_general_tim_clock();
static inline unsigned long get_advanced_tim_clock();
static void common_cmd_callback(uint8_t, Parameters&);
static void common_target_callback(float, Parameters&);

void wrapper_cpp(void){
 8003710:	b5b0      	push	{r4, r5, r7, lr}
 8003712:	b09e      	sub	sp, #120	; 0x78
 8003714:	af04      	add	r7, sp, #16
	constexpr uint16_t pwm_pulse_min = 500; //microsec
 8003716:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800371a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	constexpr uint16_t pwm_pulse_max = 2400; //microsec
 800371e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8003722:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	constexpr uint16_t pwm_cycle = 20000; //microsec
 8003726:	f644 6320 	movw	r3, #20000	; 0x4e20
 800372a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

//	CanManager can_mgr(&hcan);
	Parameters parameters[MOTOR_NUM];
 800372e:	f107 0308 	add.w	r3, r7, #8
 8003732:	2401      	movs	r4, #1
 8003734:	461d      	mov	r5, r3
 8003736:	2c00      	cmp	r4, #0
 8003738:	db05      	blt.n	8003746 <wrapper_cpp+0x36>
 800373a:	4628      	mov	r0, r5
 800373c:	f7ff ff87 	bl	800364e <_ZN8servo_md10ParametersC1Ev>
 8003740:	350c      	adds	r5, #12
 8003742:	3c01      	subs	r4, #1
 8003744:	e7f7      	b.n	8003736 <wrapper_cpp+0x26>
	MotorController(&htim1, parameters[A], get_general_tim_clock(), TIM_CHANNEL_1, pwm_cycle, pwm_pulse_min, pwm_pulse_max);
 8003746:	f000 f883 	bl	8003850 <_ZL21get_general_tim_clockv>
 800374a:	4603      	mov	r3, r0
 800374c:	f107 0208 	add.w	r2, r7, #8
 8003750:	f107 0020 	add.w	r0, r7, #32
 8003754:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8003758:	9103      	str	r1, [sp, #12]
 800375a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800375e:	9102      	str	r1, [sp, #8]
 8003760:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003764:	9101      	str	r1, [sp, #4]
 8003766:	2100      	movs	r1, #0
 8003768:	9100      	str	r1, [sp, #0]
 800376a:	4935      	ldr	r1, [pc, #212]	; (8003840 <wrapper_cpp+0x130>)
 800376c:	f7ff ff7a 	bl	8003664 <_ZN8servo_md15MotorControllerC1EP17TIM_HandleTypeDefRNS_10ParametersEmhttt>
	MotorController(&htim2, parameters[C], get_general_tim_clock());
 8003770:	f000 f86e 	bl	8003850 <_ZL21get_general_tim_clockv>
 8003774:	4601      	mov	r1, r0
 8003776:	f107 0308 	add.w	r3, r7, #8
 800377a:	f103 020c 	add.w	r2, r3, #12
 800377e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003782:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8003786:	9303      	str	r3, [sp, #12]
 8003788:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800378c:	9302      	str	r3, [sp, #8]
 800378e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	2300      	movs	r3, #0
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	460b      	mov	r3, r1
 800379a:	492a      	ldr	r1, [pc, #168]	; (8003844 <wrapper_cpp+0x134>)
 800379c:	f7ff ff62 	bl	8003664 <_ZN8servo_md15MotorControllerC1EP17TIM_HandleTypeDefRNS_10ParametersEmhttt>
#endif
	};
*/
	//パラメーター設定
	//ver1.0ではフラッシュから読み出す
	constexpr uint16_t bida = 0x400;
 80037a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037a4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
//	constexpr uint16_t two_bit_ignore_mask = ~0b11;
	parameters[A].set_BID(bida);
 80037a8:	f107 0308 	add.w	r3, r7, #8
 80037ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff f97f 	bl	8002ab4 <_ZN8servo_md10Parameters7set_BIDEm>
	parameters[C].set_BID(bida + 4);
 80037b6:	f107 0308 	add.w	r3, r7, #8
 80037ba:	330c      	adds	r3, #12
 80037bc:	f240 4104 	movw	r1, #1028	; 0x404
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff f977 	bl	8002ab4 <_ZN8servo_md10Parameters7set_BIDEm>
#if !defined EMSBoard_1_0
	parameters[E].set_BID(bida + 8);
#endif

	parameters[A].set_motor_param(
			MotorParam{
 80037c6:	2304      	movs	r3, #4
 80037c8:	653b      	str	r3, [r7, #80]	; 0x50
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	657b      	str	r3, [r7, #84]	; 0x54
	parameters[A].set_motor_param(
 80037d0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037d4:	f107 0308 	add.w	r3, r7, #8
 80037d8:	4611      	mov	r1, r2
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff f959 	bl	8002a92 <_ZN8servo_md10Parameters15set_motor_paramERKNS_10MotorParamE>
				.mode = MD_MODE::ENABLE,
				.target = 0
			}
	);
	parameters[C].set_motor_param(
				MotorParam{
 80037e0:	2304      	movs	r3, #4
 80037e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	65fb      	str	r3, [r7, #92]	; 0x5c
	parameters[C].set_motor_param(
 80037ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80037ee:	f107 0308 	add.w	r3, r7, #8
 80037f2:	330c      	adds	r3, #12
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff f94b 	bl	8002a92 <_ZN8servo_md10Parameters15set_motor_paramERKNS_10MotorParamE>

	//CANスタート
	HAL_CAN_Start(&hcan);
*/

	MotorParam paramA = parameters[A].get_motor_params();
 80037fc:	463b      	mov	r3, r7
 80037fe:	f107 0208 	add.w	r2, r7, #8
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff f933 	bl	8002a70 <_ZN8servo_md10Parameters16get_motor_paramsEv>
	paramA.target = 0.5f * std::numbers::pi;
 800380a:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <wrapper_cpp+0x138>)
 800380c:	607b      	str	r3, [r7, #4]
	parameters[A].set_motor_param(paramA);
 800380e:	463a      	mov	r2, r7
 8003810:	f107 0308 	add.w	r3, r7, #8
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff f93b 	bl	8002a92 <_ZN8servo_md10Parameters15set_motor_paramERKNS_10MotorParamE>
	while(true){
		if(error_request_flag){
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <wrapper_cpp+0x13c>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <wrapper_cpp+0x126>
			MotorController::trigger_emergency_callback();
 8003824:	f7fe ff0c 	bl	8002640 <_ZN8servo_md15MotorController26trigger_emergency_callbackEv>
			Parameters::trigger_emergency_callback();
 8003828:	f7ff f952 	bl	8002ad0 <_ZN8servo_md10Parameters26trigger_emergency_callbackEv>
			led_mgr::disable_all_motor();
 800382c:	f7ff fc1c 	bl	8003068 <_ZN8servo_md7led_mgr17disable_all_motorEv>
			error_request_flag = false;
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <wrapper_cpp+0x13c>)
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
		}

//		CanController<uint8_t>::trigger_update();
//		CanController<float>::trigger_update();
		MotorController::trigger_update();
 8003836:	f7fe ff33 	bl	80026a0 <_ZN8servo_md15MotorController14trigger_updateEv>
		led_mgr::led_process();
 800383a:	f7ff faff 	bl	8002e3c <_ZN8servo_md7led_mgr11led_processEv>
		if(error_request_flag){
 800383e:	e7ed      	b.n	800381c <wrapper_cpp+0x10c>
 8003840:	20000128 	.word	0x20000128
 8003844:	20000170 	.word	0x20000170
 8003848:	3fc90fdb 	.word	0x3fc90fdb
 800384c:	20000204 	.word	0x20000204

08003850 <_ZL21get_general_tim_clockv>:
		current_param.target = value;
		param.set_motor_param(current_param);
	}
}

unsigned long get_general_tim_clock(){
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
	unsigned long result;
	result = HAL_RCC_GetPCLK1Freq();
 8003856:	f000 fe3f 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 800385a:	4603      	mov	r3, r0
 800385c:	607b      	str	r3, [r7, #4]
	if(((RCC->CFGR & RCC_CFGR_PPRE1)>>8) >= 0b100) result *= 2; //APB1プリスケーラーが/1以外の時はタイマクロックはPCLK1の2倍
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <_ZL21get_general_tim_clockv+0x34>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <_ZL21get_general_tim_clockv+0x2a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	607b      	str	r3, [r7, #4]
	return result;
 800387a:	687b      	ldr	r3, [r7, #4]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000

08003888 <HAL_GPIO_EXTI_Callback>:
	result = HAL_RCC_GetPCLK2Freq();
	if(((RCC->CFGR & RCC_CFGR_PPRE2)>>11) >= 0b100) result *= 2; //APB2プリスケーラーが/1以外の時はタイマクロックはPCLK2の2倍
	return result;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EMS_Pin){
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003898:	d10f      	bne.n	80038ba <HAL_GPIO_EXTI_Callback+0x32>
			if(IS_EMERGENCY()) error_request_flag = true;
 800389a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800389e:	4809      	ldr	r0, [pc, #36]	; (80038c4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80038a0:	f000 fb90 	bl	8003fc4 <HAL_GPIO_ReadPin>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_GPIO_EXTI_Callback+0x32>
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <HAL_GPIO_EXTI_Callback+0x40>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
	}
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40010c00 	.word	0x40010c00
 80038c8:	20000204 	.word	0x20000204

080038cc <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE9push_backEOS3_>:
      push_back(const value_type& __x)
      { this->_M_insert(end(), __x); }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), std::move(__x)); }
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fe ff4d 	bl	8002776 <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE3endEv>
 80038dc:	4604      	mov	r4, r0
 80038de:	6838      	ldr	r0, [r7, #0]
 80038e0:	f000 f80a 	bl	80038f8 <_ZSt4moveIRPN8servo_md15MotorControllerEEONSt16remove_referenceIT_E4typeEOS5_>
 80038e4:	4603      	mov	r3, r0
 80038e6:	461a      	mov	r2, r3
 80038e8:	4621      	mov	r1, r4
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f80e 	bl	800390c <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE9_M_insertIJS3_EEEvSt14_List_iteratorIS3_EDpOT_>
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd90      	pop	{r4, r7, pc}

080038f8 <_ZSt4moveIRPN8servo_md15MotorControllerEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE9_M_insertIJS3_EEEvSt14_List_iteratorIS3_EDpOT_>:
	this->_M_inc_size(1);
      }
#else
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f816 	bl	800394a <_ZSt7forwardIPN8servo_md15MotorControllerEEOT_RNSt16remove_referenceIS3_E4typeE>
 800391e:	4603      	mov	r3, r0
 8003920:	4619      	mov	r1, r3
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f81b 	bl	800395e <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE14_M_create_nodeIJS3_EEEPSt10_List_nodeIS3_EDpOT_>
 8003928:	4603      	mov	r3, r0
 800392a:	617b      	str	r3, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f001 fc9e 	bl	8005274 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f843 	bl	80039c8 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE11_M_inc_sizeEj>
       }
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <_ZSt7forwardIPN8servo_md15MotorControllerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE14_M_create_nodeIJS3_EEEPSt10_List_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800395e:	b590      	push	{r4, r7, lr}
 8003960:	b087      	sub	sp, #28
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f83c 	bl	80039e8 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE11_M_get_nodeEv>
 8003970:	4603      	mov	r3, r0
 8003972:	617b      	str	r3, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe ff94 	bl	80028a4 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE21_M_get_Node_allocatorEv>
 800397c:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800397e:	f107 0308 	add.w	r3, r7, #8
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	6939      	ldr	r1, [r7, #16]
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f83c 	bl	8003a04 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN8servo_md15MotorControllerEEEEC1ERS5_PS4_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 800398c:	6978      	ldr	r0, [r7, #20]
 800398e:	f7fe ff71 	bl	8002874 <_ZNSt10_List_nodeIPN8servo_md15MotorControllerEE9_M_valptrEv>
 8003992:	4604      	mov	r4, r0
 8003994:	6838      	ldr	r0, [r7, #0]
 8003996:	f7ff ffd8 	bl	800394a <_ZSt7forwardIPN8servo_md15MotorControllerEEOT_RNSt16remove_referenceIS3_E4typeE>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	4621      	mov	r1, r4
 80039a0:	6938      	ldr	r0, [r7, #16]
 80039a2:	f000 f86d 	bl	8003a80 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE9constructIS3_JS3_EEEvRS5_PT_DpOT0_>
	  __guard = nullptr;
 80039a6:	f107 0308 	add.w	r3, r7, #8
 80039aa:	2100      	movs	r1, #0
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f879 	bl	8003aa4 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN8servo_md15MotorControllerEEEEaSEDn>
	  return __p;
 80039b2:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 80039b4:	f107 0308 	add.w	r3, r7, #8
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 f837 	bl	8003a2c <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN8servo_md15MotorControllerEEEED1Ev>
	  return __p;
 80039be:	4623      	mov	r3, r4
	}
 80039c0:	4618      	mov	r0, r3
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd90      	pop	{r4, r7, pc}

080039c8 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	441a      	add	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	609a      	str	r2, [r3, #8]
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f863 	bl	8003ac0 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE8allocateERS5_j>
 80039fa:	4603      	mov	r3, r0
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN8servo_md15MotorControllerEEEEC1ERS5_PS4_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8003a10:	68b8      	ldr	r0, [r7, #8]
 8003a12:	f000 f878 	bl	8003b06 <_ZSt11__addressofISaISt10_List_nodeIPN8servo_md15MotorControllerEEEEPT_RS6_>
 8003a16:	4602      	mov	r2, r0
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	605a      	str	r2, [r3, #4]
      { }
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN8servo_md15MotorControllerEEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d007      	beq.n	8003a4c <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN8servo_md15MotorControllerEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	4619      	mov	r1, r3
 8003a48:	f7fe ff66 	bl	8002918 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE10deallocateERS5_PS4_j>
      }
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <_ZSt12construct_atIPN8servo_md15MotorControllerEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8003a56:	b590      	push	{r4, r7, lr}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003a60:	6838      	ldr	r0, [r7, #0]
 8003a62:	f7ff ff72 	bl	800394a <_ZSt7forwardIPN8servo_md15MotorControllerEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003a66:	4603      	mov	r3, r0
 8003a68:	681c      	ldr	r4, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	2004      	movs	r0, #4
 8003a70:	f7fe f8bd 	bl	8001bee <_ZnwjPv>
 8003a74:	4603      	mov	r3, r0
 8003a76:	601c      	str	r4, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd90      	pop	{r4, r7, pc}

08003a80 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE9constructIS3_JS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ff5c 	bl	800394a <_ZSt7forwardIPN8servo_md15MotorControllerEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003a92:	4603      	mov	r3, r0
 8003a94:	4619      	mov	r1, r3
 8003a96:	68b8      	ldr	r0, [r7, #8]
 8003a98:	f7ff ffdd 	bl	8003a56 <_ZSt12construct_atIPN8servo_md15MotorControllerEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN8servo_md15MotorControllerEEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	605a      	str	r2, [r3, #4]
	return *this;
 8003ab4:	687b      	ldr	r3, [r7, #4]
      }
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8003ad2:	f7fe f885 	bl	8001be0 <_ZSt21is_constant_evaluatedv>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d009      	beq.n	8003af0 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE8allocateERS5_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 fb19 	bl	800511e <_Znwj>
 8003aec:	4603      	mov	r3, r0
 8003aee:	e006      	b.n	8003afe <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE8allocateERS5_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8003af0:	2200      	movs	r2, #0
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f810 	bl	8003b1a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEE8allocateEjPKv>
 8003afa:	4603      	mov	r3, r0
 8003afc:	bf00      	nop
      { return __a.allocate(__n); }
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <_ZSt11__addressofISaISt10_List_nodeIPN8servo_md15MotorControllerEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f81a 	bl	8003b60 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEE11_M_max_sizeEv>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4293      	cmp	r3, r2
 8003b32:	bf8c      	ite	hi
 8003b34:	2301      	movhi	r3, #1
 8003b36:	2300      	movls	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003b3e:	f001 fba0 	bl	8005282 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f001 fae6 	bl	800511e <_Znwj>
 8003b52:	4603      	mov	r3, r0
 8003b54:	bf00      	nop
      }
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003b68:	4b02      	ldr	r3, [pc, #8]	; (8003b74 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEE11_M_max_sizeEv+0x14>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	0aaaaaaa 	.word	0x0aaaaaaa

08003b78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b78:	480c      	ldr	r0, [pc, #48]	; (8003bac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b7a:	490d      	ldr	r1, [pc, #52]	; (8003bb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b7c:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b80:	e002      	b.n	8003b88 <LoopCopyDataInit>

08003b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b86:	3304      	adds	r3, #4

08003b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b8c:	d3f9      	bcc.n	8003b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b90:	4c0a      	ldr	r4, [pc, #40]	; (8003bbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b94:	e001      	b.n	8003b9a <LoopFillZerobss>

08003b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b98:	3204      	adds	r2, #4

08003b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b9c:	d3fb      	bcc.n	8003b96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b9e:	f7ff fd55 	bl	800364c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ba2:	f001 fc81 	bl	80054a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ba6:	f7ff fa9b 	bl	80030e0 <main>
  bx lr
 8003baa:	4770      	bx	lr
  ldr r0, =_sdata
 8003bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bb0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003bb4:	08005ca0 	.word	0x08005ca0
  ldr r2, =_sbss
 8003bb8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003bbc:	2000022c 	.word	0x2000022c

08003bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bc0:	e7fe      	b.n	8003bc0 <ADC1_2_IRQHandler>
	...

08003bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bc4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <HAL_InitTick+0x3c>)
{
 8003bc8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bca:	7818      	ldrb	r0, [r3, #0]
 8003bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bd0:	fbb3 f3f0 	udiv	r3, r3, r0
 8003bd4:	4a0b      	ldr	r2, [pc, #44]	; (8003c04 <HAL_InitTick+0x40>)
 8003bd6:	6810      	ldr	r0, [r2, #0]
 8003bd8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bdc:	f000 f908 	bl	8003df0 <HAL_SYSTICK_Config>
 8003be0:	4604      	mov	r4, r0
 8003be2:	b958      	cbnz	r0, 8003bfc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003be4:	2d0f      	cmp	r5, #15
 8003be6:	d809      	bhi.n	8003bfc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003be8:	4602      	mov	r2, r0
 8003bea:	4629      	mov	r1, r5
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	f000 f8be 	bl	8003d70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <HAL_InitTick+0x44>)
 8003bf8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	e7fc      	b.n	8003bfa <HAL_InitTick+0x36>
 8003c00:	20000008 	.word	0x20000008
 8003c04:	20000004 	.word	0x20000004
 8003c08:	2000000c 	.word	0x2000000c

08003c0c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c0c:	4a07      	ldr	r2, [pc, #28]	; (8003c2c <HAL_Init+0x20>)
{
 8003c0e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c10:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c12:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c14:	f043 0310 	orr.w	r3, r3, #16
 8003c18:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c1a:	f000 f897 	bl	8003d4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c1e:	200f      	movs	r0, #15
 8003c20:	f7ff ffd0 	bl	8003bc4 <HAL_InitTick>
  HAL_MspInit();
 8003c24:	f7ff fbd4 	bl	80033d0 <HAL_MspInit>
}
 8003c28:	2000      	movs	r0, #0
 8003c2a:	bd08      	pop	{r3, pc}
 8003c2c:	40022000 	.word	0x40022000

08003c30 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003c30:	4a03      	ldr	r2, [pc, #12]	; (8003c40 <HAL_IncTick+0x10>)
 8003c32:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <HAL_IncTick+0x14>)
 8003c34:	6811      	ldr	r1, [r2, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	440b      	add	r3, r1
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000208 	.word	0x20000208
 8003c44:	20000008 	.word	0x20000008

08003c48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003c48:	4b01      	ldr	r3, [pc, #4]	; (8003c50 <HAL_GetTick+0x8>)
 8003c4a:	6818      	ldr	r0, [r3, #0]
}
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000208 	.word	0x20000208

08003c54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c54:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c56:	4604      	mov	r4, r0
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d06e      	beq.n	8003d3a <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c5c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003c60:	b90b      	cbnz	r3, 8003c66 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c62:	f7ff fbd7 	bl	8003414 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c66:	6822      	ldr	r2, [r4, #0]
 8003c68:	6813      	ldr	r3, [r2, #0]
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c70:	f7ff ffea 	bl	8003c48 <HAL_GetTick>
 8003c74:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	07d1      	lsls	r1, r2, #31
 8003c7c:	d551      	bpl.n	8003d22 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	f022 0202 	bic.w	r2, r2, #2
 8003c84:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c86:	f7ff ffdf 	bl	8003c48 <HAL_GetTick>
 8003c8a:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	0792      	lsls	r2, r2, #30
 8003c92:	d454      	bmi.n	8003d3e <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c94:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c96:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c98:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	bf0c      	ite	eq
 8003c9e:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ca2:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8003ca6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8003ca8:	7e62      	ldrb	r2, [r4, #25]
 8003caa:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	bf0c      	ite	eq
 8003cb0:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cb4:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8003cb8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003cba:	7ea2      	ldrb	r2, [r4, #26]
 8003cbc:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	bf0c      	ite	eq
 8003cc2:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cc6:	f022 0220 	bicne.w	r2, r2, #32
 8003cca:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ccc:	7ee2      	ldrb	r2, [r4, #27]
 8003cce:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	bf0c      	ite	eq
 8003cd4:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cd8:	f042 0210 	orrne.w	r2, r2, #16
 8003cdc:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003cde:	7f22      	ldrb	r2, [r4, #28]
 8003ce0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	bf0c      	ite	eq
 8003ce6:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cea:	f022 0208 	bicne.w	r2, r2, #8
 8003cee:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003cf0:	7f62      	ldrb	r2, [r4, #29]
 8003cf2:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	bf0c      	ite	eq
 8003cf8:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cfc:	f022 0204 	bicne.w	r2, r2, #4
 8003d00:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d02:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	6921      	ldr	r1, [r4, #16]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	6961      	ldr	r1, [r4, #20]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	6861      	ldr	r1, [r4, #4]
 8003d12:	3901      	subs	r1, #1
 8003d14:	430a      	orrs	r2, r1
 8003d16:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d18:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d1a:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8003d1c:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d22:	f7ff ff91 	bl	8003c48 <HAL_GetTick>
 8003d26:	1b40      	subs	r0, r0, r5
 8003d28:	280a      	cmp	r0, #10
 8003d2a:	d9a4      	bls.n	8003c76 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d32:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d34:	2305      	movs	r3, #5
 8003d36:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	e7f0      	b.n	8003d20 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d3e:	f7ff ff83 	bl	8003c48 <HAL_GetTick>
 8003d42:	1b40      	subs	r0, r0, r5
 8003d44:	280a      	cmp	r0, #10
 8003d46:	d9a1      	bls.n	8003c8c <HAL_CAN_Init+0x38>
 8003d48:	e7f0      	b.n	8003d2c <HAL_CAN_Init+0xd8>
	...

08003d4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d4c:	4907      	ldr	r1, [pc, #28]	; (8003d6c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d4e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d50:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d5a:	0412      	lsls	r2, r2, #16
 8003d5c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003d68:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003d6a:	4770      	bx	lr
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d70:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d72:	b530      	push	{r4, r5, lr}
 8003d74:	68dc      	ldr	r4, [r3, #12]
 8003d76:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d7a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	bf28      	it	cs
 8003d84:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d86:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d88:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d8c:	bf98      	it	ls
 8003d8e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d90:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d94:	bf88      	it	hi
 8003d96:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d98:	ea21 0303 	bic.w	r3, r1, r3
 8003d9c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d9e:	fa05 f404 	lsl.w	r4, r5, r4
 8003da2:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8003da6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dac:	bfac      	ite	ge
 8003dae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db2:	4a07      	ldrlt	r2, [pc, #28]	; (8003dd0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	bfab      	itete	ge
 8003dbc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003dca:	bd30      	pop	{r4, r5, pc}
 8003dcc:	e000ed00 	.word	0xe000ed00
 8003dd0:	e000ed14 	.word	0xe000ed14

08003dd4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	db08      	blt.n	8003dea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dd8:	2301      	movs	r3, #1
 8003dda:	0942      	lsrs	r2, r0, #5
 8003ddc:	f000 001f 	and.w	r0, r0, #31
 8003de0:	fa03 f000 	lsl.w	r0, r3, r0
 8003de4:	4b01      	ldr	r3, [pc, #4]	; (8003dec <HAL_NVIC_EnableIRQ+0x18>)
 8003de6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003dea:	4770      	bx	lr
 8003dec:	e000e100 	.word	0xe000e100

08003df0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df0:	3801      	subs	r0, #1
 8003df2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003df6:	d20b      	bcs.n	8003e10 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003df8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfc:	21f0      	movs	r1, #240	; 0xf0
 8003dfe:	4a05      	ldr	r2, [pc, #20]	; (8003e14 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e00:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e02:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e06:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e08:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e0a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e0c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e0e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003e10:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003e12:	4770      	bx	lr
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e1c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003e1e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e20:	4f61      	ldr	r7, [pc, #388]	; (8003fa8 <HAL_GPIO_Init+0x190>)
 8003e22:	4b62      	ldr	r3, [pc, #392]	; (8003fac <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 8003e24:	f8df c188 	ldr.w	ip, [pc, #392]	; 8003fb0 <HAL_GPIO_Init+0x198>
 8003e28:	f8df e188 	ldr.w	lr, [pc, #392]	; 8003fb4 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2c:	680d      	ldr	r5, [r1, #0]
 8003e2e:	fa35 f406 	lsrs.w	r4, r5, r6
 8003e32:	d102      	bne.n	8003e3a <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8003e34:	b003      	add	sp, #12
 8003e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8003e3a:	f04f 0801 	mov.w	r8, #1
 8003e3e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e42:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8003e46:	ea38 0505 	bics.w	r5, r8, r5
 8003e4a:	d177      	bne.n	8003f3c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8003e4c:	684d      	ldr	r5, [r1, #4]
 8003e4e:	2d03      	cmp	r5, #3
 8003e50:	d807      	bhi.n	8003e62 <HAL_GPIO_Init+0x4a>
 8003e52:	3d01      	subs	r5, #1
 8003e54:	2d02      	cmp	r5, #2
 8003e56:	f200 8082 	bhi.w	8003f5e <HAL_GPIO_Init+0x146>
 8003e5a:	e8df f005 	tbb	[pc, r5]
 8003e5e:	9792      	.short	0x9792
 8003e60:	9d          	.byte	0x9d
 8003e61:	00          	.byte	0x00
 8003e62:	2d12      	cmp	r5, #18
 8003e64:	f000 8095 	beq.w	8003f92 <HAL_GPIO_Init+0x17a>
 8003e68:	d86a      	bhi.n	8003f40 <HAL_GPIO_Init+0x128>
 8003e6a:	2d11      	cmp	r5, #17
 8003e6c:	f000 808b 	beq.w	8003f86 <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e70:	2cff      	cmp	r4, #255	; 0xff
 8003e72:	bf98      	it	ls
 8003e74:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e76:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e7a:	bf88      	it	hi
 8003e7c:	f100 0a04 	addhi.w	sl, r0, #4
 8003e80:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e84:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e88:	bf88      	it	hi
 8003e8a:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e8c:	fa09 fb05 	lsl.w	fp, r9, r5
 8003e90:	ea28 080b 	bic.w	r8, r8, fp
 8003e94:	fa02 f505 	lsl.w	r5, r2, r5
 8003e98:	ea48 0505 	orr.w	r5, r8, r5
 8003e9c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ea0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003ea4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8003ea8:	d048      	beq.n	8003f3c <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003eaa:	69bd      	ldr	r5, [r7, #24]
 8003eac:	f026 0803 	bic.w	r8, r6, #3
 8003eb0:	f045 0501 	orr.w	r5, r5, #1
 8003eb4:	61bd      	str	r5, [r7, #24]
 8003eb6:	69bd      	ldr	r5, [r7, #24]
 8003eb8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003ebc:	f005 0501 	and.w	r5, r5, #1
 8003ec0:	9501      	str	r5, [sp, #4]
 8003ec2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ec6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003eca:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ecc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8003ed0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ed4:	fa09 f90b 	lsl.w	r9, r9, fp
 8003ed8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003edc:	4d36      	ldr	r5, [pc, #216]	; (8003fb8 <HAL_GPIO_Init+0x1a0>)
 8003ede:	42a8      	cmp	r0, r5
 8003ee0:	d05e      	beq.n	8003fa0 <HAL_GPIO_Init+0x188>
 8003ee2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ee6:	42a8      	cmp	r0, r5
 8003ee8:	d05c      	beq.n	8003fa4 <HAL_GPIO_Init+0x18c>
 8003eea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003eee:	42a8      	cmp	r0, r5
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2502      	moveq	r5, #2
 8003ef4:	2503      	movne	r5, #3
 8003ef6:	fa05 f50b 	lsl.w	r5, r5, fp
 8003efa:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8003efe:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8003f02:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f04:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003f08:	bf14      	ite	ne
 8003f0a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f0c:	43a5      	biceq	r5, r4
 8003f0e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8003f10:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f12:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003f16:	bf14      	ite	ne
 8003f18:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f1a:	43a5      	biceq	r5, r4
 8003f1c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f1e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f20:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f24:	bf14      	ite	ne
 8003f26:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f28:	43a5      	biceq	r5, r4
 8003f2a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f2c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f2e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f32:	bf14      	ite	ne
 8003f34:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f36:	ea25 0404 	biceq.w	r4, r5, r4
 8003f3a:	60dc      	str	r4, [r3, #12]
	position++;
 8003f3c:	3601      	adds	r6, #1
 8003f3e:	e775      	b.n	8003e2c <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8003f40:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8003fbc <HAL_GPIO_Init+0x1a4>
 8003f44:	454d      	cmp	r5, r9
 8003f46:	d00a      	beq.n	8003f5e <HAL_GPIO_Init+0x146>
 8003f48:	d815      	bhi.n	8003f76 <HAL_GPIO_Init+0x15e>
 8003f4a:	4575      	cmp	r5, lr
 8003f4c:	d007      	beq.n	8003f5e <HAL_GPIO_Init+0x146>
 8003f4e:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 8003f52:	454d      	cmp	r5, r9
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x146>
 8003f56:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8003f5a:	454d      	cmp	r5, r9
 8003f5c:	d188      	bne.n	8003e70 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f5e:	688a      	ldr	r2, [r1, #8]
 8003f60:	b1e2      	cbz	r2, 8003f9c <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f62:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8003f64:	bf08      	it	eq
 8003f66:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f6a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8003f6e:	bf18      	it	ne
 8003f70:	f8c0 8014 	strne.w	r8, [r0, #20]
 8003f74:	e77c      	b.n	8003e70 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8003f76:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003fc0 <HAL_GPIO_Init+0x1a8>
 8003f7a:	454d      	cmp	r5, r9
 8003f7c:	d0ef      	beq.n	8003f5e <HAL_GPIO_Init+0x146>
 8003f7e:	4565      	cmp	r5, ip
 8003f80:	e7ec      	b.n	8003f5c <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f82:	68ca      	ldr	r2, [r1, #12]
          break;
 8003f84:	e774      	b.n	8003e70 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f86:	68ca      	ldr	r2, [r1, #12]
 8003f88:	3204      	adds	r2, #4
          break;
 8003f8a:	e771      	b.n	8003e70 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f8c:	68ca      	ldr	r2, [r1, #12]
 8003f8e:	3208      	adds	r2, #8
          break;
 8003f90:	e76e      	b.n	8003e70 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f92:	68ca      	ldr	r2, [r1, #12]
 8003f94:	320c      	adds	r2, #12
          break;
 8003f96:	e76b      	b.n	8003e70 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	e769      	b.n	8003e70 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	e767      	b.n	8003e70 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fa0:	2500      	movs	r5, #0
 8003fa2:	e7a8      	b.n	8003ef6 <HAL_GPIO_Init+0xde>
 8003fa4:	2501      	movs	r5, #1
 8003fa6:	e7a6      	b.n	8003ef6 <HAL_GPIO_Init+0xde>
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40010400 	.word	0x40010400
 8003fb0:	10320000 	.word	0x10320000
 8003fb4:	10120000 	.word	0x10120000
 8003fb8:	40010800 	.word	0x40010800
 8003fbc:	10220000 	.word	0x10220000
 8003fc0:	10310000 	.word	0x10310000

08003fc4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fc4:	6883      	ldr	r3, [r0, #8]
 8003fc6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003fc8:	bf14      	ite	ne
 8003fca:	2001      	movne	r0, #1
 8003fcc:	2000      	moveq	r0, #0
 8003fce:	4770      	bx	lr

08003fd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fd0:	b10a      	cbz	r2, 8003fd6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fd2:	6101      	str	r1, [r0, #16]
  }
}
 8003fd4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fd6:	0409      	lsls	r1, r1, #16
 8003fd8:	e7fb      	b.n	8003fd2 <HAL_GPIO_WritePin+0x2>
	...

08003fdc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fdc:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8003fde:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fe0:	6951      	ldr	r1, [r2, #20]
 8003fe2:	4201      	tst	r1, r0
 8003fe4:	d002      	beq.n	8003fec <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fe6:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fe8:	f7ff fc4e 	bl	8003888 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fec:	bd08      	pop	{r3, pc}
 8003fee:	bf00      	nop
 8003ff0:	40010400 	.word	0x40010400

08003ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ff8:	4605      	mov	r5, r0
 8003ffa:	b338      	cbz	r0, 800404c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffc:	6803      	ldr	r3, [r0, #0]
 8003ffe:	07db      	lsls	r3, r3, #31
 8004000:	d410      	bmi.n	8004024 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004002:	682b      	ldr	r3, [r5, #0]
 8004004:	079f      	lsls	r7, r3, #30
 8004006:	d45e      	bmi.n	80040c6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	0719      	lsls	r1, r3, #28
 800400c:	f100 8095 	bmi.w	800413a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004010:	682b      	ldr	r3, [r5, #0]
 8004012:	075a      	lsls	r2, r3, #29
 8004014:	f100 80c1 	bmi.w	800419a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004018:	69e8      	ldr	r0, [r5, #28]
 800401a:	2800      	cmp	r0, #0
 800401c:	f040 812c 	bne.w	8004278 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8004020:	2000      	movs	r0, #0
 8004022:	e029      	b.n	8004078 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004024:	4c90      	ldr	r4, [pc, #576]	; (8004268 <HAL_RCC_OscConfig+0x274>)
 8004026:	6863      	ldr	r3, [r4, #4]
 8004028:	f003 030c 	and.w	r3, r3, #12
 800402c:	2b04      	cmp	r3, #4
 800402e:	d007      	beq.n	8004040 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004030:	6863      	ldr	r3, [r4, #4]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b08      	cmp	r3, #8
 8004038:	d10a      	bne.n	8004050 <HAL_RCC_OscConfig+0x5c>
 800403a:	6863      	ldr	r3, [r4, #4]
 800403c:	03de      	lsls	r6, r3, #15
 800403e:	d507      	bpl.n	8004050 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	039c      	lsls	r4, r3, #14
 8004044:	d5dd      	bpl.n	8004002 <HAL_RCC_OscConfig+0xe>
 8004046:	686b      	ldr	r3, [r5, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1da      	bne.n	8004002 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800404c:	2001      	movs	r0, #1
 800404e:	e013      	b.n	8004078 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004050:	686b      	ldr	r3, [r5, #4]
 8004052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004056:	d112      	bne.n	800407e <HAL_RCC_OscConfig+0x8a>
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004060:	f7ff fdf2 	bl	8003c48 <HAL_GetTick>
 8004064:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	0398      	lsls	r0, r3, #14
 800406a:	d4ca      	bmi.n	8004002 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800406c:	f7ff fdec 	bl	8003c48 <HAL_GetTick>
 8004070:	1b80      	subs	r0, r0, r6
 8004072:	2864      	cmp	r0, #100	; 0x64
 8004074:	d9f7      	bls.n	8004066 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8004076:	2003      	movs	r0, #3
}
 8004078:	b002      	add	sp, #8
 800407a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407e:	b99b      	cbnz	r3, 80040a8 <HAL_RCC_OscConfig+0xb4>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800408e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004090:	f7ff fdda 	bl	8003c48 <HAL_GetTick>
 8004094:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	0399      	lsls	r1, r3, #14
 800409a:	d5b2      	bpl.n	8004002 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7ff fdd4 	bl	8003c48 <HAL_GetTick>
 80040a0:	1b80      	subs	r0, r0, r6
 80040a2:	2864      	cmp	r0, #100	; 0x64
 80040a4:	d9f7      	bls.n	8004096 <HAL_RCC_OscConfig+0xa2>
 80040a6:	e7e6      	b.n	8004076 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	d103      	bne.n	80040b8 <HAL_RCC_OscConfig+0xc4>
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	e7cf      	b.n	8004058 <HAL_RCC_OscConfig+0x64>
 80040b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c4:	e7cb      	b.n	800405e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040c6:	4c68      	ldr	r4, [pc, #416]	; (8004268 <HAL_RCC_OscConfig+0x274>)
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	f013 0f0c 	tst.w	r3, #12
 80040ce:	d007      	beq.n	80040e0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040d0:	6863      	ldr	r3, [r4, #4]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d110      	bne.n	80040fc <HAL_RCC_OscConfig+0x108>
 80040da:	6863      	ldr	r3, [r4, #4]
 80040dc:	03da      	lsls	r2, r3, #15
 80040de:	d40d      	bmi.n	80040fc <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	079b      	lsls	r3, r3, #30
 80040e4:	d502      	bpl.n	80040ec <HAL_RCC_OscConfig+0xf8>
 80040e6:	692b      	ldr	r3, [r5, #16]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d1af      	bne.n	800404c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	696a      	ldr	r2, [r5, #20]
 80040f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80040f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	e785      	b.n	8004008 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040fc:	692a      	ldr	r2, [r5, #16]
 80040fe:	4b5b      	ldr	r3, [pc, #364]	; (800426c <HAL_RCC_OscConfig+0x278>)
 8004100:	b16a      	cbz	r2, 800411e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8004102:	2201      	movs	r2, #1
 8004104:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004106:	f7ff fd9f 	bl	8003c48 <HAL_GetTick>
 800410a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	079f      	lsls	r7, r3, #30
 8004110:	d4ec      	bmi.n	80040ec <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004112:	f7ff fd99 	bl	8003c48 <HAL_GetTick>
 8004116:	1b80      	subs	r0, r0, r6
 8004118:	2802      	cmp	r0, #2
 800411a:	d9f7      	bls.n	800410c <HAL_RCC_OscConfig+0x118>
 800411c:	e7ab      	b.n	8004076 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800411e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004120:	f7ff fd92 	bl	8003c48 <HAL_GetTick>
 8004124:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	0798      	lsls	r0, r3, #30
 800412a:	f57f af6d 	bpl.w	8004008 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412e:	f7ff fd8b 	bl	8003c48 <HAL_GetTick>
 8004132:	1b80      	subs	r0, r0, r6
 8004134:	2802      	cmp	r0, #2
 8004136:	d9f6      	bls.n	8004126 <HAL_RCC_OscConfig+0x132>
 8004138:	e79d      	b.n	8004076 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800413a:	69aa      	ldr	r2, [r5, #24]
 800413c:	4e4a      	ldr	r6, [pc, #296]	; (8004268 <HAL_RCC_OscConfig+0x274>)
 800413e:	4b4b      	ldr	r3, [pc, #300]	; (800426c <HAL_RCC_OscConfig+0x278>)
 8004140:	b1e2      	cbz	r2, 800417c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8004142:	2201      	movs	r2, #1
 8004144:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004148:	f7ff fd7e 	bl	8003c48 <HAL_GetTick>
 800414c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004150:	079b      	lsls	r3, r3, #30
 8004152:	d50d      	bpl.n	8004170 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004154:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004158:	4b45      	ldr	r3, [pc, #276]	; (8004270 <HAL_RCC_OscConfig+0x27c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004160:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004162:	bf00      	nop
  }
  while (Delay --);
 8004164:	9b01      	ldr	r3, [sp, #4]
 8004166:	1e5a      	subs	r2, r3, #1
 8004168:	9201      	str	r2, [sp, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f9      	bne.n	8004162 <HAL_RCC_OscConfig+0x16e>
 800416e:	e74f      	b.n	8004010 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004170:	f7ff fd6a 	bl	8003c48 <HAL_GetTick>
 8004174:	1b00      	subs	r0, r0, r4
 8004176:	2802      	cmp	r0, #2
 8004178:	d9e9      	bls.n	800414e <HAL_RCC_OscConfig+0x15a>
 800417a:	e77c      	b.n	8004076 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800417c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004180:	f7ff fd62 	bl	8003c48 <HAL_GetTick>
 8004184:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004186:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004188:	079f      	lsls	r7, r3, #30
 800418a:	f57f af41 	bpl.w	8004010 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800418e:	f7ff fd5b 	bl	8003c48 <HAL_GetTick>
 8004192:	1b00      	subs	r0, r0, r4
 8004194:	2802      	cmp	r0, #2
 8004196:	d9f6      	bls.n	8004186 <HAL_RCC_OscConfig+0x192>
 8004198:	e76d      	b.n	8004076 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419a:	4c33      	ldr	r4, [pc, #204]	; (8004268 <HAL_RCC_OscConfig+0x274>)
 800419c:	69e3      	ldr	r3, [r4, #28]
 800419e:	00d8      	lsls	r0, r3, #3
 80041a0:	d424      	bmi.n	80041ec <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80041a2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a4:	69e3      	ldr	r3, [r4, #28]
 80041a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041aa:	61e3      	str	r3, [r4, #28]
 80041ac:	69e3      	ldr	r3, [r4, #28]
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b6:	4e2f      	ldr	r6, [pc, #188]	; (8004274 <HAL_RCC_OscConfig+0x280>)
 80041b8:	6833      	ldr	r3, [r6, #0]
 80041ba:	05d9      	lsls	r1, r3, #23
 80041bc:	d518      	bpl.n	80041f0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041be:	68eb      	ldr	r3, [r5, #12]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d126      	bne.n	8004212 <HAL_RCC_OscConfig+0x21e>
 80041c4:	6a23      	ldr	r3, [r4, #32]
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80041cc:	f7ff fd3c 	bl	8003c48 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80041d4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d6:	6a23      	ldr	r3, [r4, #32]
 80041d8:	079b      	lsls	r3, r3, #30
 80041da:	d53f      	bpl.n	800425c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80041dc:	2f00      	cmp	r7, #0
 80041de:	f43f af1b 	beq.w	8004018 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e2:	69e3      	ldr	r3, [r4, #28]
 80041e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e8:	61e3      	str	r3, [r4, #28]
 80041ea:	e715      	b.n	8004018 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80041ec:	2700      	movs	r7, #0
 80041ee:	e7e2      	b.n	80041b6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f0:	6833      	ldr	r3, [r6, #0]
 80041f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80041f8:	f7ff fd26 	bl	8003c48 <HAL_GetTick>
 80041fc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fe:	6833      	ldr	r3, [r6, #0]
 8004200:	05da      	lsls	r2, r3, #23
 8004202:	d4dc      	bmi.n	80041be <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004204:	f7ff fd20 	bl	8003c48 <HAL_GetTick>
 8004208:	eba0 0008 	sub.w	r0, r0, r8
 800420c:	2864      	cmp	r0, #100	; 0x64
 800420e:	d9f6      	bls.n	80041fe <HAL_RCC_OscConfig+0x20a>
 8004210:	e731      	b.n	8004076 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004212:	b9ab      	cbnz	r3, 8004240 <HAL_RCC_OscConfig+0x24c>
 8004214:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004216:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	6223      	str	r3, [r4, #32]
 8004220:	6a23      	ldr	r3, [r4, #32]
 8004222:	f023 0304 	bic.w	r3, r3, #4
 8004226:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004228:	f7ff fd0e 	bl	8003c48 <HAL_GetTick>
 800422c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800422e:	6a23      	ldr	r3, [r4, #32]
 8004230:	0798      	lsls	r0, r3, #30
 8004232:	d5d3      	bpl.n	80041dc <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004234:	f7ff fd08 	bl	8003c48 <HAL_GetTick>
 8004238:	1b80      	subs	r0, r0, r6
 800423a:	4540      	cmp	r0, r8
 800423c:	d9f7      	bls.n	800422e <HAL_RCC_OscConfig+0x23a>
 800423e:	e71a      	b.n	8004076 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004240:	2b05      	cmp	r3, #5
 8004242:	6a23      	ldr	r3, [r4, #32]
 8004244:	d103      	bne.n	800424e <HAL_RCC_OscConfig+0x25a>
 8004246:	f043 0304 	orr.w	r3, r3, #4
 800424a:	6223      	str	r3, [r4, #32]
 800424c:	e7ba      	b.n	80041c4 <HAL_RCC_OscConfig+0x1d0>
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	6223      	str	r3, [r4, #32]
 8004254:	6a23      	ldr	r3, [r4, #32]
 8004256:	f023 0304 	bic.w	r3, r3, #4
 800425a:	e7b6      	b.n	80041ca <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425c:	f7ff fcf4 	bl	8003c48 <HAL_GetTick>
 8004260:	1b80      	subs	r0, r0, r6
 8004262:	4540      	cmp	r0, r8
 8004264:	d9b7      	bls.n	80041d6 <HAL_RCC_OscConfig+0x1e2>
 8004266:	e706      	b.n	8004076 <HAL_RCC_OscConfig+0x82>
 8004268:	40021000 	.word	0x40021000
 800426c:	42420000 	.word	0x42420000
 8004270:	20000004 	.word	0x20000004
 8004274:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004278:	4c2a      	ldr	r4, [pc, #168]	; (8004324 <HAL_RCC_OscConfig+0x330>)
 800427a:	6863      	ldr	r3, [r4, #4]
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	2b08      	cmp	r3, #8
 8004282:	d03e      	beq.n	8004302 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004284:	2200      	movs	r2, #0
 8004286:	4b28      	ldr	r3, [pc, #160]	; (8004328 <HAL_RCC_OscConfig+0x334>)
 8004288:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800428a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800428c:	d12c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800428e:	f7ff fcdb 	bl	8003c48 <HAL_GetTick>
 8004292:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	0199      	lsls	r1, r3, #6
 8004298:	d420      	bmi.n	80042dc <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800429a:	6a2b      	ldr	r3, [r5, #32]
 800429c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a0:	d105      	bne.n	80042ae <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042a2:	6862      	ldr	r2, [r4, #4]
 80042a4:	68a9      	ldr	r1, [r5, #8]
 80042a6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80042aa:	430a      	orrs	r2, r1
 80042ac:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042ae:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80042b0:	6862      	ldr	r2, [r4, #4]
 80042b2:	430b      	orrs	r3, r1
 80042b4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80042b8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80042ba:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042bc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80042be:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <HAL_RCC_OscConfig+0x334>)
 80042c0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80042c2:	f7ff fcc1 	bl	8003c48 <HAL_GetTick>
 80042c6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	019a      	lsls	r2, r3, #6
 80042cc:	f53f aea8 	bmi.w	8004020 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d0:	f7ff fcba 	bl	8003c48 <HAL_GetTick>
 80042d4:	1b40      	subs	r0, r0, r5
 80042d6:	2802      	cmp	r0, #2
 80042d8:	d9f6      	bls.n	80042c8 <HAL_RCC_OscConfig+0x2d4>
 80042da:	e6cc      	b.n	8004076 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042dc:	f7ff fcb4 	bl	8003c48 <HAL_GetTick>
 80042e0:	1b80      	subs	r0, r0, r6
 80042e2:	2802      	cmp	r0, #2
 80042e4:	d9d6      	bls.n	8004294 <HAL_RCC_OscConfig+0x2a0>
 80042e6:	e6c6      	b.n	8004076 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80042e8:	f7ff fcae 	bl	8003c48 <HAL_GetTick>
 80042ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	019b      	lsls	r3, r3, #6
 80042f2:	f57f ae95 	bpl.w	8004020 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f6:	f7ff fca7 	bl	8003c48 <HAL_GetTick>
 80042fa:	1b40      	subs	r0, r0, r5
 80042fc:	2802      	cmp	r0, #2
 80042fe:	d9f6      	bls.n	80042ee <HAL_RCC_OscConfig+0x2fa>
 8004300:	e6b9      	b.n	8004076 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004302:	2801      	cmp	r0, #1
 8004304:	f43f aeb8 	beq.w	8004078 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8004308:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430a:	6a2a      	ldr	r2, [r5, #32]
 800430c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004310:	4291      	cmp	r1, r2
 8004312:	f47f ae9b 	bne.w	800404c <HAL_RCC_OscConfig+0x58>
 8004316:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004318:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431c:	4293      	cmp	r3, r2
 800431e:	f43f ae7f 	beq.w	8004020 <HAL_RCC_OscConfig+0x2c>
 8004322:	e693      	b.n	800404c <HAL_RCC_OscConfig+0x58>
 8004324:	40021000 	.word	0x40021000
 8004328:	42420000 	.word	0x42420000

0800432c <HAL_RCC_GetSysClockFreq>:
{
 800432c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800432e:	4b18      	ldr	r3, [pc, #96]	; (8004390 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8004330:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004332:	ac02      	add	r4, sp, #8
 8004334:	f103 0510 	add.w	r5, r3, #16
 8004338:	4622      	mov	r2, r4
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	6859      	ldr	r1, [r3, #4]
 800433e:	3308      	adds	r3, #8
 8004340:	c203      	stmia	r2!, {r0, r1}
 8004342:	42ab      	cmp	r3, r5
 8004344:	4614      	mov	r4, r2
 8004346:	d1f7      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004348:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 800434c:	4911      	ldr	r1, [pc, #68]	; (8004394 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800434e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8004352:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004354:	f003 020c 	and.w	r2, r3, #12
 8004358:	2a08      	cmp	r2, #8
 800435a:	d117      	bne.n	800438c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800435c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004360:	3218      	adds	r2, #24
 8004362:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004364:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004366:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800436a:	d50c      	bpl.n	8004386 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800436c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800436e:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004370:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004374:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004376:	3318      	adds	r3, #24
 8004378:	446b      	add	r3, sp
 800437a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800437e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004382:	b007      	add	sp, #28
 8004384:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004386:	4b05      	ldr	r3, [pc, #20]	; (800439c <HAL_RCC_GetSysClockFreq+0x70>)
 8004388:	4358      	muls	r0, r3
 800438a:	e7fa      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 800438c:	4802      	ldr	r0, [pc, #8]	; (8004398 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800438e:	e7f8      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x56>
 8004390:	080057f4 	.word	0x080057f4
 8004394:	40021000 	.word	0x40021000
 8004398:	007a1200 	.word	0x007a1200
 800439c:	003d0900 	.word	0x003d0900

080043a0 <HAL_RCC_ClockConfig>:
{
 80043a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043a4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80043a6:	4604      	mov	r4, r0
 80043a8:	b910      	cbnz	r0, 80043b0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80043aa:	2001      	movs	r0, #1
}
 80043ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043b0:	4a44      	ldr	r2, [pc, #272]	; (80044c4 <HAL_RCC_ClockConfig+0x124>)
 80043b2:	6813      	ldr	r3, [r2, #0]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	428b      	cmp	r3, r1
 80043ba:	d328      	bcc.n	800440e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043bc:	6821      	ldr	r1, [r4, #0]
 80043be:	078e      	lsls	r6, r1, #30
 80043c0:	d430      	bmi.n	8004424 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c2:	07ca      	lsls	r2, r1, #31
 80043c4:	d443      	bmi.n	800444e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043c6:	4a3f      	ldr	r2, [pc, #252]	; (80044c4 <HAL_RCC_ClockConfig+0x124>)
 80043c8:	6813      	ldr	r3, [r2, #0]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	42ab      	cmp	r3, r5
 80043d0:	d865      	bhi.n	800449e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	4d3c      	ldr	r5, [pc, #240]	; (80044c8 <HAL_RCC_ClockConfig+0x128>)
 80043d6:	f012 0f04 	tst.w	r2, #4
 80043da:	d16c      	bne.n	80044b6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043dc:	0713      	lsls	r3, r2, #28
 80043de:	d506      	bpl.n	80043ee <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043e0:	686b      	ldr	r3, [r5, #4]
 80043e2:	6922      	ldr	r2, [r4, #16]
 80043e4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80043e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80043ec:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ee:	f7ff ff9d 	bl	800432c <HAL_RCC_GetSysClockFreq>
 80043f2:	686b      	ldr	r3, [r5, #4]
 80043f4:	4a35      	ldr	r2, [pc, #212]	; (80044cc <HAL_RCC_ClockConfig+0x12c>)
 80043f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	40d8      	lsrs	r0, r3
 80043fe:	4b34      	ldr	r3, [pc, #208]	; (80044d0 <HAL_RCC_ClockConfig+0x130>)
 8004400:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004402:	4b34      	ldr	r3, [pc, #208]	; (80044d4 <HAL_RCC_ClockConfig+0x134>)
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	f7ff fbdd 	bl	8003bc4 <HAL_InitTick>
  return HAL_OK;
 800440a:	2000      	movs	r0, #0
 800440c:	e7ce      	b.n	80043ac <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	6813      	ldr	r3, [r2, #0]
 8004410:	f023 0307 	bic.w	r3, r3, #7
 8004414:	430b      	orrs	r3, r1
 8004416:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004418:	6813      	ldr	r3, [r2, #0]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	428b      	cmp	r3, r1
 8004420:	d1c3      	bne.n	80043aa <HAL_RCC_ClockConfig+0xa>
 8004422:	e7cb      	b.n	80043bc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004424:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <HAL_RCC_ClockConfig+0x128>)
 8004426:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800442a:	bf1e      	ittt	ne
 800442c:	685a      	ldrne	r2, [r3, #4]
 800442e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8004432:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004434:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004436:	bf42      	ittt	mi
 8004438:	685a      	ldrmi	r2, [r3, #4]
 800443a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800443e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	68a0      	ldr	r0, [r4, #8]
 8004444:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004448:	4302      	orrs	r2, r0
 800444a:	605a      	str	r2, [r3, #4]
 800444c:	e7b9      	b.n	80043c2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444e:	6862      	ldr	r2, [r4, #4]
 8004450:	4e1d      	ldr	r6, [pc, #116]	; (80044c8 <HAL_RCC_ClockConfig+0x128>)
 8004452:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004454:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004456:	d11a      	bne.n	800448e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004458:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445c:	d0a5      	beq.n	80043aa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800445e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004460:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004464:	f023 0303 	bic.w	r3, r3, #3
 8004468:	4313      	orrs	r3, r2
 800446a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800446c:	f7ff fbec 	bl	8003c48 <HAL_GetTick>
 8004470:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	6873      	ldr	r3, [r6, #4]
 8004474:	6862      	ldr	r2, [r4, #4]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800447e:	d0a2      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004480:	f7ff fbe2 	bl	8003c48 <HAL_GetTick>
 8004484:	1bc0      	subs	r0, r0, r7
 8004486:	4540      	cmp	r0, r8
 8004488:	d9f3      	bls.n	8004472 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800448a:	2003      	movs	r0, #3
 800448c:	e78e      	b.n	80043ac <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800448e:	2a02      	cmp	r2, #2
 8004490:	d102      	bne.n	8004498 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004492:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004496:	e7e1      	b.n	800445c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004498:	f013 0f02 	tst.w	r3, #2
 800449c:	e7de      	b.n	800445c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449e:	6813      	ldr	r3, [r2, #0]
 80044a0:	f023 0307 	bic.w	r3, r3, #7
 80044a4:	432b      	orrs	r3, r5
 80044a6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a8:	6813      	ldr	r3, [r2, #0]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	42ab      	cmp	r3, r5
 80044b0:	f47f af7b 	bne.w	80043aa <HAL_RCC_ClockConfig+0xa>
 80044b4:	e78d      	b.n	80043d2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b6:	686b      	ldr	r3, [r5, #4]
 80044b8:	68e1      	ldr	r1, [r4, #12]
 80044ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044be:	430b      	orrs	r3, r1
 80044c0:	606b      	str	r3, [r5, #4]
 80044c2:	e78b      	b.n	80043dc <HAL_RCC_ClockConfig+0x3c>
 80044c4:	40022000 	.word	0x40022000
 80044c8:	40021000 	.word	0x40021000
 80044cc:	080057dc 	.word	0x080057dc
 80044d0:	20000004 	.word	0x20000004
 80044d4:	2000000c 	.word	0x2000000c

080044d8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x14>)
 80044da:	4a05      	ldr	r2, [pc, #20]	; (80044f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80044e2:	5cd3      	ldrb	r3, [r2, r3]
 80044e4:	4a03      	ldr	r2, [pc, #12]	; (80044f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80044e6:	6810      	ldr	r0, [r2, #0]
}
 80044e8:	40d8      	lsrs	r0, r3
 80044ea:	4770      	bx	lr
 80044ec:	40021000 	.word	0x40021000
 80044f0:	080057ec 	.word	0x080057ec
 80044f4:	20000004 	.word	0x20000004

080044f8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f8:	6a03      	ldr	r3, [r0, #32]
{
 80044fa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004504:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004506:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004508:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800450a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800450e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004510:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004512:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004516:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004518:	4d0a      	ldr	r5, [pc, #40]	; (8004544 <TIM_OC1_SetConfig+0x4c>)
 800451a:	42a8      	cmp	r0, r5
 800451c:	d10b      	bne.n	8004536 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800451e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004520:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004524:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004526:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800452a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800452e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004530:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004534:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004536:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004538:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800453a:	684a      	ldr	r2, [r1, #4]
 800453c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453e:	6203      	str	r3, [r0, #32]
}
 8004540:	bd70      	pop	{r4, r5, r6, pc}
 8004542:	bf00      	nop
 8004544:	40012c00 	.word	0x40012c00

08004548 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004548:	6a03      	ldr	r3, [r0, #32]
{
 800454a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800454c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004550:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004552:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004554:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004556:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004558:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800455a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800455e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004560:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004562:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004566:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800456a:	4d0b      	ldr	r5, [pc, #44]	; (8004598 <TIM_OC3_SetConfig+0x50>)
 800456c:	42a8      	cmp	r0, r5
 800456e:	d10d      	bne.n	800458c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004570:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004576:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800457a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800457e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004582:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004584:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004588:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800458e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004590:	684a      	ldr	r2, [r1, #4]
 8004592:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004594:	6203      	str	r3, [r0, #32]
}
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	40012c00 	.word	0x40012c00

0800459c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800459c:	6a03      	ldr	r3, [r0, #32]
{
 800459e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045aa:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045ae:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045b6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80045b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045bc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c0:	4d06      	ldr	r5, [pc, #24]	; (80045dc <TIM_OC4_SetConfig+0x40>)
 80045c2:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045c4:	bf02      	ittt	eq
 80045c6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045c8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045cc:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045d2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045d4:	684a      	ldr	r2, [r1, #4]
 80045d6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d8:	6203      	str	r3, [r0, #32]
}
 80045da:	bd30      	pop	{r4, r5, pc}
 80045dc:	40012c00 	.word	0x40012c00

080045e0 <HAL_TIM_PWM_MspInit>:
 80045e0:	4770      	bx	lr
	...

080045e4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045e4:	4a16      	ldr	r2, [pc, #88]	; (8004640 <TIM_Base_SetConfig+0x5c>)
{
 80045e6:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045e8:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 80045ea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045ec:	d005      	beq.n	80045fa <TIM_Base_SetConfig+0x16>
 80045ee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80045f2:	d002      	beq.n	80045fa <TIM_Base_SetConfig+0x16>
 80045f4:	4c13      	ldr	r4, [pc, #76]	; (8004644 <TIM_Base_SetConfig+0x60>)
 80045f6:	42a0      	cmp	r0, r4
 80045f8:	d110      	bne.n	800461c <TIM_Base_SetConfig+0x38>
    tmpcr1 |= Structure->CounterMode;
 80045fa:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004600:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8004602:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004606:	d005      	beq.n	8004614 <TIM_Base_SetConfig+0x30>
 8004608:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800460c:	d002      	beq.n	8004614 <TIM_Base_SetConfig+0x30>
 800460e:	4a0d      	ldr	r2, [pc, #52]	; (8004644 <TIM_Base_SetConfig+0x60>)
 8004610:	4290      	cmp	r0, r2
 8004612:	d103      	bne.n	800461c <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004614:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800461a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800461c:	694a      	ldr	r2, [r1, #20]
 800461e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004622:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004624:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004626:	688b      	ldr	r3, [r1, #8]
 8004628:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800462a:	680b      	ldr	r3, [r1, #0]
 800462c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800462e:	4b04      	ldr	r3, [pc, #16]	; (8004640 <TIM_Base_SetConfig+0x5c>)
 8004630:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8004632:	bf04      	itt	eq
 8004634:	690b      	ldreq	r3, [r1, #16]
 8004636:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004638:	2301      	movs	r3, #1
 800463a:	6143      	str	r3, [r0, #20]
}
 800463c:	bd10      	pop	{r4, pc}
 800463e:	bf00      	nop
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40000400 	.word	0x40000400

08004648 <HAL_TIM_Base_Init>:
{
 8004648:	b510      	push	{r4, lr}
  if (htim == NULL)
 800464a:	4604      	mov	r4, r0
 800464c:	b330      	cbz	r0, 800469c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800464e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004652:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004656:	b91b      	cbnz	r3, 8004660 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004658:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800465c:	f7fe ff1e 	bl	800349c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004662:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004668:	1d21      	adds	r1, r4, #4
 800466a:	f7ff ffbb 	bl	80045e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800466e:	2301      	movs	r3, #1
  return HAL_OK;
 8004670:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004672:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004676:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800467a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800467e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004682:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004686:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800468a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800468e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004692:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004696:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800469a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800469c:	2001      	movs	r0, #1
 800469e:	e7fc      	b.n	800469a <HAL_TIM_Base_Init+0x52>

080046a0 <HAL_TIM_PWM_Init>:
{
 80046a0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80046a2:	4604      	mov	r4, r0
 80046a4:	b330      	cbz	r0, 80046f4 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80046a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80046aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046ae:	b91b      	cbnz	r3, 80046b8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80046b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80046b4:	f7ff ff94 	bl	80045e0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ba:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c0:	1d21      	adds	r1, r4, #4
 80046c2:	f7ff ff8f 	bl	80045e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c6:	2301      	movs	r3, #1
  return HAL_OK;
 80046c8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ca:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80046d2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80046d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80046da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80046ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80046ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80046f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80046f4:	2001      	movs	r0, #1
 80046f6:	e7fc      	b.n	80046f2 <HAL_TIM_PWM_Init+0x52>

080046f8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f8:	6a03      	ldr	r3, [r0, #32]
{
 80046fa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046fc:	f023 0310 	bic.w	r3, r3, #16
 8004700:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004702:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004704:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004706:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004708:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800470a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800470e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004712:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004714:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004718:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800471c:	4d0b      	ldr	r5, [pc, #44]	; (800474c <TIM_OC2_SetConfig+0x54>)
 800471e:	42a8      	cmp	r0, r5
 8004720:	d10d      	bne.n	800473e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004722:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004728:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800472c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004730:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004734:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800473a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800473e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004740:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004742:	684a      	ldr	r2, [r1, #4]
 8004744:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004746:	6203      	str	r3, [r0, #32]
}
 8004748:	bd70      	pop	{r4, r5, r6, pc}
 800474a:	bf00      	nop
 800474c:	40012c00 	.word	0x40012c00

08004750 <HAL_TIM_PWM_ConfigChannel>:
{
 8004750:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004752:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004756:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004758:	2b01      	cmp	r3, #1
 800475a:	d052      	beq.n	8004802 <HAL_TIM_PWM_ConfigChannel+0xb2>
 800475c:	2301      	movs	r3, #1
  switch (Channel)
 800475e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8004760:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004764:	d03c      	beq.n	80047e0 <HAL_TIM_PWM_ConfigChannel+0x90>
 8004766:	d806      	bhi.n	8004776 <HAL_TIM_PWM_ConfigChannel+0x26>
 8004768:	b1c2      	cbz	r2, 800479c <HAL_TIM_PWM_ConfigChannel+0x4c>
 800476a:	2a04      	cmp	r2, #4
 800476c:	d027      	beq.n	80047be <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 800476e:	2000      	movs	r0, #0
 8004770:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004774:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8004776:	2a0c      	cmp	r2, #12
 8004778:	d1f9      	bne.n	800476e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477a:	6800      	ldr	r0, [r0, #0]
 800477c:	f7ff ff0e 	bl	800459c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004780:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004782:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004784:	69da      	ldr	r2, [r3, #28]
 8004786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800478a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800478c:	69da      	ldr	r2, [r3, #28]
 800478e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004792:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004794:	69da      	ldr	r2, [r3, #28]
 8004796:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800479a:	e030      	b.n	80047fe <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800479c:	6800      	ldr	r0, [r0, #0]
 800479e:	f7ff feab 	bl	80044f8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047a2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047a4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	f042 0208 	orr.w	r2, r2, #8
 80047ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	f022 0204 	bic.w	r2, r2, #4
 80047b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047b6:	699a      	ldr	r2, [r3, #24]
 80047b8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047ba:	619a      	str	r2, [r3, #24]
      break;
 80047bc:	e7d7      	b.n	800476e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047be:	6800      	ldr	r0, [r0, #0]
 80047c0:	f7ff ff9a 	bl	80046f8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047c4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047c6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80047de:	e7ec      	b.n	80047ba <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047e0:	6800      	ldr	r0, [r0, #0]
 80047e2:	f7ff feb1 	bl	8004548 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047e6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047e8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	f042 0208 	orr.w	r2, r2, #8
 80047f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	f022 0204 	bic.w	r2, r2, #4
 80047f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047fe:	61da      	str	r2, [r3, #28]
      break;
 8004800:	e7b5      	b.n	800476e <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8004802:	2002      	movs	r0, #2
 8004804:	e7b6      	b.n	8004774 <HAL_TIM_PWM_ConfigChannel+0x24>

08004806 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004806:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004808:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800480a:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800480c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004810:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004814:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004816:	6082      	str	r2, [r0, #8]
}
 8004818:	bd10      	pop	{r4, pc}

0800481a <HAL_TIM_ConfigClockSource>:
{
 800481a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800481c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004820:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004822:	2b01      	cmp	r3, #1
 8004824:	f04f 0002 	mov.w	r0, #2
 8004828:	d027      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x60>
 800482a:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004830:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8004832:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004836:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004838:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800483c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004840:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004842:	680b      	ldr	r3, [r1, #0]
 8004844:	2b60      	cmp	r3, #96	; 0x60
 8004846:	d04d      	beq.n	80048e4 <HAL_TIM_ConfigClockSource+0xca>
 8004848:	d832      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x96>
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d062      	beq.n	8004914 <HAL_TIM_ConfigClockSource+0xfa>
 800484e:	d815      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x62>
 8004850:	2b20      	cmp	r3, #32
 8004852:	d003      	beq.n	800485c <HAL_TIM_ConfigClockSource+0x42>
 8004854:	d809      	bhi.n	800486a <HAL_TIM_ConfigClockSource+0x50>
 8004856:	f033 0210 	bics.w	r2, r3, #16
 800485a:	d108      	bne.n	800486e <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 800485c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800485e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004862:	4313      	orrs	r3, r2
 8004864:	f043 0307 	orr.w	r3, r3, #7
 8004868:	e020      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800486a:	2b30      	cmp	r3, #48	; 0x30
 800486c:	d0f6      	beq.n	800485c <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 800486e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004870:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004872:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004876:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800487a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800487c:	2b50      	cmp	r3, #80	; 0x50
 800487e:	d1f6      	bne.n	800486e <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004880:	684a      	ldr	r2, [r1, #4]
 8004882:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004884:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004886:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004888:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488c:	f025 0501 	bic.w	r5, r5, #1
 8004890:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004892:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004894:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800489a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800489e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80048a0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80048a2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80048a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048a8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80048ac:	6083      	str	r3, [r0, #8]
}
 80048ae:	e7de      	b.n	800486e <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 80048b0:	2b70      	cmp	r3, #112	; 0x70
 80048b2:	d00c      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0xb4>
 80048b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b8:	d1d9      	bne.n	800486e <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 80048ba:	68cb      	ldr	r3, [r1, #12]
 80048bc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80048c0:	f7ff ffa1 	bl	8004806 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	6893      	ldr	r3, [r2, #8]
 80048c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048cc:	e008      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80048ce:	68cb      	ldr	r3, [r1, #12]
 80048d0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80048d4:	f7ff ff97 	bl	8004806 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e0:	6093      	str	r3, [r2, #8]
      break;
 80048e2:	e7c4      	b.n	800486e <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e4:	684d      	ldr	r5, [r1, #4]
 80048e6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048e8:	6a01      	ldr	r1, [r0, #32]
 80048ea:	f021 0110 	bic.w	r1, r1, #16
 80048ee:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f0:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80048f2:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048f4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80048fc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004900:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004904:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004906:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004908:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800490a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800490e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004912:	e7cb      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004914:	684a      	ldr	r2, [r1, #4]
 8004916:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004918:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491a:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800491c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004920:	f025 0501 	bic.w	r5, r5, #1
 8004924:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004926:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004928:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800492a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800492e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004932:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004934:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004936:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800493c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004940:	e7b4      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x92>

08004942 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004942:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004944:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004946:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004948:	f001 011f 	and.w	r1, r1, #31
 800494c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800494e:	ea23 0304 	bic.w	r3, r3, r4
 8004952:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004954:	6a03      	ldr	r3, [r0, #32]
 8004956:	408a      	lsls	r2, r1
 8004958:	431a      	orrs	r2, r3
 800495a:	6202      	str	r2, [r0, #32]
}
 800495c:	bd10      	pop	{r4, pc}
	...

08004960 <HAL_TIM_OC_Start>:
{
 8004960:	b510      	push	{r4, lr}
 8004962:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004964:	b929      	cbnz	r1, 8004972 <HAL_TIM_OC_Start+0x12>
 8004966:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800496a:	2b01      	cmp	r3, #1
 800496c:	d021      	beq.n	80049b2 <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 800496e:	2001      	movs	r0, #1
}
 8004970:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004972:	2904      	cmp	r1, #4
 8004974:	d107      	bne.n	8004986 <HAL_TIM_OC_Start+0x26>
 8004976:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800497a:	2b01      	cmp	r3, #1
 800497c:	d1f7      	bne.n	800496e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800497e:	2302      	movs	r3, #2
 8004980:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004984:	e018      	b.n	80049b8 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004986:	2908      	cmp	r1, #8
 8004988:	d107      	bne.n	800499a <HAL_TIM_OC_Start+0x3a>
 800498a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800498e:	2b01      	cmp	r3, #1
 8004990:	d1ed      	bne.n	800496e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004992:	2302      	movs	r3, #2
 8004994:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004998:	e00e      	b.n	80049b8 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800499a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d1e5      	bne.n	800496e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a2:	2904      	cmp	r1, #4
 80049a4:	d0eb      	beq.n	800497e <HAL_TIM_OC_Start+0x1e>
 80049a6:	2908      	cmp	r1, #8
 80049a8:	d0f3      	beq.n	8004992 <HAL_TIM_OC_Start+0x32>
 80049aa:	2302      	movs	r3, #2
 80049ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80049b0:	e002      	b.n	80049b8 <HAL_TIM_OC_Start+0x58>
 80049b2:	2302      	movs	r3, #2
 80049b4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049b8:	2201      	movs	r2, #1
 80049ba:	6820      	ldr	r0, [r4, #0]
 80049bc:	f7ff ffc1 	bl	8004942 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	4a0c      	ldr	r2, [pc, #48]	; (80049f4 <HAL_TIM_OC_Start+0x94>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d10a      	bne.n	80049de <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 80049c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ce:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d6:	2a06      	cmp	r2, #6
 80049d8:	d107      	bne.n	80049ea <HAL_TIM_OC_Start+0x8a>
  return HAL_OK;
 80049da:	2000      	movs	r0, #0
 80049dc:	e7c8      	b.n	8004970 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d0f5      	beq.n	80049d0 <HAL_TIM_OC_Start+0x70>
 80049e4:	4a04      	ldr	r2, [pc, #16]	; (80049f8 <HAL_TIM_OC_Start+0x98>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d0f2      	beq.n	80049d0 <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	e7f2      	b.n	80049da <HAL_TIM_OC_Start+0x7a>
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40000400 	.word	0x40000400

080049fc <HAL_TIM_PWM_Start>:
 80049fc:	f7ff bfb0 	b.w	8004960 <HAL_TIM_OC_Start>

08004a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a00:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a02:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
{
 8004a06:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004a08:	2a01      	cmp	r2, #1
 8004a0a:	f04f 0002 	mov.w	r0, #2
 8004a0e:	d01e      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a10:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004a12:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004a16:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a18:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a1a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a1e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8004a20:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a22:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a24:	4c0a      	ldr	r4, [pc, #40]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8004a26:	42a2      	cmp	r2, r4
 8004a28:	d006      	beq.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8004a2a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004a2e:	d003      	beq.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8004a30:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8004a34:	42a2      	cmp	r2, r4
 8004a36:	d104      	bne.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a38:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a3a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a3e:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a40:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a42:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 8004a44:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004a4a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8004a4e:	bd30      	pop	{r4, r5, pc}
 8004a50:	40012c00 	.word	0x40012c00

08004a54 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d01f      	beq.n	8004a9c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a5c:	68cb      	ldr	r3, [r1, #12]
 8004a5e:	688a      	ldr	r2, [r1, #8]
 8004a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a64:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a66:	684a      	ldr	r2, [r1, #4]
 8004a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a6c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a6e:	680a      	ldr	r2, [r1, #0]
 8004a70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a74:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a76:	690a      	ldr	r2, [r1, #16]
 8004a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a7c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a7e:	694a      	ldr	r2, [r1, #20]
 8004a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a84:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a86:	69ca      	ldr	r2, [r1, #28]
 8004a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a8c:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a8e:	6802      	ldr	r2, [r0, #0]
 8004a90:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a92:	2300      	movs	r3, #0
 8004a94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004a98:	4618      	mov	r0, r3
 8004a9a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a9c:	2002      	movs	r0, #2
}
 8004a9e:	4770      	bx	lr

08004aa0 <_ZdlPv>:
 8004aa0:	f000 bd2e 	b.w	8005500 <free>

08004aa4 <_ZdlPvj>:
 8004aa4:	f7ff bffc 	b.w	8004aa0 <_ZdlPv>

08004aa8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004aa8:	7803      	ldrb	r3, [r0, #0]
 8004aaa:	2b47      	cmp	r3, #71	; 0x47
 8004aac:	d117      	bne.n	8004ade <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004aae:	7843      	ldrb	r3, [r0, #1]
 8004ab0:	2b4e      	cmp	r3, #78	; 0x4e
 8004ab2:	d114      	bne.n	8004ade <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ab4:	7883      	ldrb	r3, [r0, #2]
 8004ab6:	2b55      	cmp	r3, #85	; 0x55
 8004ab8:	d111      	bne.n	8004ade <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004aba:	78c3      	ldrb	r3, [r0, #3]
 8004abc:	2b43      	cmp	r3, #67	; 0x43
 8004abe:	d10e      	bne.n	8004ade <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ac0:	7903      	ldrb	r3, [r0, #4]
 8004ac2:	2b43      	cmp	r3, #67	; 0x43
 8004ac4:	d10b      	bne.n	8004ade <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ac6:	7943      	ldrb	r3, [r0, #5]
 8004ac8:	2b2b      	cmp	r3, #43	; 0x2b
 8004aca:	d108      	bne.n	8004ade <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004acc:	7983      	ldrb	r3, [r0, #6]
 8004ace:	2b2b      	cmp	r3, #43	; 0x2b
 8004ad0:	d105      	bne.n	8004ade <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ad2:	79c0      	ldrb	r0, [r0, #7]
 8004ad4:	2801      	cmp	r0, #1
 8004ad6:	bf8c      	ite	hi
 8004ad8:	2000      	movhi	r0, #0
 8004ada:	2001      	movls	r0, #1
 8004adc:	4770      	bx	lr
 8004ade:	2000      	movs	r0, #0
 8004ae0:	4770      	bx	lr
	...

08004ae4 <__cxa_type_match>:
 8004ae4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004ae8:	461d      	mov	r5, r3
 8004aea:	7803      	ldrb	r3, [r0, #0]
 8004aec:	460e      	mov	r6, r1
 8004aee:	2b47      	cmp	r3, #71	; 0x47
 8004af0:	4602      	mov	r2, r0
 8004af2:	79c1      	ldrb	r1, [r0, #7]
 8004af4:	d113      	bne.n	8004b1e <__cxa_type_match+0x3a>
 8004af6:	7843      	ldrb	r3, [r0, #1]
 8004af8:	2b4e      	cmp	r3, #78	; 0x4e
 8004afa:	d110      	bne.n	8004b1e <__cxa_type_match+0x3a>
 8004afc:	7883      	ldrb	r3, [r0, #2]
 8004afe:	2b55      	cmp	r3, #85	; 0x55
 8004b00:	d10d      	bne.n	8004b1e <__cxa_type_match+0x3a>
 8004b02:	78c3      	ldrb	r3, [r0, #3]
 8004b04:	2b43      	cmp	r3, #67	; 0x43
 8004b06:	d10a      	bne.n	8004b1e <__cxa_type_match+0x3a>
 8004b08:	7903      	ldrb	r3, [r0, #4]
 8004b0a:	2b46      	cmp	r3, #70	; 0x46
 8004b0c:	d107      	bne.n	8004b1e <__cxa_type_match+0x3a>
 8004b0e:	7943      	ldrb	r3, [r0, #5]
 8004b10:	2b4f      	cmp	r3, #79	; 0x4f
 8004b12:	d104      	bne.n	8004b1e <__cxa_type_match+0x3a>
 8004b14:	7983      	ldrb	r3, [r0, #6]
 8004b16:	2b52      	cmp	r3, #82	; 0x52
 8004b18:	d101      	bne.n	8004b1e <__cxa_type_match+0x3a>
 8004b1a:	2900      	cmp	r1, #0
 8004b1c:	d030      	beq.n	8004b80 <__cxa_type_match+0x9c>
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f7ff ffc2 	bl	8004aa8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004b24:	2300      	movs	r3, #0
 8004b26:	f080 0401 	eor.w	r4, r0, #1
 8004b2a:	b2e4      	uxtb	r4, r4
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	9001      	str	r0, [sp, #4]
 8004b30:	bb4b      	cbnz	r3, 8004b86 <__cxa_type_match+0xa2>
 8004b32:	bb54      	cbnz	r4, 8004b8a <__cxa_type_match+0xa6>
 8004b34:	2901      	cmp	r1, #1
 8004b36:	bf0a      	itet	eq
 8004b38:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8004b3c:	f1a2 0320 	subne.w	r3, r2, #32
 8004b40:	3b78      	subeq	r3, #120	; 0x78
 8004b42:	2901      	cmp	r1, #1
 8004b44:	bf0c      	ite	eq
 8004b46:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8004b4a:	3258      	addne	r2, #88	; 0x58
 8004b4c:	681c      	ldr	r4, [r3, #0]
 8004b4e:	9201      	str	r2, [sp, #4]
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	4620      	mov	r0, r4
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	4798      	blx	r3
 8004b58:	b1c8      	cbz	r0, 8004b8e <__cxa_type_match+0xaa>
 8004b5a:	2702      	movs	r7, #2
 8004b5c:	9b01      	ldr	r3, [sp, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	6833      	ldr	r3, [r6, #0]
 8004b64:	4621      	mov	r1, r4
 8004b66:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	aa01      	add	r2, sp, #4
 8004b70:	47c0      	blx	r8
 8004b72:	b170      	cbz	r0, 8004b92 <__cxa_type_match+0xae>
 8004b74:	9b01      	ldr	r3, [sp, #4]
 8004b76:	602b      	str	r3, [r5, #0]
 8004b78:	4638      	mov	r0, r7
 8004b7a:	b002      	add	sp, #8
 8004b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b80:	2301      	movs	r3, #1
 8004b82:	460c      	mov	r4, r1
 8004b84:	e7d2      	b.n	8004b2c <__cxa_type_match+0x48>
 8004b86:	4c04      	ldr	r4, [pc, #16]	; (8004b98 <__cxa_type_match+0xb4>)
 8004b88:	e7e2      	b.n	8004b50 <__cxa_type_match+0x6c>
 8004b8a:	4c04      	ldr	r4, [pc, #16]	; (8004b9c <__cxa_type_match+0xb8>)
 8004b8c:	e7e0      	b.n	8004b50 <__cxa_type_match+0x6c>
 8004b8e:	2701      	movs	r7, #1
 8004b90:	e7e7      	b.n	8004b62 <__cxa_type_match+0x7e>
 8004b92:	4607      	mov	r7, r0
 8004b94:	e7f0      	b.n	8004b78 <__cxa_type_match+0x94>
 8004b96:	bf00      	nop
 8004b98:	08005808 	.word	0x08005808
 8004b9c:	08005810 	.word	0x08005810

08004ba0 <__cxa_begin_cleanup>:
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	f000 f81a 	bl	8004bdc <__cxa_get_globals>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4620      	mov	r0, r4
 8004bac:	f1a4 0120 	sub.w	r1, r4, #32
 8004bb0:	f7ff ff7a 	bl	8004aa8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004bb4:	b160      	cbz	r0, 8004bd0 <__cxa_begin_cleanup+0x30>
 8004bb6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8004bc2:	d103      	bne.n	8004bcc <__cxa_begin_cleanup+0x2c>
 8004bc4:	6893      	ldr	r3, [r2, #8]
 8004bc6:	f844 3c08 	str.w	r3, [r4, #-8]
 8004bca:	6091      	str	r1, [r2, #8]
 8004bcc:	2001      	movs	r0, #1
 8004bce:	bd10      	pop	{r4, pc}
 8004bd0:	6893      	ldr	r3, [r2, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f9      	beq.n	8004bca <__cxa_begin_cleanup+0x2a>
 8004bd6:	f000 fa8b 	bl	80050f0 <_ZSt9terminatev>
	...

08004bdc <__cxa_get_globals>:
 8004bdc:	4800      	ldr	r0, [pc, #0]	; (8004be0 <__cxa_get_globals+0x4>)
 8004bde:	4770      	bx	lr
 8004be0:	2000020c 	.word	0x2000020c

08004be4 <_ZL12read_uleb128PKhPm>:
 8004be4:	2300      	movs	r3, #0
 8004be6:	461a      	mov	r2, r3
 8004be8:	b530      	push	{r4, r5, lr}
 8004bea:	f810 5b01 	ldrb.w	r5, [r0], #1
 8004bee:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 8004bf2:	4094      	lsls	r4, r2
 8004bf4:	4323      	orrs	r3, r4
 8004bf6:	062c      	lsls	r4, r5, #24
 8004bf8:	f102 0207 	add.w	r2, r2, #7
 8004bfc:	d4f5      	bmi.n	8004bea <_ZL12read_uleb128PKhPm+0x6>
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	bd30      	pop	{r4, r5, pc}

08004c02 <_ZL12read_sleb128PKhPl>:
 8004c02:	2300      	movs	r3, #0
 8004c04:	461a      	mov	r2, r3
 8004c06:	b530      	push	{r4, r5, lr}
 8004c08:	f810 4b01 	ldrb.w	r4, [r0], #1
 8004c0c:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8004c10:	4095      	lsls	r5, r2
 8004c12:	432b      	orrs	r3, r5
 8004c14:	0625      	lsls	r5, r4, #24
 8004c16:	f102 0207 	add.w	r2, r2, #7
 8004c1a:	d4f5      	bmi.n	8004c08 <_ZL12read_sleb128PKhPl+0x6>
 8004c1c:	2a1f      	cmp	r2, #31
 8004c1e:	d806      	bhi.n	8004c2e <_ZL12read_sleb128PKhPl+0x2c>
 8004c20:	0664      	lsls	r4, r4, #25
 8004c22:	bf42      	ittt	mi
 8004c24:	f04f 34ff 	movmi.w	r4, #4294967295
 8004c28:	fa04 f202 	lslmi.w	r2, r4, r2
 8004c2c:	4313      	orrmi	r3, r2
 8004c2e:	600b      	str	r3, [r1, #0]
 8004c30:	bd30      	pop	{r4, r5, pc}

08004c32 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8004c32:	2850      	cmp	r0, #80	; 0x50
 8004c34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004c38:	4606      	mov	r6, r0
 8004c3a:	4688      	mov	r8, r1
 8004c3c:	4615      	mov	r5, r2
 8004c3e:	461f      	mov	r7, r3
 8004c40:	d108      	bne.n	8004c54 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8004c42:	1cd0      	adds	r0, r2, #3
 8004c44:	f020 0003 	bic.w	r0, r0, #3
 8004c48:	f850 4b04 	ldr.w	r4, [r0], #4
 8004c4c:	603c      	str	r4, [r7, #0]
 8004c4e:	b002      	add	sp, #8
 8004c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c54:	f000 030f 	and.w	r3, r0, #15
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	d82e      	bhi.n	8004cba <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8004c5c:	e8df f003 	tbb	[pc, r3]
 8004c60:	251d0725 	.word	0x251d0725
 8004c64:	2d2d2d29 	.word	0x2d2d2d29
 8004c68:	2521182d 	.word	0x2521182d
 8004c6c:	29          	.byte	0x29
 8004c6d:	00          	.byte	0x00
 8004c6e:	4628      	mov	r0, r5
 8004c70:	a901      	add	r1, sp, #4
 8004c72:	f7ff ffb7 	bl	8004be4 <_ZL12read_uleb128PKhPm>
 8004c76:	9c01      	ldr	r4, [sp, #4]
 8004c78:	2c00      	cmp	r4, #0
 8004c7a:	d0e7      	beq.n	8004c4c <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8004c7c:	f006 0370 	and.w	r3, r6, #112	; 0x70
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	bf08      	it	eq
 8004c84:	46a8      	moveq	r8, r5
 8004c86:	0633      	lsls	r3, r6, #24
 8004c88:	4444      	add	r4, r8
 8004c8a:	bf48      	it	mi
 8004c8c:	6824      	ldrmi	r4, [r4, #0]
 8004c8e:	e7dd      	b.n	8004c4c <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8004c90:	4628      	mov	r0, r5
 8004c92:	a901      	add	r1, sp, #4
 8004c94:	f7ff ffb5 	bl	8004c02 <_ZL12read_sleb128PKhPl>
 8004c98:	e7ed      	b.n	8004c76 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f830 4b02 	ldrh.w	r4, [r0], #2
 8004ca0:	e7ea      	b.n	8004c78 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8004ca8:	e7e6      	b.n	8004c78 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8004caa:	4628      	mov	r0, r5
 8004cac:	f850 4b04 	ldr.w	r4, [r0], #4
 8004cb0:	e7e2      	b.n	8004c78 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f850 4b08 	ldr.w	r4, [r0], #8
 8004cb8:	e7de      	b.n	8004c78 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8004cba:	f000 fbe7 	bl	800548c <abort>

08004cbe <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8004cbe:	b508      	push	{r3, lr}
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2bff      	cmp	r3, #255	; 0xff
 8004cc4:	4608      	mov	r0, r1
 8004cc6:	d010      	beq.n	8004cea <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8004cc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ccc:	2a30      	cmp	r2, #48	; 0x30
 8004cce:	d012      	beq.n	8004cf6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8004cd0:	d807      	bhi.n	8004ce2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 8004cd2:	2a20      	cmp	r2, #32
 8004cd4:	d00b      	beq.n	8004cee <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8004cd6:	d802      	bhi.n	8004cde <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8004cd8:	f013 0f60 	tst.w	r3, #96	; 0x60
 8004cdc:	d005      	beq.n	8004cea <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8004cde:	f000 fbd5 	bl	800548c <abort>
 8004ce2:	2a40      	cmp	r2, #64	; 0x40
 8004ce4:	d00b      	beq.n	8004cfe <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8004ce6:	2a50      	cmp	r2, #80	; 0x50
 8004ce8:	d1f9      	bne.n	8004cde <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8004cea:	2000      	movs	r0, #0
 8004cec:	bd08      	pop	{r3, pc}
 8004cee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004cf2:	f000 bd64 	b.w	80057be <_Unwind_GetTextRelBase>
 8004cf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004cfa:	f000 bd5d 	b.w	80057b8 <_Unwind_GetDataRelBase>
 8004cfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004d02:	f7fc bf5d 	b.w	8001bc0 <_Unwind_GetRegionStart>

08004d06 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8004d06:	b570      	push	{r4, r5, r6, lr}
 8004d08:	460c      	mov	r4, r1
 8004d0a:	4601      	mov	r1, r0
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	4615      	mov	r5, r2
 8004d10:	461e      	mov	r6, r3
 8004d12:	f7ff ffd4 	bl	8004cbe <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004d16:	4633      	mov	r3, r6
 8004d18:	4601      	mov	r1, r0
 8004d1a:	462a      	mov	r2, r5
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d22:	f7ff bf86 	b.w	8004c32 <_ZL28read_encoded_value_with_basehjPKhPj>

08004d26 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8004d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d28:	460c      	mov	r4, r1
 8004d2a:	4615      	mov	r5, r2
 8004d2c:	4606      	mov	r6, r0
 8004d2e:	b328      	cbz	r0, 8004d7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8004d30:	f7fc ff46 	bl	8001bc0 <_Unwind_GetRegionStart>
 8004d34:	4603      	mov	r3, r0
 8004d36:	4620      	mov	r0, r4
 8004d38:	602b      	str	r3, [r5, #0]
 8004d3a:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004d3e:	29ff      	cmp	r1, #255	; 0xff
 8004d40:	d01e      	beq.n	8004d80 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 8004d42:	4602      	mov	r2, r0
 8004d44:	1d2b      	adds	r3, r5, #4
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7ff ffdd 	bl	8004d06 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004d4c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004d50:	2bff      	cmp	r3, #255	; 0xff
 8004d52:	752b      	strb	r3, [r5, #20]
 8004d54:	d016      	beq.n	8004d84 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8004d56:	2310      	movs	r3, #16
 8004d58:	a901      	add	r1, sp, #4
 8004d5a:	752b      	strb	r3, [r5, #20]
 8004d5c:	f7ff ff42 	bl	8004be4 <_ZL12read_uleb128PKhPm>
 8004d60:	9b01      	ldr	r3, [sp, #4]
 8004d62:	4403      	add	r3, r0
 8004d64:	60eb      	str	r3, [r5, #12]
 8004d66:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004d6a:	a901      	add	r1, sp, #4
 8004d6c:	756b      	strb	r3, [r5, #21]
 8004d6e:	f7ff ff39 	bl	8004be4 <_ZL12read_uleb128PKhPm>
 8004d72:	9b01      	ldr	r3, [sp, #4]
 8004d74:	4403      	add	r3, r0
 8004d76:	612b      	str	r3, [r5, #16]
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	e7da      	b.n	8004d36 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 8004d80:	606b      	str	r3, [r5, #4]
 8004d82:	e7e3      	b.n	8004d4c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 8004d84:	2300      	movs	r3, #0
 8004d86:	e7ed      	b.n	8004d64 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08004d88 <_Unwind_GetGR>:
 8004d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d8a:	ab03      	add	r3, sp, #12
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	460a      	mov	r2, r1
 8004d92:	4619      	mov	r1, r3
 8004d94:	f7fc f96a 	bl	800106c <_Unwind_VRS_Get>
 8004d98:	9803      	ldr	r0, [sp, #12]
 8004d9a:	b005      	add	sp, #20
 8004d9c:	f85d fb04 	ldr.w	pc, [sp], #4

08004da0 <__gxx_personality_v0>:
 8004da0:	2300      	movs	r3, #0
 8004da2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da6:	b091      	sub	sp, #68	; 0x44
 8004da8:	9305      	str	r3, [sp, #20]
 8004daa:	f000 0303 	and.w	r3, r0, #3
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	4606      	mov	r6, r0
 8004db2:	460c      	mov	r4, r1
 8004db4:	4617      	mov	r7, r2
 8004db6:	d00e      	beq.n	8004dd6 <__gxx_personality_v0+0x36>
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d003      	beq.n	8004dc4 <__gxx_personality_v0+0x24>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d13b      	bne.n	8004e38 <__gxx_personality_v0+0x98>
 8004dc0:	0701      	lsls	r1, r0, #28
 8004dc2:	d53b      	bpl.n	8004e3c <__gxx_personality_v0+0x9c>
 8004dc4:	4639      	mov	r1, r7
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f7fc fee2 	bl	8001b90 <__gnu_unwind_frame>
 8004dcc:	b390      	cbz	r0, 8004e34 <__gxx_personality_v0+0x94>
 8004dce:	2009      	movs	r0, #9
 8004dd0:	b011      	add	sp, #68	; 0x44
 8004dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd6:	0702      	lsls	r2, r0, #28
 8004dd8:	d406      	bmi.n	8004de8 <__gxx_personality_v0+0x48>
 8004dda:	6a0d      	ldr	r5, [r1, #32]
 8004ddc:	4638      	mov	r0, r7
 8004dde:	210d      	movs	r1, #13
 8004de0:	f7ff ffd2 	bl	8004d88 <_Unwind_GetGR>
 8004de4:	4285      	cmp	r5, r0
 8004de6:	d02b      	beq.n	8004e40 <__gxx_personality_v0+0xa0>
 8004de8:	2002      	movs	r0, #2
 8004dea:	2300      	movs	r3, #0
 8004dec:	f006 0608 	and.w	r6, r6, #8
 8004df0:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8004df4:	4306      	orrs	r6, r0
 8004df6:	220c      	movs	r2, #12
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	f8cd a000 	str.w	sl, [sp]
 8004e00:	940a      	str	r4, [sp, #40]	; 0x28
 8004e02:	f7fc f959 	bl	80010b8 <_Unwind_VRS_Set>
 8004e06:	2e06      	cmp	r6, #6
 8004e08:	d11c      	bne.n	8004e44 <__gxx_personality_v0+0xa4>
 8004e0a:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 8004e0e:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8004e12:	f1b8 0f00 	cmp.w	r8, #0
 8004e16:	bf0c      	ite	eq
 8004e18:	f04f 0b01 	moveq.w	fp, #1
 8004e1c:	f04f 0b03 	movne.w	fp, #3
 8004e20:	f016 0608 	ands.w	r6, r6, #8
 8004e24:	f000 8107 	beq.w	8005036 <__gxx_personality_v0+0x296>
 8004e28:	f1bb 0f01 	cmp.w	fp, #1
 8004e2c:	f040 80ff 	bne.w	800502e <__gxx_personality_v0+0x28e>
 8004e30:	f000 f95e 	bl	80050f0 <_ZSt9terminatev>
 8004e34:	2008      	movs	r0, #8
 8004e36:	e7cb      	b.n	8004dd0 <__gxx_personality_v0+0x30>
 8004e38:	f000 fb28 	bl	800548c <abort>
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	e7d4      	b.n	8004dea <__gxx_personality_v0+0x4a>
 8004e40:	2006      	movs	r0, #6
 8004e42:	e7d2      	b.n	8004dea <__gxx_personality_v0+0x4a>
 8004e44:	4638      	mov	r0, r7
 8004e46:	f7fc fec1 	bl	8001bcc <_Unwind_GetLanguageSpecificData>
 8004e4a:	4681      	mov	r9, r0
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d0b9      	beq.n	8004dc4 <__gxx_personality_v0+0x24>
 8004e50:	4652      	mov	r2, sl
 8004e52:	4601      	mov	r1, r0
 8004e54:	4638      	mov	r0, r7
 8004e56:	f7ff ff66 	bl	8004d26 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8004e5a:	4639      	mov	r1, r7
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8004e62:	f7ff ff2c 	bl	8004cbe <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004e66:	210f      	movs	r1, #15
 8004e68:	900c      	str	r0, [sp, #48]	; 0x30
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f7ff ff8c 	bl	8004d88 <_Unwind_GetGR>
 8004e70:	f020 0801 	bic.w	r8, r0, #1
 8004e74:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e7a:	42ab      	cmp	r3, r5
 8004e7c:	f240 80bf 	bls.w	8004ffe <__gxx_personality_v0+0x25e>
 8004e80:	462a      	mov	r2, r5
 8004e82:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8004e86:	ab06      	add	r3, sp, #24
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f7ff ff3c 	bl	8004d06 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004e8e:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8004e92:	4602      	mov	r2, r0
 8004e94:	ab07      	add	r3, sp, #28
 8004e96:	2000      	movs	r0, #0
 8004e98:	f7ff ff35 	bl	8004d06 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004e9c:	ab08      	add	r3, sp, #32
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	f7ff ff2e 	bl	8004d06 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004eaa:	a909      	add	r1, sp, #36	; 0x24
 8004eac:	f7ff fe9a 	bl	8004be4 <_ZL12read_uleb128PKhPm>
 8004eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eb2:	9a06      	ldr	r2, [sp, #24]
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	4413      	add	r3, r2
 8004eb8:	4543      	cmp	r3, r8
 8004eba:	d901      	bls.n	8004ec0 <__gxx_personality_v0+0x120>
 8004ebc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004ebe:	e7db      	b.n	8004e78 <__gxx_personality_v0+0xd8>
 8004ec0:	9a07      	ldr	r2, [sp, #28]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	4543      	cmp	r3, r8
 8004ec6:	d9d7      	bls.n	8004e78 <__gxx_personality_v0+0xd8>
 8004ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ecc:	f1b8 0f00 	cmp.w	r8, #0
 8004ed0:	d001      	beq.n	8004ed6 <__gxx_personality_v0+0x136>
 8004ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ed4:	4498      	add	r8, r3
 8004ed6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004ed8:	b115      	cbz	r5, 8004ee0 <__gxx_personality_v0+0x140>
 8004eda:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004edc:	3d01      	subs	r5, #1
 8004ede:	4405      	add	r5, r0
 8004ee0:	f1b8 0f00 	cmp.w	r8, #0
 8004ee4:	f43f af6e 	beq.w	8004dc4 <__gxx_personality_v0+0x24>
 8004ee8:	2d00      	cmp	r5, #0
 8004eea:	f000 80f2 	beq.w	80050d2 <__gxx_personality_v0+0x332>
 8004eee:	f016 0308 	ands.w	r3, r6, #8
 8004ef2:	9302      	str	r3, [sp, #8]
 8004ef4:	d034      	beq.n	8004f60 <__gxx_personality_v0+0x1c0>
 8004ef6:	2347      	movs	r3, #71	; 0x47
 8004ef8:	7023      	strb	r3, [r4, #0]
 8004efa:	234e      	movs	r3, #78	; 0x4e
 8004efc:	7063      	strb	r3, [r4, #1]
 8004efe:	2355      	movs	r3, #85	; 0x55
 8004f00:	70a3      	strb	r3, [r4, #2]
 8004f02:	2343      	movs	r3, #67	; 0x43
 8004f04:	70e3      	strb	r3, [r4, #3]
 8004f06:	2346      	movs	r3, #70	; 0x46
 8004f08:	7123      	strb	r3, [r4, #4]
 8004f0a:	234f      	movs	r3, #79	; 0x4f
 8004f0c:	7163      	strb	r3, [r4, #5]
 8004f0e:	2352      	movs	r3, #82	; 0x52
 8004f10:	71a3      	strb	r3, [r4, #6]
 8004f12:	2300      	movs	r3, #0
 8004f14:	71e3      	strb	r3, [r4, #7]
 8004f16:	f04f 0b00 	mov.w	fp, #0
 8004f1a:	a907      	add	r1, sp, #28
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f7ff fe70 	bl	8004c02 <_ZL12read_sleb128PKhPl>
 8004f22:	a908      	add	r1, sp, #32
 8004f24:	9003      	str	r0, [sp, #12]
 8004f26:	f7ff fe6c 	bl	8004c02 <_ZL12read_sleb128PKhPl>
 8004f2a:	9907      	ldr	r1, [sp, #28]
 8004f2c:	2900      	cmp	r1, #0
 8004f2e:	d063      	beq.n	8004ff8 <__gxx_personality_v0+0x258>
 8004f30:	dd3a      	ble.n	8004fa8 <__gxx_personality_v0+0x208>
 8004f32:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8004f36:	28ff      	cmp	r0, #255	; 0xff
 8004f38:	d032      	beq.n	8004fa0 <__gxx_personality_v0+0x200>
 8004f3a:	f000 0307 	and.w	r3, r0, #7
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	f63f af7a 	bhi.w	8004e38 <__gxx_personality_v0+0x98>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <__gxx_personality_v0+0x1ac>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004fa5 	.word	0x08004fa5
 8004f50:	08004e39 	.word	0x08004e39
 8004f54:	08004f73 	.word	0x08004f73
 8004f58:	08004fa5 	.word	0x08004fa5
 8004f5c:	08004f9d 	.word	0x08004f9d
 8004f60:	79e3      	ldrb	r3, [r4, #7]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	bf0c      	ite	eq
 8004f66:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8004f6a:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8004f6e:	9305      	str	r3, [sp, #20]
 8004f70:	e7d1      	b.n	8004f16 <__gxx_personality_v0+0x176>
 8004f72:	2502      	movs	r5, #2
 8004f74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f76:	ab09      	add	r3, sp, #36	; 0x24
 8004f78:	fb05 2211 	mls	r2, r5, r1, r2
 8004f7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f7e:	f7ff fe58 	bl	8004c32 <_ZL28read_encoded_value_with_basehjPKhPj>
 8004f82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f84:	b131      	cbz	r1, 8004f94 <__gxx_personality_v0+0x1f4>
 8004f86:	b35c      	cbz	r4, 8004fe0 <__gxx_personality_v0+0x240>
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	ab05      	add	r3, sp, #20
 8004f8e:	f7ff fda9 	bl	8004ae4 <__cxa_type_match>
 8004f92:	b328      	cbz	r0, 8004fe0 <__gxx_personality_v0+0x240>
 8004f94:	f04f 0b03 	mov.w	fp, #3
 8004f98:	9d07      	ldr	r5, [sp, #28]
 8004f9a:	e034      	b.n	8005006 <__gxx_personality_v0+0x266>
 8004f9c:	2508      	movs	r5, #8
 8004f9e:	e7e9      	b.n	8004f74 <__gxx_personality_v0+0x1d4>
 8004fa0:	2500      	movs	r5, #0
 8004fa2:	e7e7      	b.n	8004f74 <__gxx_personality_v0+0x1d4>
 8004fa4:	2504      	movs	r5, #4
 8004fa6:	e7e5      	b.n	8004f74 <__gxx_personality_v0+0x1d4>
 8004fa8:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 8004fac:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 8004fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fb2:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8004fb6:	313f      	adds	r1, #63	; 0x3f
 8004fb8:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8004fbc:	b1bc      	cbz	r4, 8004fee <__gxx_personality_v0+0x24e>
 8004fbe:	9a02      	ldr	r2, [sp, #8]
 8004fc0:	b9aa      	cbnz	r2, 8004fee <__gxx_personality_v0+0x24e>
 8004fc2:	9b05      	ldr	r3, [sp, #20]
 8004fc4:	3d04      	subs	r5, #4
 8004fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc8:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8004fcc:	2900      	cmp	r1, #0
 8004fce:	d0e1      	beq.n	8004f94 <__gxx_personality_v0+0x1f4>
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	ab09      	add	r3, sp, #36	; 0x24
 8004fd6:	4429      	add	r1, r5
 8004fd8:	f7ff fd84 	bl	8004ae4 <__cxa_type_match>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d0f3      	beq.n	8004fc8 <__gxx_personality_v0+0x228>
 8004fe0:	9d08      	ldr	r5, [sp, #32]
 8004fe2:	2d00      	cmp	r5, #0
 8004fe4:	d071      	beq.n	80050ca <__gxx_personality_v0+0x32a>
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	442b      	add	r3, r5
 8004fea:	461d      	mov	r5, r3
 8004fec:	e795      	b.n	8004f1a <__gxx_personality_v0+0x17a>
 8004fee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f4      	bne.n	8004fe0 <__gxx_personality_v0+0x240>
 8004ff6:	e7cd      	b.n	8004f94 <__gxx_personality_v0+0x1f4>
 8004ff8:	f04f 0b01 	mov.w	fp, #1
 8004ffc:	e7f0      	b.n	8004fe0 <__gxx_personality_v0+0x240>
 8004ffe:	2500      	movs	r5, #0
 8005000:	f04f 0b01 	mov.w	fp, #1
 8005004:	46a8      	mov	r8, r5
 8005006:	07f3      	lsls	r3, r6, #31
 8005008:	f57f af0a 	bpl.w	8004e20 <__gxx_personality_v0+0x80>
 800500c:	f1bb 0f02 	cmp.w	fp, #2
 8005010:	f43f aed8 	beq.w	8004dc4 <__gxx_personality_v0+0x24>
 8005014:	210d      	movs	r1, #13
 8005016:	4638      	mov	r0, r7
 8005018:	9e05      	ldr	r6, [sp, #20]
 800501a:	f7ff feb5 	bl	8004d88 <_Unwind_GetGR>
 800501e:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 8005022:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8005026:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 800502a:	2006      	movs	r0, #6
 800502c:	e6d0      	b.n	8004dd0 <__gxx_personality_v0+0x30>
 800502e:	2d00      	cmp	r5, #0
 8005030:	da22      	bge.n	8005078 <__gxx_personality_v0+0x2d8>
 8005032:	f000 f86f 	bl	8005114 <_ZSt10unexpectedv>
 8005036:	f1bb 0f01 	cmp.w	fp, #1
 800503a:	d102      	bne.n	8005042 <__gxx_personality_v0+0x2a2>
 800503c:	4620      	mov	r0, r4
 800503e:	f000 f9b4 	bl	80053aa <__cxa_call_terminate>
 8005042:	2d00      	cmp	r5, #0
 8005044:	da18      	bge.n	8005078 <__gxx_personality_v0+0x2d8>
 8005046:	4652      	mov	r2, sl
 8005048:	4649      	mov	r1, r9
 800504a:	4638      	mov	r0, r7
 800504c:	f7ff fe6b 	bl	8004d26 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8005050:	4639      	mov	r1, r7
 8005052:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005056:	f7ff fe32 	bl	8004cbe <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800505a:	43eb      	mvns	r3, r5
 800505c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800505e:	900c      	str	r0, [sp, #48]	; 0x30
 8005060:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005064:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8005068:	b10a      	cbz	r2, 800506e <__gxx_personality_v0+0x2ce>
 800506a:	3601      	adds	r6, #1
 800506c:	e7fa      	b.n	8005064 <__gxx_personality_v0+0x2c4>
 800506e:	2204      	movs	r2, #4
 8005070:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 8005074:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8005078:	2300      	movs	r3, #0
 800507a:	ae09      	add	r6, sp, #36	; 0x24
 800507c:	461a      	mov	r2, r3
 800507e:	4619      	mov	r1, r3
 8005080:	4638      	mov	r0, r7
 8005082:	9600      	str	r6, [sp, #0]
 8005084:	9409      	str	r4, [sp, #36]	; 0x24
 8005086:	f7fc f817 	bl	80010b8 <_Unwind_VRS_Set>
 800508a:	2300      	movs	r3, #0
 800508c:	2201      	movs	r2, #1
 800508e:	4619      	mov	r1, r3
 8005090:	4638      	mov	r0, r7
 8005092:	9600      	str	r6, [sp, #0]
 8005094:	9509      	str	r5, [sp, #36]	; 0x24
 8005096:	f7fc f80f 	bl	80010b8 <_Unwind_VRS_Set>
 800509a:	210f      	movs	r1, #15
 800509c:	4638      	mov	r0, r7
 800509e:	f7ff fe73 	bl	8004d88 <_Unwind_GetGR>
 80050a2:	2300      	movs	r3, #0
 80050a4:	f000 0001 	and.w	r0, r0, #1
 80050a8:	ea40 0008 	orr.w	r0, r0, r8
 80050ac:	9009      	str	r0, [sp, #36]	; 0x24
 80050ae:	220f      	movs	r2, #15
 80050b0:	4619      	mov	r1, r3
 80050b2:	4638      	mov	r0, r7
 80050b4:	9600      	str	r6, [sp, #0]
 80050b6:	f7fb ffff 	bl	80010b8 <_Unwind_VRS_Set>
 80050ba:	f1bb 0f02 	cmp.w	fp, #2
 80050be:	d102      	bne.n	80050c6 <__gxx_personality_v0+0x326>
 80050c0:	4620      	mov	r0, r4
 80050c2:	f7ff fd6d 	bl	8004ba0 <__cxa_begin_cleanup>
 80050c6:	2007      	movs	r0, #7
 80050c8:	e682      	b.n	8004dd0 <__gxx_personality_v0+0x30>
 80050ca:	f1bb 0f00 	cmp.w	fp, #0
 80050ce:	f43f ae79 	beq.w	8004dc4 <__gxx_personality_v0+0x24>
 80050d2:	f04f 0b02 	mov.w	fp, #2
 80050d6:	e796      	b.n	8005006 <__gxx_personality_v0+0x266>

080050d8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80050d8:	b508      	push	{r3, lr}
 80050da:	4780      	blx	r0
 80050dc:	f000 f9d6 	bl	800548c <abort>

080050e0 <_ZSt13get_terminatev>:
 80050e0:	4b02      	ldr	r3, [pc, #8]	; (80050ec <_ZSt13get_terminatev+0xc>)
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	f3bf 8f5b 	dmb	ish
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000014 	.word	0x20000014

080050f0 <_ZSt9terminatev>:
 80050f0:	b508      	push	{r3, lr}
 80050f2:	f7ff fff5 	bl	80050e0 <_ZSt13get_terminatev>
 80050f6:	f7ff ffef 	bl	80050d8 <_ZN10__cxxabiv111__terminateEPFvvE>

080050fa <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80050fa:	b508      	push	{r3, lr}
 80050fc:	4780      	blx	r0
 80050fe:	f7ff fff7 	bl	80050f0 <_ZSt9terminatev>
	...

08005104 <_ZSt14get_unexpectedv>:
 8005104:	4b02      	ldr	r3, [pc, #8]	; (8005110 <_ZSt14get_unexpectedv+0xc>)
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	f3bf 8f5b 	dmb	ish
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000010 	.word	0x20000010

08005114 <_ZSt10unexpectedv>:
 8005114:	b508      	push	{r3, lr}
 8005116:	f7ff fff5 	bl	8005104 <_ZSt14get_unexpectedv>
 800511a:	f7ff ffee 	bl	80050fa <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800511e <_Znwj>:
 800511e:	2801      	cmp	r0, #1
 8005120:	bf38      	it	cc
 8005122:	2001      	movcc	r0, #1
 8005124:	b510      	push	{r4, lr}
 8005126:	4604      	mov	r4, r0
 8005128:	4620      	mov	r0, r4
 800512a:	f000 f9e1 	bl	80054f0 <malloc>
 800512e:	b930      	cbnz	r0, 800513e <_Znwj+0x20>
 8005130:	f000 f9a4 	bl	800547c <_ZSt15get_new_handlerv>
 8005134:	b908      	cbnz	r0, 800513a <_Znwj+0x1c>
 8005136:	f000 f9a9 	bl	800548c <abort>
 800513a:	4780      	blx	r0
 800513c:	e7f4      	b.n	8005128 <_Znwj+0xa>
 800513e:	bd10      	pop	{r4, pc}

08005140 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005140:	b510      	push	{r4, lr}
 8005142:	4604      	mov	r4, r0
 8005144:	4b02      	ldr	r3, [pc, #8]	; (8005150 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005146:	6003      	str	r3, [r0, #0]
 8005148:	f000 f8be 	bl	80052c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800514c:	4620      	mov	r0, r4
 800514e:	bd10      	pop	{r4, pc}
 8005150:	08005898 	.word	0x08005898

08005154 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005154:	b510      	push	{r4, lr}
 8005156:	4604      	mov	r4, r0
 8005158:	f7ff fff2 	bl	8005140 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 800515c:	4620      	mov	r0, r4
 800515e:	210c      	movs	r1, #12
 8005160:	f7ff fca0 	bl	8004aa4 <_ZdlPvj>
 8005164:	4620      	mov	r0, r4
 8005166:	bd10      	pop	{r4, pc}

08005168 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800516c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005170:	4606      	mov	r6, r0
 8005172:	4590      	cmp	r8, r2
 8005174:	460f      	mov	r7, r1
 8005176:	4615      	mov	r5, r2
 8005178:	461c      	mov	r4, r3
 800517a:	d00b      	beq.n	8005194 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 800517c:	68b0      	ldr	r0, [r6, #8]
 800517e:	462a      	mov	r2, r5
 8005180:	6803      	ldr	r3, [r0, #0]
 8005182:	f8cd 8018 	str.w	r8, [sp, #24]
 8005186:	6a1e      	ldr	r6, [r3, #32]
 8005188:	4639      	mov	r1, r7
 800518a:	4623      	mov	r3, r4
 800518c:	46b4      	mov	ip, r6
 800518e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005192:	4760      	bx	ip
 8005194:	4619      	mov	r1, r3
 8005196:	f000 f857 	bl	8005248 <_ZNKSt9type_infoeqERKS_>
 800519a:	2800      	cmp	r0, #0
 800519c:	d0ee      	beq.n	800517c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 800519e:	2006      	movs	r0, #6
 80051a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080051a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80051a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a8:	460d      	mov	r5, r1
 80051aa:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80051ae:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80051b2:	4619      	mov	r1, r3
 80051b4:	4681      	mov	r9, r0
 80051b6:	4617      	mov	r7, r2
 80051b8:	4698      	mov	r8, r3
 80051ba:	f000 f845 	bl	8005248 <_ZNKSt9type_infoeqERKS_>
 80051be:	b190      	cbz	r0, 80051e6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80051c0:	2d00      	cmp	r5, #0
 80051c2:	6034      	str	r4, [r6, #0]
 80051c4:	7137      	strb	r7, [r6, #4]
 80051c6:	db09      	blt.n	80051dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80051c8:	442c      	add	r4, r5
 80051ca:	45a2      	cmp	sl, r4
 80051cc:	bf0c      	ite	eq
 80051ce:	2406      	moveq	r4, #6
 80051d0:	2401      	movne	r4, #1
 80051d2:	71b4      	strb	r4, [r6, #6]
 80051d4:	2000      	movs	r0, #0
 80051d6:	b001      	add	sp, #4
 80051d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051dc:	3502      	adds	r5, #2
 80051de:	d1f9      	bne.n	80051d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80051e0:	2301      	movs	r3, #1
 80051e2:	71b3      	strb	r3, [r6, #6]
 80051e4:	e7f6      	b.n	80051d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80051e6:	4554      	cmp	r4, sl
 80051e8:	d106      	bne.n	80051f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80051ea:	4659      	mov	r1, fp
 80051ec:	4648      	mov	r0, r9
 80051ee:	f000 f82b 	bl	8005248 <_ZNKSt9type_infoeqERKS_>
 80051f2:	b108      	cbz	r0, 80051f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80051f4:	7177      	strb	r7, [r6, #5]
 80051f6:	e7ed      	b.n	80051d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80051f8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80051fc:	463a      	mov	r2, r7
 80051fe:	6803      	ldr	r3, [r0, #0]
 8005200:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8005204:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8005208:	69dc      	ldr	r4, [r3, #28]
 800520a:	4629      	mov	r1, r5
 800520c:	4643      	mov	r3, r8
 800520e:	46a4      	mov	ip, r4
 8005210:	b001      	add	sp, #4
 8005212:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005216:	4760      	bx	ip

08005218 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800521c:	4607      	mov	r7, r0
 800521e:	460c      	mov	r4, r1
 8005220:	4615      	mov	r5, r2
 8005222:	461e      	mov	r6, r3
 8005224:	f000 f883 	bl	800532e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005228:	b948      	cbnz	r0, 800523e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800522a:	68b8      	ldr	r0, [r7, #8]
 800522c:	462a      	mov	r2, r5
 800522e:	6803      	ldr	r3, [r0, #0]
 8005230:	4621      	mov	r1, r4
 8005232:	699f      	ldr	r7, [r3, #24]
 8005234:	4633      	mov	r3, r6
 8005236:	46bc      	mov	ip, r7
 8005238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800523c:	4760      	bx	ip
 800523e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005242 <_ZNSt9type_infoD1Ev>:
 8005242:	4770      	bx	lr

08005244 <_ZNKSt9type_info14__is_pointer_pEv>:
 8005244:	2000      	movs	r0, #0
 8005246:	4770      	bx	lr

08005248 <_ZNKSt9type_infoeqERKS_>:
 8005248:	4281      	cmp	r1, r0
 800524a:	b508      	push	{r3, lr}
 800524c:	d00e      	beq.n	800526c <_ZNKSt9type_infoeqERKS_+0x24>
 800524e:	6840      	ldr	r0, [r0, #4]
 8005250:	7803      	ldrb	r3, [r0, #0]
 8005252:	2b2a      	cmp	r3, #42	; 0x2a
 8005254:	d00c      	beq.n	8005270 <_ZNKSt9type_infoeqERKS_+0x28>
 8005256:	6849      	ldr	r1, [r1, #4]
 8005258:	780b      	ldrb	r3, [r1, #0]
 800525a:	2b2a      	cmp	r3, #42	; 0x2a
 800525c:	bf08      	it	eq
 800525e:	3101      	addeq	r1, #1
 8005260:	f7fa ff76 	bl	8000150 <strcmp>
 8005264:	fab0 f080 	clz	r0, r0
 8005268:	0940      	lsrs	r0, r0, #5
 800526a:	bd08      	pop	{r3, pc}
 800526c:	2001      	movs	r0, #1
 800526e:	e7fc      	b.n	800526a <_ZNKSt9type_infoeqERKS_+0x22>
 8005270:	2000      	movs	r0, #0
 8005272:	e7fa      	b.n	800526a <_ZNKSt9type_infoeqERKS_+0x22>

08005274 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8005274:	684b      	ldr	r3, [r1, #4]
 8005276:	6001      	str	r1, [r0, #0]
 8005278:	6043      	str	r3, [r0, #4]
 800527a:	684b      	ldr	r3, [r1, #4]
 800527c:	6018      	str	r0, [r3, #0]
 800527e:	6048      	str	r0, [r1, #4]
 8005280:	4770      	bx	lr

08005282 <_ZSt17__throw_bad_allocv>:
 8005282:	b508      	push	{r3, lr}
 8005284:	f000 f902 	bl	800548c <abort>

08005288 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8005288:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800528a:	2400      	movs	r4, #0
 800528c:	2310      	movs	r3, #16
 800528e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005292:	6803      	ldr	r3, [r0, #0]
 8005294:	4615      	mov	r5, r2
 8005296:	699e      	ldr	r6, [r3, #24]
 8005298:	e9cd 4400 	strd	r4, r4, [sp]
 800529c:	466b      	mov	r3, sp
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	47b0      	blx	r6
 80052a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80052a6:	f003 0306 	and.w	r3, r3, #6
 80052aa:	2b06      	cmp	r3, #6
 80052ac:	bf09      	itett	eq
 80052ae:	2001      	moveq	r0, #1
 80052b0:	4620      	movne	r0, r4
 80052b2:	9b00      	ldreq	r3, [sp, #0]
 80052b4:	602b      	streq	r3, [r5, #0]
 80052b6:	b004      	add	sp, #16
 80052b8:	bd70      	pop	{r4, r5, r6, pc}

080052ba <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80052ba:	9800      	ldr	r0, [sp, #0]
 80052bc:	4290      	cmp	r0, r2
 80052be:	bf14      	ite	ne
 80052c0:	2001      	movne	r0, #1
 80052c2:	2006      	moveq	r0, #6
 80052c4:	4770      	bx	lr
	...

080052c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80052c8:	b510      	push	{r4, lr}
 80052ca:	4604      	mov	r4, r0
 80052cc:	4b02      	ldr	r3, [pc, #8]	; (80052d8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80052ce:	6003      	str	r3, [r0, #0]
 80052d0:	f7ff ffb7 	bl	8005242 <_ZNSt9type_infoD1Ev>
 80052d4:	4620      	mov	r0, r4
 80052d6:	bd10      	pop	{r4, pc}
 80052d8:	0800590c 	.word	0x0800590c

080052dc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80052dc:	b510      	push	{r4, lr}
 80052de:	4604      	mov	r4, r0
 80052e0:	f7ff fff2 	bl	80052c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80052e4:	4620      	mov	r0, r4
 80052e6:	2108      	movs	r1, #8
 80052e8:	f7ff fbdc 	bl	8004aa4 <_ZdlPvj>
 80052ec:	4620      	mov	r0, r4
 80052ee:	bd10      	pop	{r4, pc}

080052f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80052f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80052f8:	461f      	mov	r7, r3
 80052fa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80052fe:	4598      	cmp	r8, r3
 8005300:	4606      	mov	r6, r0
 8005302:	4615      	mov	r5, r2
 8005304:	d107      	bne.n	8005316 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8005306:	9907      	ldr	r1, [sp, #28]
 8005308:	f7ff ff9e 	bl	8005248 <_ZNKSt9type_infoeqERKS_>
 800530c:	b118      	cbz	r0, 8005316 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800530e:	7165      	strb	r5, [r4, #5]
 8005310:	2000      	movs	r0, #0
 8005312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005316:	4639      	mov	r1, r7
 8005318:	4630      	mov	r0, r6
 800531a:	f7ff ff95 	bl	8005248 <_ZNKSt9type_infoeqERKS_>
 800531e:	2800      	cmp	r0, #0
 8005320:	d0f6      	beq.n	8005310 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8005322:	2301      	movs	r3, #1
 8005324:	f8c4 8000 	str.w	r8, [r4]
 8005328:	7125      	strb	r5, [r4, #4]
 800532a:	71a3      	strb	r3, [r4, #6]
 800532c:	e7f0      	b.n	8005310 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0800532e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800532e:	b538      	push	{r3, r4, r5, lr}
 8005330:	4615      	mov	r5, r2
 8005332:	461c      	mov	r4, r3
 8005334:	f7ff ff88 	bl	8005248 <_ZNKSt9type_infoeqERKS_>
 8005338:	b120      	cbz	r0, 8005344 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800533a:	2308      	movs	r3, #8
 800533c:	60e3      	str	r3, [r4, #12]
 800533e:	2306      	movs	r3, #6
 8005340:	6025      	str	r5, [r4, #0]
 8005342:	7123      	strb	r3, [r4, #4]
 8005344:	bd38      	pop	{r3, r4, r5, pc}

08005346 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8005346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800534a:	4605      	mov	r5, r0
 800534c:	460c      	mov	r4, r1
 800534e:	4616      	mov	r6, r2
 8005350:	461f      	mov	r7, r3
 8005352:	f7ff ff79 	bl	8005248 <_ZNKSt9type_infoeqERKS_>
 8005356:	b948      	cbnz	r0, 800536c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005358:	2f03      	cmp	r7, #3
 800535a:	d807      	bhi.n	800536c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	4632      	mov	r2, r6
 8005360:	4629      	mov	r1, r5
 8005362:	4620      	mov	r0, r4
 8005364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	4718      	bx	r3
 800536c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005370 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8005370:	7803      	ldrb	r3, [r0, #0]
 8005372:	2b47      	cmp	r3, #71	; 0x47
 8005374:	d117      	bne.n	80053a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005376:	7843      	ldrb	r3, [r0, #1]
 8005378:	2b4e      	cmp	r3, #78	; 0x4e
 800537a:	d114      	bne.n	80053a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800537c:	7883      	ldrb	r3, [r0, #2]
 800537e:	2b55      	cmp	r3, #85	; 0x55
 8005380:	d111      	bne.n	80053a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005382:	78c3      	ldrb	r3, [r0, #3]
 8005384:	2b43      	cmp	r3, #67	; 0x43
 8005386:	d10e      	bne.n	80053a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005388:	7903      	ldrb	r3, [r0, #4]
 800538a:	2b43      	cmp	r3, #67	; 0x43
 800538c:	d10b      	bne.n	80053a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800538e:	7943      	ldrb	r3, [r0, #5]
 8005390:	2b2b      	cmp	r3, #43	; 0x2b
 8005392:	d108      	bne.n	80053a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005394:	7983      	ldrb	r3, [r0, #6]
 8005396:	2b2b      	cmp	r3, #43	; 0x2b
 8005398:	d105      	bne.n	80053a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800539a:	79c0      	ldrb	r0, [r0, #7]
 800539c:	2801      	cmp	r0, #1
 800539e:	bf8c      	ite	hi
 80053a0:	2000      	movhi	r0, #0
 80053a2:	2001      	movls	r0, #1
 80053a4:	4770      	bx	lr
 80053a6:	2000      	movs	r0, #0
 80053a8:	4770      	bx	lr

080053aa <__cxa_call_terminate>:
 80053aa:	b510      	push	{r4, lr}
 80053ac:	4604      	mov	r4, r0
 80053ae:	b148      	cbz	r0, 80053c4 <__cxa_call_terminate+0x1a>
 80053b0:	f000 f83b 	bl	800542a <__cxa_begin_catch>
 80053b4:	4620      	mov	r0, r4
 80053b6:	f7ff ffdb 	bl	8005370 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80053ba:	b118      	cbz	r0, 80053c4 <__cxa_call_terminate+0x1a>
 80053bc:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80053c0:	f7ff fe8a 	bl	80050d8 <_ZN10__cxxabiv111__terminateEPFvvE>
 80053c4:	f7ff fe94 	bl	80050f0 <_ZSt9terminatev>

080053c8 <__cxa_call_unexpected>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4602      	mov	r2, r0
 80053cc:	f7ff ffd0 	bl	8005370 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80053d0:	4604      	mov	r4, r0
 80053d2:	b140      	cbz	r0, 80053e6 <__cxa_call_unexpected+0x1e>
 80053d4:	2500      	movs	r5, #0
 80053d6:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80053da:	4610      	mov	r0, r2
 80053dc:	f000 f825 	bl	800542a <__cxa_begin_catch>
 80053e0:	b11d      	cbz	r5, 80053ea <__cxa_call_unexpected+0x22>
 80053e2:	f7ff fe97 	bl	8005114 <_ZSt10unexpectedv>
 80053e6:	2501      	movs	r5, #1
 80053e8:	e7f7      	b.n	80053da <__cxa_call_unexpected+0x12>
 80053ea:	4620      	mov	r0, r4
 80053ec:	f7ff fe85 	bl	80050fa <_ZN10__cxxabiv112__unexpectedEPFvvE>

080053f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80053f0:	7803      	ldrb	r3, [r0, #0]
 80053f2:	2b47      	cmp	r3, #71	; 0x47
 80053f4:	d117      	bne.n	8005426 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053f6:	7843      	ldrb	r3, [r0, #1]
 80053f8:	2b4e      	cmp	r3, #78	; 0x4e
 80053fa:	d114      	bne.n	8005426 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053fc:	7883      	ldrb	r3, [r0, #2]
 80053fe:	2b55      	cmp	r3, #85	; 0x55
 8005400:	d111      	bne.n	8005426 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005402:	78c3      	ldrb	r3, [r0, #3]
 8005404:	2b43      	cmp	r3, #67	; 0x43
 8005406:	d10e      	bne.n	8005426 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005408:	7903      	ldrb	r3, [r0, #4]
 800540a:	2b43      	cmp	r3, #67	; 0x43
 800540c:	d10b      	bne.n	8005426 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800540e:	7943      	ldrb	r3, [r0, #5]
 8005410:	2b2b      	cmp	r3, #43	; 0x2b
 8005412:	d108      	bne.n	8005426 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005414:	7983      	ldrb	r3, [r0, #6]
 8005416:	2b2b      	cmp	r3, #43	; 0x2b
 8005418:	d105      	bne.n	8005426 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800541a:	79c0      	ldrb	r0, [r0, #7]
 800541c:	2801      	cmp	r0, #1
 800541e:	bf8c      	ite	hi
 8005420:	2000      	movhi	r0, #0
 8005422:	2001      	movls	r0, #1
 8005424:	4770      	bx	lr
 8005426:	2000      	movs	r0, #0
 8005428:	4770      	bx	lr

0800542a <__cxa_begin_catch>:
 800542a:	b538      	push	{r3, r4, r5, lr}
 800542c:	4604      	mov	r4, r0
 800542e:	f7ff fbd5 	bl	8004bdc <__cxa_get_globals>
 8005432:	4602      	mov	r2, r0
 8005434:	6805      	ldr	r5, [r0, #0]
 8005436:	4620      	mov	r0, r4
 8005438:	f1a4 0120 	sub.w	r1, r4, #32
 800543c:	f7ff ffd8 	bl	80053f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005440:	b928      	cbnz	r0, 800544e <__cxa_begin_catch+0x24>
 8005442:	b10d      	cbz	r5, 8005448 <__cxa_begin_catch+0x1e>
 8005444:	f7ff fe54 	bl	80050f0 <_ZSt9terminatev>
 8005448:	6011      	str	r1, [r2, #0]
 800544a:	4628      	mov	r0, r5
 800544c:	bd38      	pop	{r3, r4, r5, pc}
 800544e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8005452:	4620      	mov	r0, r4
 8005454:	2b00      	cmp	r3, #0
 8005456:	bfb4      	ite	lt
 8005458:	f1c3 0301 	rsblt	r3, r3, #1
 800545c:	3301      	addge	r3, #1
 800545e:	f844 3c0c 	str.w	r3, [r4, #-12]
 8005462:	6853      	ldr	r3, [r2, #4]
 8005464:	428d      	cmp	r5, r1
 8005466:	f103 33ff 	add.w	r3, r3, #4294967295
 800546a:	6053      	str	r3, [r2, #4]
 800546c:	bf1c      	itt	ne
 800546e:	f844 5c10 	strne.w	r5, [r4, #-16]
 8005472:	6011      	strne	r1, [r2, #0]
 8005474:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005476:	f7fb fdf1 	bl	800105c <_Unwind_Complete>
 800547a:	e7e6      	b.n	800544a <__cxa_begin_catch+0x20>

0800547c <_ZSt15get_new_handlerv>:
 800547c:	4b02      	ldr	r3, [pc, #8]	; (8005488 <_ZSt15get_new_handlerv+0xc>)
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	f3bf 8f5b 	dmb	ish
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20000218 	.word	0x20000218

0800548c <abort>:
 800548c:	2006      	movs	r0, #6
 800548e:	b508      	push	{r3, lr}
 8005490:	f000 f968 	bl	8005764 <raise>
 8005494:	2001      	movs	r0, #1
 8005496:	f7fe f8b3 	bl	8003600 <_exit>
	...

0800549c <__errno>:
 800549c:	4b01      	ldr	r3, [pc, #4]	; (80054a4 <__errno+0x8>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000018 	.word	0x20000018

080054a8 <__libc_init_array>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	2600      	movs	r6, #0
 80054ac:	4d0c      	ldr	r5, [pc, #48]	; (80054e0 <__libc_init_array+0x38>)
 80054ae:	4c0d      	ldr	r4, [pc, #52]	; (80054e4 <__libc_init_array+0x3c>)
 80054b0:	1b64      	subs	r4, r4, r5
 80054b2:	10a4      	asrs	r4, r4, #2
 80054b4:	42a6      	cmp	r6, r4
 80054b6:	d109      	bne.n	80054cc <__libc_init_array+0x24>
 80054b8:	f000 f984 	bl	80057c4 <_init>
 80054bc:	2600      	movs	r6, #0
 80054be:	4d0a      	ldr	r5, [pc, #40]	; (80054e8 <__libc_init_array+0x40>)
 80054c0:	4c0a      	ldr	r4, [pc, #40]	; (80054ec <__libc_init_array+0x44>)
 80054c2:	1b64      	subs	r4, r4, r5
 80054c4:	10a4      	asrs	r4, r4, #2
 80054c6:	42a6      	cmp	r6, r4
 80054c8:	d105      	bne.n	80054d6 <__libc_init_array+0x2e>
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
 80054cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d0:	4798      	blx	r3
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7ee      	b.n	80054b4 <__libc_init_array+0xc>
 80054d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054da:	4798      	blx	r3
 80054dc:	3601      	adds	r6, #1
 80054de:	e7f2      	b.n	80054c6 <__libc_init_array+0x1e>
 80054e0:	08005c80 	.word	0x08005c80
 80054e4:	08005c80 	.word	0x08005c80
 80054e8:	08005c80 	.word	0x08005c80
 80054ec:	08005c90 	.word	0x08005c90

080054f0 <malloc>:
 80054f0:	4b02      	ldr	r3, [pc, #8]	; (80054fc <malloc+0xc>)
 80054f2:	4601      	mov	r1, r0
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	f000 b889 	b.w	800560c <_malloc_r>
 80054fa:	bf00      	nop
 80054fc:	20000018 	.word	0x20000018

08005500 <free>:
 8005500:	4b02      	ldr	r3, [pc, #8]	; (800550c <free+0xc>)
 8005502:	4601      	mov	r1, r0
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	f000 b819 	b.w	800553c <_free_r>
 800550a:	bf00      	nop
 800550c:	20000018 	.word	0x20000018

08005510 <memcpy>:
 8005510:	440a      	add	r2, r1
 8005512:	4291      	cmp	r1, r2
 8005514:	f100 33ff 	add.w	r3, r0, #4294967295
 8005518:	d100      	bne.n	800551c <memcpy+0xc>
 800551a:	4770      	bx	lr
 800551c:	b510      	push	{r4, lr}
 800551e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005522:	4291      	cmp	r1, r2
 8005524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005528:	d1f9      	bne.n	800551e <memcpy+0xe>
 800552a:	bd10      	pop	{r4, pc}

0800552c <memset>:
 800552c:	4603      	mov	r3, r0
 800552e:	4402      	add	r2, r0
 8005530:	4293      	cmp	r3, r2
 8005532:	d100      	bne.n	8005536 <memset+0xa>
 8005534:	4770      	bx	lr
 8005536:	f803 1b01 	strb.w	r1, [r3], #1
 800553a:	e7f9      	b.n	8005530 <memset+0x4>

0800553c <_free_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4605      	mov	r5, r0
 8005540:	2900      	cmp	r1, #0
 8005542:	d040      	beq.n	80055c6 <_free_r+0x8a>
 8005544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005548:	1f0c      	subs	r4, r1, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	bfb8      	it	lt
 800554e:	18e4      	addlt	r4, r4, r3
 8005550:	f000 f924 	bl	800579c <__malloc_lock>
 8005554:	4a1c      	ldr	r2, [pc, #112]	; (80055c8 <_free_r+0x8c>)
 8005556:	6813      	ldr	r3, [r2, #0]
 8005558:	b933      	cbnz	r3, 8005568 <_free_r+0x2c>
 800555a:	6063      	str	r3, [r4, #4]
 800555c:	6014      	str	r4, [r2, #0]
 800555e:	4628      	mov	r0, r5
 8005560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005564:	f000 b920 	b.w	80057a8 <__malloc_unlock>
 8005568:	42a3      	cmp	r3, r4
 800556a:	d908      	bls.n	800557e <_free_r+0x42>
 800556c:	6820      	ldr	r0, [r4, #0]
 800556e:	1821      	adds	r1, r4, r0
 8005570:	428b      	cmp	r3, r1
 8005572:	bf01      	itttt	eq
 8005574:	6819      	ldreq	r1, [r3, #0]
 8005576:	685b      	ldreq	r3, [r3, #4]
 8005578:	1809      	addeq	r1, r1, r0
 800557a:	6021      	streq	r1, [r4, #0]
 800557c:	e7ed      	b.n	800555a <_free_r+0x1e>
 800557e:	461a      	mov	r2, r3
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	b10b      	cbz	r3, 8005588 <_free_r+0x4c>
 8005584:	42a3      	cmp	r3, r4
 8005586:	d9fa      	bls.n	800557e <_free_r+0x42>
 8005588:	6811      	ldr	r1, [r2, #0]
 800558a:	1850      	adds	r0, r2, r1
 800558c:	42a0      	cmp	r0, r4
 800558e:	d10b      	bne.n	80055a8 <_free_r+0x6c>
 8005590:	6820      	ldr	r0, [r4, #0]
 8005592:	4401      	add	r1, r0
 8005594:	1850      	adds	r0, r2, r1
 8005596:	4283      	cmp	r3, r0
 8005598:	6011      	str	r1, [r2, #0]
 800559a:	d1e0      	bne.n	800555e <_free_r+0x22>
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4401      	add	r1, r0
 80055a2:	6011      	str	r1, [r2, #0]
 80055a4:	6053      	str	r3, [r2, #4]
 80055a6:	e7da      	b.n	800555e <_free_r+0x22>
 80055a8:	d902      	bls.n	80055b0 <_free_r+0x74>
 80055aa:	230c      	movs	r3, #12
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	e7d6      	b.n	800555e <_free_r+0x22>
 80055b0:	6820      	ldr	r0, [r4, #0]
 80055b2:	1821      	adds	r1, r4, r0
 80055b4:	428b      	cmp	r3, r1
 80055b6:	bf01      	itttt	eq
 80055b8:	6819      	ldreq	r1, [r3, #0]
 80055ba:	685b      	ldreq	r3, [r3, #4]
 80055bc:	1809      	addeq	r1, r1, r0
 80055be:	6021      	streq	r1, [r4, #0]
 80055c0:	6063      	str	r3, [r4, #4]
 80055c2:	6054      	str	r4, [r2, #4]
 80055c4:	e7cb      	b.n	800555e <_free_r+0x22>
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	2000021c 	.word	0x2000021c

080055cc <sbrk_aligned>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	4e0e      	ldr	r6, [pc, #56]	; (8005608 <sbrk_aligned+0x3c>)
 80055d0:	460c      	mov	r4, r1
 80055d2:	6831      	ldr	r1, [r6, #0]
 80055d4:	4605      	mov	r5, r0
 80055d6:	b911      	cbnz	r1, 80055de <sbrk_aligned+0x12>
 80055d8:	f000 f88c 	bl	80056f4 <_sbrk_r>
 80055dc:	6030      	str	r0, [r6, #0]
 80055de:	4621      	mov	r1, r4
 80055e0:	4628      	mov	r0, r5
 80055e2:	f000 f887 	bl	80056f4 <_sbrk_r>
 80055e6:	1c43      	adds	r3, r0, #1
 80055e8:	d00a      	beq.n	8005600 <sbrk_aligned+0x34>
 80055ea:	1cc4      	adds	r4, r0, #3
 80055ec:	f024 0403 	bic.w	r4, r4, #3
 80055f0:	42a0      	cmp	r0, r4
 80055f2:	d007      	beq.n	8005604 <sbrk_aligned+0x38>
 80055f4:	1a21      	subs	r1, r4, r0
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 f87c 	bl	80056f4 <_sbrk_r>
 80055fc:	3001      	adds	r0, #1
 80055fe:	d101      	bne.n	8005604 <sbrk_aligned+0x38>
 8005600:	f04f 34ff 	mov.w	r4, #4294967295
 8005604:	4620      	mov	r0, r4
 8005606:	bd70      	pop	{r4, r5, r6, pc}
 8005608:	20000220 	.word	0x20000220

0800560c <_malloc_r>:
 800560c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005610:	1ccd      	adds	r5, r1, #3
 8005612:	f025 0503 	bic.w	r5, r5, #3
 8005616:	3508      	adds	r5, #8
 8005618:	2d0c      	cmp	r5, #12
 800561a:	bf38      	it	cc
 800561c:	250c      	movcc	r5, #12
 800561e:	2d00      	cmp	r5, #0
 8005620:	4607      	mov	r7, r0
 8005622:	db01      	blt.n	8005628 <_malloc_r+0x1c>
 8005624:	42a9      	cmp	r1, r5
 8005626:	d905      	bls.n	8005634 <_malloc_r+0x28>
 8005628:	230c      	movs	r3, #12
 800562a:	2600      	movs	r6, #0
 800562c:	603b      	str	r3, [r7, #0]
 800562e:	4630      	mov	r0, r6
 8005630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005634:	4e2e      	ldr	r6, [pc, #184]	; (80056f0 <_malloc_r+0xe4>)
 8005636:	f000 f8b1 	bl	800579c <__malloc_lock>
 800563a:	6833      	ldr	r3, [r6, #0]
 800563c:	461c      	mov	r4, r3
 800563e:	bb34      	cbnz	r4, 800568e <_malloc_r+0x82>
 8005640:	4629      	mov	r1, r5
 8005642:	4638      	mov	r0, r7
 8005644:	f7ff ffc2 	bl	80055cc <sbrk_aligned>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	4604      	mov	r4, r0
 800564c:	d14d      	bne.n	80056ea <_malloc_r+0xde>
 800564e:	6834      	ldr	r4, [r6, #0]
 8005650:	4626      	mov	r6, r4
 8005652:	2e00      	cmp	r6, #0
 8005654:	d140      	bne.n	80056d8 <_malloc_r+0xcc>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	4631      	mov	r1, r6
 800565a:	4638      	mov	r0, r7
 800565c:	eb04 0803 	add.w	r8, r4, r3
 8005660:	f000 f848 	bl	80056f4 <_sbrk_r>
 8005664:	4580      	cmp	r8, r0
 8005666:	d13a      	bne.n	80056de <_malloc_r+0xd2>
 8005668:	6821      	ldr	r1, [r4, #0]
 800566a:	3503      	adds	r5, #3
 800566c:	1a6d      	subs	r5, r5, r1
 800566e:	f025 0503 	bic.w	r5, r5, #3
 8005672:	3508      	adds	r5, #8
 8005674:	2d0c      	cmp	r5, #12
 8005676:	bf38      	it	cc
 8005678:	250c      	movcc	r5, #12
 800567a:	4638      	mov	r0, r7
 800567c:	4629      	mov	r1, r5
 800567e:	f7ff ffa5 	bl	80055cc <sbrk_aligned>
 8005682:	3001      	adds	r0, #1
 8005684:	d02b      	beq.n	80056de <_malloc_r+0xd2>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	442b      	add	r3, r5
 800568a:	6023      	str	r3, [r4, #0]
 800568c:	e00e      	b.n	80056ac <_malloc_r+0xa0>
 800568e:	6822      	ldr	r2, [r4, #0]
 8005690:	1b52      	subs	r2, r2, r5
 8005692:	d41e      	bmi.n	80056d2 <_malloc_r+0xc6>
 8005694:	2a0b      	cmp	r2, #11
 8005696:	d916      	bls.n	80056c6 <_malloc_r+0xba>
 8005698:	1961      	adds	r1, r4, r5
 800569a:	42a3      	cmp	r3, r4
 800569c:	6025      	str	r5, [r4, #0]
 800569e:	bf18      	it	ne
 80056a0:	6059      	strne	r1, [r3, #4]
 80056a2:	6863      	ldr	r3, [r4, #4]
 80056a4:	bf08      	it	eq
 80056a6:	6031      	streq	r1, [r6, #0]
 80056a8:	5162      	str	r2, [r4, r5]
 80056aa:	604b      	str	r3, [r1, #4]
 80056ac:	4638      	mov	r0, r7
 80056ae:	f104 060b 	add.w	r6, r4, #11
 80056b2:	f000 f879 	bl	80057a8 <__malloc_unlock>
 80056b6:	f026 0607 	bic.w	r6, r6, #7
 80056ba:	1d23      	adds	r3, r4, #4
 80056bc:	1af2      	subs	r2, r6, r3
 80056be:	d0b6      	beq.n	800562e <_malloc_r+0x22>
 80056c0:	1b9b      	subs	r3, r3, r6
 80056c2:	50a3      	str	r3, [r4, r2]
 80056c4:	e7b3      	b.n	800562e <_malloc_r+0x22>
 80056c6:	6862      	ldr	r2, [r4, #4]
 80056c8:	42a3      	cmp	r3, r4
 80056ca:	bf0c      	ite	eq
 80056cc:	6032      	streq	r2, [r6, #0]
 80056ce:	605a      	strne	r2, [r3, #4]
 80056d0:	e7ec      	b.n	80056ac <_malloc_r+0xa0>
 80056d2:	4623      	mov	r3, r4
 80056d4:	6864      	ldr	r4, [r4, #4]
 80056d6:	e7b2      	b.n	800563e <_malloc_r+0x32>
 80056d8:	4634      	mov	r4, r6
 80056da:	6876      	ldr	r6, [r6, #4]
 80056dc:	e7b9      	b.n	8005652 <_malloc_r+0x46>
 80056de:	230c      	movs	r3, #12
 80056e0:	4638      	mov	r0, r7
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	f000 f860 	bl	80057a8 <__malloc_unlock>
 80056e8:	e7a1      	b.n	800562e <_malloc_r+0x22>
 80056ea:	6025      	str	r5, [r4, #0]
 80056ec:	e7de      	b.n	80056ac <_malloc_r+0xa0>
 80056ee:	bf00      	nop
 80056f0:	2000021c 	.word	0x2000021c

080056f4 <_sbrk_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	2300      	movs	r3, #0
 80056f8:	4d05      	ldr	r5, [pc, #20]	; (8005710 <_sbrk_r+0x1c>)
 80056fa:	4604      	mov	r4, r0
 80056fc:	4608      	mov	r0, r1
 80056fe:	602b      	str	r3, [r5, #0]
 8005700:	f7fd ff84 	bl	800360c <_sbrk>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	d102      	bne.n	800570e <_sbrk_r+0x1a>
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	b103      	cbz	r3, 800570e <_sbrk_r+0x1a>
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	20000224 	.word	0x20000224

08005714 <_raise_r>:
 8005714:	291f      	cmp	r1, #31
 8005716:	b538      	push	{r3, r4, r5, lr}
 8005718:	4604      	mov	r4, r0
 800571a:	460d      	mov	r5, r1
 800571c:	d904      	bls.n	8005728 <_raise_r+0x14>
 800571e:	2316      	movs	r3, #22
 8005720:	6003      	str	r3, [r0, #0]
 8005722:	f04f 30ff 	mov.w	r0, #4294967295
 8005726:	bd38      	pop	{r3, r4, r5, pc}
 8005728:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800572a:	b112      	cbz	r2, 8005732 <_raise_r+0x1e>
 800572c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005730:	b94b      	cbnz	r3, 8005746 <_raise_r+0x32>
 8005732:	4620      	mov	r0, r4
 8005734:	f000 f830 	bl	8005798 <_getpid_r>
 8005738:	462a      	mov	r2, r5
 800573a:	4601      	mov	r1, r0
 800573c:	4620      	mov	r0, r4
 800573e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005742:	f000 b817 	b.w	8005774 <_kill_r>
 8005746:	2b01      	cmp	r3, #1
 8005748:	d00a      	beq.n	8005760 <_raise_r+0x4c>
 800574a:	1c59      	adds	r1, r3, #1
 800574c:	d103      	bne.n	8005756 <_raise_r+0x42>
 800574e:	2316      	movs	r3, #22
 8005750:	6003      	str	r3, [r0, #0]
 8005752:	2001      	movs	r0, #1
 8005754:	e7e7      	b.n	8005726 <_raise_r+0x12>
 8005756:	2400      	movs	r4, #0
 8005758:	4628      	mov	r0, r5
 800575a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800575e:	4798      	blx	r3
 8005760:	2000      	movs	r0, #0
 8005762:	e7e0      	b.n	8005726 <_raise_r+0x12>

08005764 <raise>:
 8005764:	4b02      	ldr	r3, [pc, #8]	; (8005770 <raise+0xc>)
 8005766:	4601      	mov	r1, r0
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	f7ff bfd3 	b.w	8005714 <_raise_r>
 800576e:	bf00      	nop
 8005770:	20000018 	.word	0x20000018

08005774 <_kill_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	2300      	movs	r3, #0
 8005778:	4d06      	ldr	r5, [pc, #24]	; (8005794 <_kill_r+0x20>)
 800577a:	4604      	mov	r4, r0
 800577c:	4608      	mov	r0, r1
 800577e:	4611      	mov	r1, r2
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	f7fd ff35 	bl	80035f0 <_kill>
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	d102      	bne.n	8005790 <_kill_r+0x1c>
 800578a:	682b      	ldr	r3, [r5, #0]
 800578c:	b103      	cbz	r3, 8005790 <_kill_r+0x1c>
 800578e:	6023      	str	r3, [r4, #0]
 8005790:	bd38      	pop	{r3, r4, r5, pc}
 8005792:	bf00      	nop
 8005794:	20000224 	.word	0x20000224

08005798 <_getpid_r>:
 8005798:	f7fd bf28 	b.w	80035ec <_getpid>

0800579c <__malloc_lock>:
 800579c:	4801      	ldr	r0, [pc, #4]	; (80057a4 <__malloc_lock+0x8>)
 800579e:	f000 b809 	b.w	80057b4 <__retarget_lock_acquire_recursive>
 80057a2:	bf00      	nop
 80057a4:	20000228 	.word	0x20000228

080057a8 <__malloc_unlock>:
 80057a8:	4801      	ldr	r0, [pc, #4]	; (80057b0 <__malloc_unlock+0x8>)
 80057aa:	f000 b804 	b.w	80057b6 <__retarget_lock_release_recursive>
 80057ae:	bf00      	nop
 80057b0:	20000228 	.word	0x20000228

080057b4 <__retarget_lock_acquire_recursive>:
 80057b4:	4770      	bx	lr

080057b6 <__retarget_lock_release_recursive>:
 80057b6:	4770      	bx	lr

080057b8 <_Unwind_GetDataRelBase>:
 80057b8:	b508      	push	{r3, lr}
 80057ba:	f7ff fe67 	bl	800548c <abort>

080057be <_Unwind_GetTextRelBase>:
 80057be:	b508      	push	{r3, lr}
 80057c0:	f7ff fffa 	bl	80057b8 <_Unwind_GetDataRelBase>

080057c4 <_init>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	bf00      	nop
 80057c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ca:	bc08      	pop	{r3}
 80057cc:	469e      	mov	lr, r3
 80057ce:	4770      	bx	lr

080057d0 <_fini>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	bf00      	nop
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr
