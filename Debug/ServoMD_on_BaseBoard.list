
ServoMD_on_BaseBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080063ec  080063ec  000163ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000f0  0800653c  0800653c  0001653c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001a0  0800662c  0800662c  0001662c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067cc  080067cc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080067cc  080067cc  000167cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080067ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000007c  08006868  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08006868  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033d5b  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000495e  00000000  00000000  00053e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b80  00000000  00000000  00058760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ac0  00000000  00000000  0005a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008d62  00000000  00000000  0005bda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017470  00000000  00000000  00064b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb794  00000000  00000000  0007bf72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147706  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008964  00000000  00000000  00147758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080063d4 	.word	0x080063d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080063d4 	.word	0x080063d4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_fmul>:
 8000164:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000168:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800016c:	bf1e      	ittt	ne
 800016e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000172:	ea92 0f0c 	teqne	r2, ip
 8000176:	ea93 0f0c 	teqne	r3, ip
 800017a:	d06f      	beq.n	800025c <__aeabi_fmul+0xf8>
 800017c:	441a      	add	r2, r3
 800017e:	ea80 0c01 	eor.w	ip, r0, r1
 8000182:	0240      	lsls	r0, r0, #9
 8000184:	bf18      	it	ne
 8000186:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800018a:	d01e      	beq.n	80001ca <__aeabi_fmul+0x66>
 800018c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000190:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000194:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000198:	fba0 3101 	umull	r3, r1, r0, r1
 800019c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001a0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a4:	bf3e      	ittt	cc
 80001a6:	0049      	lslcc	r1, r1, #1
 80001a8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001ac:	005b      	lslcc	r3, r3, #1
 80001ae:	ea40 0001 	orr.w	r0, r0, r1
 80001b2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b6:	2afd      	cmp	r2, #253	; 0xfd
 80001b8:	d81d      	bhi.n	80001f6 <__aeabi_fmul+0x92>
 80001ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001c2:	bf08      	it	eq
 80001c4:	f020 0001 	biceq.w	r0, r0, #1
 80001c8:	4770      	bx	lr
 80001ca:	f090 0f00 	teq	r0, #0
 80001ce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001d2:	bf08      	it	eq
 80001d4:	0249      	lsleq	r1, r1, #9
 80001d6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001da:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001de:	3a7f      	subs	r2, #127	; 0x7f
 80001e0:	bfc2      	ittt	gt
 80001e2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001ea:	4770      	bxgt	lr
 80001ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001f0:	f04f 0300 	mov.w	r3, #0
 80001f4:	3a01      	subs	r2, #1
 80001f6:	dc5d      	bgt.n	80002b4 <__aeabi_fmul+0x150>
 80001f8:	f112 0f19 	cmn.w	r2, #25
 80001fc:	bfdc      	itt	le
 80001fe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000202:	4770      	bxle	lr
 8000204:	f1c2 0200 	rsb	r2, r2, #0
 8000208:	0041      	lsls	r1, r0, #1
 800020a:	fa21 f102 	lsr.w	r1, r1, r2
 800020e:	f1c2 0220 	rsb	r2, r2, #32
 8000212:	fa00 fc02 	lsl.w	ip, r0, r2
 8000216:	ea5f 0031 	movs.w	r0, r1, rrx
 800021a:	f140 0000 	adc.w	r0, r0, #0
 800021e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000222:	bf08      	it	eq
 8000224:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000228:	4770      	bx	lr
 800022a:	f092 0f00 	teq	r2, #0
 800022e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0040      	lsleq	r0, r0, #1
 8000236:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800023a:	3a01      	subeq	r2, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xce>
 800023e:	ea40 000c 	orr.w	r0, r0, ip
 8000242:	f093 0f00 	teq	r3, #0
 8000246:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800024a:	bf02      	ittt	eq
 800024c:	0049      	lsleq	r1, r1, #1
 800024e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000252:	3b01      	subeq	r3, #1
 8000254:	d0f9      	beq.n	800024a <__aeabi_fmul+0xe6>
 8000256:	ea41 010c 	orr.w	r1, r1, ip
 800025a:	e78f      	b.n	800017c <__aeabi_fmul+0x18>
 800025c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000260:	ea92 0f0c 	teq	r2, ip
 8000264:	bf18      	it	ne
 8000266:	ea93 0f0c 	teqne	r3, ip
 800026a:	d00a      	beq.n	8000282 <__aeabi_fmul+0x11e>
 800026c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000270:	bf18      	it	ne
 8000272:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000276:	d1d8      	bne.n	800022a <__aeabi_fmul+0xc6>
 8000278:	ea80 0001 	eor.w	r0, r0, r1
 800027c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f090 0f00 	teq	r0, #0
 8000286:	bf17      	itett	ne
 8000288:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800028c:	4608      	moveq	r0, r1
 800028e:	f091 0f00 	teqne	r1, #0
 8000292:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000296:	d014      	beq.n	80002c2 <__aeabi_fmul+0x15e>
 8000298:	ea92 0f0c 	teq	r2, ip
 800029c:	d101      	bne.n	80002a2 <__aeabi_fmul+0x13e>
 800029e:	0242      	lsls	r2, r0, #9
 80002a0:	d10f      	bne.n	80002c2 <__aeabi_fmul+0x15e>
 80002a2:	ea93 0f0c 	teq	r3, ip
 80002a6:	d103      	bne.n	80002b0 <__aeabi_fmul+0x14c>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	bf18      	it	ne
 80002ac:	4608      	movne	r0, r1
 80002ae:	d108      	bne.n	80002c2 <__aeabi_fmul+0x15e>
 80002b0:	ea80 0001 	eor.w	r0, r0, r1
 80002b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c0:	4770      	bx	lr
 80002c2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_drsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	e002      	b.n	80002d8 <__adddf3>
 80002d2:	bf00      	nop

080002d4 <__aeabi_dsub>:
 80002d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d8 <__adddf3>:
 80002d8:	b530      	push	{r4, r5, lr}
 80002da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e2:	ea94 0f05 	teq	r4, r5
 80002e6:	bf08      	it	eq
 80002e8:	ea90 0f02 	teqeq	r0, r2
 80002ec:	bf1f      	itttt	ne
 80002ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fe:	f000 80e2 	beq.w	80004c6 <__adddf3+0x1ee>
 8000302:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000306:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030a:	bfb8      	it	lt
 800030c:	426d      	neglt	r5, r5
 800030e:	dd0c      	ble.n	800032a <__adddf3+0x52>
 8000310:	442c      	add	r4, r5
 8000312:	ea80 0202 	eor.w	r2, r0, r2
 8000316:	ea81 0303 	eor.w	r3, r1, r3
 800031a:	ea82 0000 	eor.w	r0, r2, r0
 800031e:	ea83 0101 	eor.w	r1, r3, r1
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	2d36      	cmp	r5, #54	; 0x36
 800032c:	bf88      	it	hi
 800032e:	bd30      	pophi	{r4, r5, pc}
 8000330:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000334:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000338:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800033c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x70>
 8000342:	4240      	negs	r0, r0
 8000344:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000348:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800034c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000350:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x84>
 8000356:	4252      	negs	r2, r2
 8000358:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035c:	ea94 0f05 	teq	r4, r5
 8000360:	f000 80a7 	beq.w	80004b2 <__adddf3+0x1da>
 8000364:	f1a4 0401 	sub.w	r4, r4, #1
 8000368:	f1d5 0e20 	rsbs	lr, r5, #32
 800036c:	db0d      	blt.n	800038a <__adddf3+0xb2>
 800036e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000372:	fa22 f205 	lsr.w	r2, r2, r5
 8000376:	1880      	adds	r0, r0, r2
 8000378:	f141 0100 	adc.w	r1, r1, #0
 800037c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000380:	1880      	adds	r0, r0, r2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	4159      	adcs	r1, r3
 8000388:	e00e      	b.n	80003a8 <__adddf3+0xd0>
 800038a:	f1a5 0520 	sub.w	r5, r5, #32
 800038e:	f10e 0e20 	add.w	lr, lr, #32
 8000392:	2a01      	cmp	r2, #1
 8000394:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000398:	bf28      	it	cs
 800039a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	18c0      	adds	r0, r0, r3
 80003a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	d507      	bpl.n	80003be <__adddf3+0xe6>
 80003ae:	f04f 0e00 	mov.w	lr, #0
 80003b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80003be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c2:	d31b      	bcc.n	80003fc <__adddf3+0x124>
 80003c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c8:	d30c      	bcc.n	80003e4 <__adddf3+0x10c>
 80003ca:	0849      	lsrs	r1, r1, #1
 80003cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d4:	f104 0401 	add.w	r4, r4, #1
 80003d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e0:	f080 809a 	bcs.w	8000518 <__adddf3+0x240>
 80003e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e8:	bf08      	it	eq
 80003ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ee:	f150 0000 	adcs.w	r0, r0, #0
 80003f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f6:	ea41 0105 	orr.w	r1, r1, r5
 80003fa:	bd30      	pop	{r4, r5, pc}
 80003fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000400:	4140      	adcs	r0, r0
 8000402:	eb41 0101 	adc.w	r1, r1, r1
 8000406:	3c01      	subs	r4, #1
 8000408:	bf28      	it	cs
 800040a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040e:	d2e9      	bcs.n	80003e4 <__adddf3+0x10c>
 8000410:	f091 0f00 	teq	r1, #0
 8000414:	bf04      	itt	eq
 8000416:	4601      	moveq	r1, r0
 8000418:	2000      	moveq	r0, #0
 800041a:	fab1 f381 	clz	r3, r1
 800041e:	bf08      	it	eq
 8000420:	3320      	addeq	r3, #32
 8000422:	f1a3 030b 	sub.w	r3, r3, #11
 8000426:	f1b3 0220 	subs.w	r2, r3, #32
 800042a:	da0c      	bge.n	8000446 <__adddf3+0x16e>
 800042c:	320c      	adds	r2, #12
 800042e:	dd08      	ble.n	8000442 <__adddf3+0x16a>
 8000430:	f102 0c14 	add.w	ip, r2, #20
 8000434:	f1c2 020c 	rsb	r2, r2, #12
 8000438:	fa01 f00c 	lsl.w	r0, r1, ip
 800043c:	fa21 f102 	lsr.w	r1, r1, r2
 8000440:	e00c      	b.n	800045c <__adddf3+0x184>
 8000442:	f102 0214 	add.w	r2, r2, #20
 8000446:	bfd8      	it	le
 8000448:	f1c2 0c20 	rsble	ip, r2, #32
 800044c:	fa01 f102 	lsl.w	r1, r1, r2
 8000450:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000454:	bfdc      	itt	le
 8000456:	ea41 010c 	orrle.w	r1, r1, ip
 800045a:	4090      	lslle	r0, r2
 800045c:	1ae4      	subs	r4, r4, r3
 800045e:	bfa2      	ittt	ge
 8000460:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000464:	4329      	orrge	r1, r5
 8000466:	bd30      	popge	{r4, r5, pc}
 8000468:	ea6f 0404 	mvn.w	r4, r4
 800046c:	3c1f      	subs	r4, #31
 800046e:	da1c      	bge.n	80004aa <__adddf3+0x1d2>
 8000470:	340c      	adds	r4, #12
 8000472:	dc0e      	bgt.n	8000492 <__adddf3+0x1ba>
 8000474:	f104 0414 	add.w	r4, r4, #20
 8000478:	f1c4 0220 	rsb	r2, r4, #32
 800047c:	fa20 f004 	lsr.w	r0, r0, r4
 8000480:	fa01 f302 	lsl.w	r3, r1, r2
 8000484:	ea40 0003 	orr.w	r0, r0, r3
 8000488:	fa21 f304 	lsr.w	r3, r1, r4
 800048c:	ea45 0103 	orr.w	r1, r5, r3
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	f1c4 040c 	rsb	r4, r4, #12
 8000496:	f1c4 0220 	rsb	r2, r4, #32
 800049a:	fa20 f002 	lsr.w	r0, r0, r2
 800049e:	fa01 f304 	lsl.w	r3, r1, r4
 80004a2:	ea40 0003 	orr.w	r0, r0, r3
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	fa21 f004 	lsr.w	r0, r1, r4
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	f094 0f00 	teq	r4, #0
 80004b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ba:	bf06      	itte	eq
 80004bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c0:	3401      	addeq	r4, #1
 80004c2:	3d01      	subne	r5, #1
 80004c4:	e74e      	b.n	8000364 <__adddf3+0x8c>
 80004c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ca:	bf18      	it	ne
 80004cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d0:	d029      	beq.n	8000526 <__adddf3+0x24e>
 80004d2:	ea94 0f05 	teq	r4, r5
 80004d6:	bf08      	it	eq
 80004d8:	ea90 0f02 	teqeq	r0, r2
 80004dc:	d005      	beq.n	80004ea <__adddf3+0x212>
 80004de:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e2:	bf04      	itt	eq
 80004e4:	4619      	moveq	r1, r3
 80004e6:	4610      	moveq	r0, r2
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea91 0f03 	teq	r1, r3
 80004ee:	bf1e      	ittt	ne
 80004f0:	2100      	movne	r1, #0
 80004f2:	2000      	movne	r0, #0
 80004f4:	bd30      	popne	{r4, r5, pc}
 80004f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fa:	d105      	bne.n	8000508 <__adddf3+0x230>
 80004fc:	0040      	lsls	r0, r0, #1
 80004fe:	4149      	adcs	r1, r1
 8000500:	bf28      	it	cs
 8000502:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000506:	bd30      	pop	{r4, r5, pc}
 8000508:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800050c:	bf3c      	itt	cc
 800050e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000512:	bd30      	popcc	{r4, r5, pc}
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000518:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800051c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000520:	f04f 0000 	mov.w	r0, #0
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052a:	bf1a      	itte	ne
 800052c:	4619      	movne	r1, r3
 800052e:	4610      	movne	r0, r2
 8000530:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000534:	bf1c      	itt	ne
 8000536:	460b      	movne	r3, r1
 8000538:	4602      	movne	r2, r0
 800053a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053e:	bf06      	itte	eq
 8000540:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000544:	ea91 0f03 	teqeq	r1, r3
 8000548:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	bf00      	nop

08000550 <__aeabi_ui2d>:
 8000550:	f090 0f00 	teq	r0, #0
 8000554:	bf04      	itt	eq
 8000556:	2100      	moveq	r1, #0
 8000558:	4770      	bxeq	lr
 800055a:	b530      	push	{r4, r5, lr}
 800055c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000560:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000564:	f04f 0500 	mov.w	r5, #0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e750      	b.n	8000410 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_i2d>:
 8000570:	f090 0f00 	teq	r0, #0
 8000574:	bf04      	itt	eq
 8000576:	2100      	moveq	r1, #0
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000580:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000584:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000588:	bf48      	it	mi
 800058a:	4240      	negmi	r0, r0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e73e      	b.n	8000410 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_f2d>:
 8000594:	0042      	lsls	r2, r0, #1
 8000596:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059a:	ea4f 0131 	mov.w	r1, r1, rrx
 800059e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a2:	bf1f      	itttt	ne
 80005a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b0:	4770      	bxne	lr
 80005b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b6:	bf08      	it	eq
 80005b8:	4770      	bxeq	lr
 80005ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005be:	bf04      	itt	eq
 80005c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c4:	4770      	bxeq	lr
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d4:	e71c      	b.n	8000410 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_ul2d>:
 80005d8:	ea50 0201 	orrs.w	r2, r0, r1
 80005dc:	bf08      	it	eq
 80005de:	4770      	bxeq	lr
 80005e0:	b530      	push	{r4, r5, lr}
 80005e2:	f04f 0500 	mov.w	r5, #0
 80005e6:	e00a      	b.n	80005fe <__aeabi_l2d+0x16>

080005e8 <__aeabi_l2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f6:	d502      	bpl.n	80005fe <__aeabi_l2d+0x16>
 80005f8:	4240      	negs	r0, r0
 80005fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000602:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000606:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060a:	f43f aed8 	beq.w	80003be <__adddf3+0xe6>
 800060e:	f04f 0203 	mov.w	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000626:	f1c2 0320 	rsb	r3, r2, #32
 800062a:	fa00 fc03 	lsl.w	ip, r0, r3
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	fa01 fe03 	lsl.w	lr, r1, r3
 8000636:	ea40 000e 	orr.w	r0, r0, lr
 800063a:	fa21 f102 	lsr.w	r1, r1, r2
 800063e:	4414      	add	r4, r2
 8000640:	e6bd      	b.n	80003be <__adddf3+0xe6>
 8000642:	bf00      	nop

08000644 <__aeabi_dmul>:
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000652:	bf1d      	ittte	ne
 8000654:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000658:	ea94 0f0c 	teqne	r4, ip
 800065c:	ea95 0f0c 	teqne	r5, ip
 8000660:	f000 f8de 	bleq	8000820 <__aeabi_dmul+0x1dc>
 8000664:	442c      	add	r4, r5
 8000666:	ea81 0603 	eor.w	r6, r1, r3
 800066a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000672:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000676:	bf18      	it	ne
 8000678:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000684:	d038      	beq.n	80006f8 <__aeabi_dmul+0xb4>
 8000686:	fba0 ce02 	umull	ip, lr, r0, r2
 800068a:	f04f 0500 	mov.w	r5, #0
 800068e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000692:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000696:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069a:	f04f 0600 	mov.w	r6, #0
 800069e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a2:	f09c 0f00 	teq	ip, #0
 80006a6:	bf18      	it	ne
 80006a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b8:	d204      	bcs.n	80006c4 <__aeabi_dmul+0x80>
 80006ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006be:	416d      	adcs	r5, r5
 80006c0:	eb46 0606 	adc.w	r6, r6, r6
 80006c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006dc:	bf88      	it	hi
 80006de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e2:	d81e      	bhi.n	8000722 <__aeabi_dmul+0xde>
 80006e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e8:	bf08      	it	eq
 80006ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ee:	f150 0000 	adcs.w	r0, r0, #0
 80006f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006fc:	ea46 0101 	orr.w	r1, r6, r1
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800070c:	bfc2      	ittt	gt
 800070e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000712:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000716:	bd70      	popgt	{r4, r5, r6, pc}
 8000718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800071c:	f04f 0e00 	mov.w	lr, #0
 8000720:	3c01      	subs	r4, #1
 8000722:	f300 80ab 	bgt.w	800087c <__aeabi_dmul+0x238>
 8000726:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072a:	bfde      	ittt	le
 800072c:	2000      	movle	r0, #0
 800072e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000732:	bd70      	pople	{r4, r5, r6, pc}
 8000734:	f1c4 0400 	rsb	r4, r4, #0
 8000738:	3c20      	subs	r4, #32
 800073a:	da35      	bge.n	80007a8 <__aeabi_dmul+0x164>
 800073c:	340c      	adds	r4, #12
 800073e:	dc1b      	bgt.n	8000778 <__aeabi_dmul+0x134>
 8000740:	f104 0414 	add.w	r4, r4, #20
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f305 	lsl.w	r3, r0, r5
 800074c:	fa20 f004 	lsr.w	r0, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800075c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	fa21 f604 	lsr.w	r6, r1, r4
 8000768:	eb42 0106 	adc.w	r1, r2, r6
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f1c4 040c 	rsb	r4, r4, #12
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f304 	lsl.w	r3, r0, r4
 8000784:	fa20 f005 	lsr.w	r0, r0, r5
 8000788:	fa01 f204 	lsl.w	r2, r1, r4
 800078c:	ea40 0002 	orr.w	r0, r0, r2
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000798:	f141 0100 	adc.w	r1, r1, #0
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f205 	lsl.w	r2, r0, r5
 80007b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b4:	fa20 f304 	lsr.w	r3, r0, r4
 80007b8:	fa01 f205 	lsl.w	r2, r1, r5
 80007bc:	ea43 0302 	orr.w	r3, r3, r2
 80007c0:	fa21 f004 	lsr.w	r0, r1, r4
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	fa21 f204 	lsr.w	r2, r1, r4
 80007cc:	ea20 0002 	bic.w	r0, r0, r2
 80007d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d8:	bf08      	it	eq
 80007da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	f094 0f00 	teq	r4, #0
 80007e4:	d10f      	bne.n	8000806 <__aeabi_dmul+0x1c2>
 80007e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ea:	0040      	lsls	r0, r0, #1
 80007ec:	eb41 0101 	adc.w	r1, r1, r1
 80007f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f4:	bf08      	it	eq
 80007f6:	3c01      	subeq	r4, #1
 80007f8:	d0f7      	beq.n	80007ea <__aeabi_dmul+0x1a6>
 80007fa:	ea41 0106 	orr.w	r1, r1, r6
 80007fe:	f095 0f00 	teq	r5, #0
 8000802:	bf18      	it	ne
 8000804:	4770      	bxne	lr
 8000806:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080a:	0052      	lsls	r2, r2, #1
 800080c:	eb43 0303 	adc.w	r3, r3, r3
 8000810:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000814:	bf08      	it	eq
 8000816:	3d01      	subeq	r5, #1
 8000818:	d0f7      	beq.n	800080a <__aeabi_dmul+0x1c6>
 800081a:	ea43 0306 	orr.w	r3, r3, r6
 800081e:	4770      	bx	lr
 8000820:	ea94 0f0c 	teq	r4, ip
 8000824:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000828:	bf18      	it	ne
 800082a:	ea95 0f0c 	teqne	r5, ip
 800082e:	d00c      	beq.n	800084a <__aeabi_dmul+0x206>
 8000830:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000834:	bf18      	it	ne
 8000836:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083a:	d1d1      	bne.n	80007e0 <__aeabi_dmul+0x19c>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084e:	bf06      	itte	eq
 8000850:	4610      	moveq	r0, r2
 8000852:	4619      	moveq	r1, r3
 8000854:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000858:	d019      	beq.n	800088e <__aeabi_dmul+0x24a>
 800085a:	ea94 0f0c 	teq	r4, ip
 800085e:	d102      	bne.n	8000866 <__aeabi_dmul+0x222>
 8000860:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000864:	d113      	bne.n	800088e <__aeabi_dmul+0x24a>
 8000866:	ea95 0f0c 	teq	r5, ip
 800086a:	d105      	bne.n	8000878 <__aeabi_dmul+0x234>
 800086c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000870:	bf1c      	itt	ne
 8000872:	4610      	movne	r0, r2
 8000874:	4619      	movne	r1, r3
 8000876:	d10a      	bne.n	800088e <__aeabi_dmul+0x24a>
 8000878:	ea81 0103 	eor.w	r1, r1, r3
 800087c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000880:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000884:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000888:	f04f 0000 	mov.w	r0, #0
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000892:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000896:	bd70      	pop	{r4, r5, r6, pc}

08000898 <__aeabi_ddiv>:
 8000898:	b570      	push	{r4, r5, r6, lr}
 800089a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a6:	bf1d      	ittte	ne
 80008a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008ac:	ea94 0f0c 	teqne	r4, ip
 80008b0:	ea95 0f0c 	teqne	r5, ip
 80008b4:	f000 f8a7 	bleq	8000a06 <__aeabi_ddiv+0x16e>
 80008b8:	eba4 0405 	sub.w	r4, r4, r5
 80008bc:	ea81 0e03 	eor.w	lr, r1, r3
 80008c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c8:	f000 8088 	beq.w	80009dc <__aeabi_ddiv+0x144>
 80008cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f0:	429d      	cmp	r5, r3
 80008f2:	bf08      	it	eq
 80008f4:	4296      	cmpeq	r6, r2
 80008f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fe:	d202      	bcs.n	8000906 <__aeabi_ddiv+0x6e>
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	1ab6      	subs	r6, r6, r2
 8000908:	eb65 0503 	sbc.w	r5, r5, r3
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000916:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 000c 	orrcs.w	r0, r0, ip
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000974:	ea55 0e06 	orrs.w	lr, r5, r6
 8000978:	d018      	beq.n	80009ac <__aeabi_ddiv+0x114>
 800097a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000982:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000986:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000992:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000996:	d1c0      	bne.n	800091a <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	d10b      	bne.n	80009b6 <__aeabi_ddiv+0x11e>
 800099e:	ea41 0100 	orr.w	r1, r1, r0
 80009a2:	f04f 0000 	mov.w	r0, #0
 80009a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009aa:	e7b6      	b.n	800091a <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	bf04      	itt	eq
 80009b2:	4301      	orreq	r1, r0
 80009b4:	2000      	moveq	r0, #0
 80009b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ba:	bf88      	it	hi
 80009bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c0:	f63f aeaf 	bhi.w	8000722 <__aeabi_dmul+0xde>
 80009c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c8:	bf04      	itt	eq
 80009ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d2:	f150 0000 	adcs.w	r0, r0, #0
 80009d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e8:	bfc2      	ittt	gt
 80009ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	popgt	{r4, r5, r6, pc}
 80009f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f8:	f04f 0e00 	mov.w	lr, #0
 80009fc:	3c01      	subs	r4, #1
 80009fe:	e690      	b.n	8000722 <__aeabi_dmul+0xde>
 8000a00:	ea45 0e06 	orr.w	lr, r5, r6
 8000a04:	e68d      	b.n	8000722 <__aeabi_dmul+0xde>
 8000a06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0a:	ea94 0f0c 	teq	r4, ip
 8000a0e:	bf08      	it	eq
 8000a10:	ea95 0f0c 	teqeq	r5, ip
 8000a14:	f43f af3b 	beq.w	800088e <__aeabi_dmul+0x24a>
 8000a18:	ea94 0f0c 	teq	r4, ip
 8000a1c:	d10a      	bne.n	8000a34 <__aeabi_ddiv+0x19c>
 8000a1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a22:	f47f af34 	bne.w	800088e <__aeabi_dmul+0x24a>
 8000a26:	ea95 0f0c 	teq	r5, ip
 8000a2a:	f47f af25 	bne.w	8000878 <__aeabi_dmul+0x234>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e72c      	b.n	800088e <__aeabi_dmul+0x24a>
 8000a34:	ea95 0f0c 	teq	r5, ip
 8000a38:	d106      	bne.n	8000a48 <__aeabi_ddiv+0x1b0>
 8000a3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3e:	f43f aefd 	beq.w	800083c <__aeabi_dmul+0x1f8>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e722      	b.n	800088e <__aeabi_dmul+0x24a>
 8000a48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a4c:	bf18      	it	ne
 8000a4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a52:	f47f aec5 	bne.w	80007e0 <__aeabi_dmul+0x19c>
 8000a56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5a:	f47f af0d 	bne.w	8000878 <__aeabi_dmul+0x234>
 8000a5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a62:	f47f aeeb 	bne.w	800083c <__aeabi_dmul+0x1f8>
 8000a66:	e712      	b.n	800088e <__aeabi_dmul+0x24a>

08000a68 <__aeabi_d2uiz>:
 8000a68:	004a      	lsls	r2, r1, #1
 8000a6a:	d211      	bcs.n	8000a90 <__aeabi_d2uiz+0x28>
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d211      	bcs.n	8000a96 <__aeabi_d2uiz+0x2e>
 8000a72:	d50d      	bpl.n	8000a90 <__aeabi_d2uiz+0x28>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d40e      	bmi.n	8000a9c <__aeabi_d2uiz+0x34>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_d2uiz+0x3a>
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0000 	mov.w	r0, #0
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_frsub>:
 8000aa8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aac:	e002      	b.n	8000ab4 <__addsf3>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_fsub>:
 8000ab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab4 <__addsf3>:
 8000ab4:	0042      	lsls	r2, r0, #1
 8000ab6:	bf1f      	itttt	ne
 8000ab8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000abc:	ea92 0f03 	teqne	r2, r3
 8000ac0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac8:	d06a      	beq.n	8000ba0 <__addsf3+0xec>
 8000aca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ace:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad2:	bfc1      	itttt	gt
 8000ad4:	18d2      	addgt	r2, r2, r3
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	4048      	eorgt	r0, r1
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	bfb8      	it	lt
 8000ade:	425b      	neglt	r3, r3
 8000ae0:	2b19      	cmp	r3, #25
 8000ae2:	bf88      	it	hi
 8000ae4:	4770      	bxhi	lr
 8000ae6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000afe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4249      	negne	r1, r1
 8000b06:	ea92 0f03 	teq	r2, r3
 8000b0a:	d03f      	beq.n	8000b8c <__addsf3+0xd8>
 8000b0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b10:	fa41 fc03 	asr.w	ip, r1, r3
 8000b14:	eb10 000c 	adds.w	r0, r0, ip
 8000b18:	f1c3 0320 	rsb	r3, r3, #32
 8000b1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	d502      	bpl.n	8000b2c <__addsf3+0x78>
 8000b26:	4249      	negs	r1, r1
 8000b28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b30:	d313      	bcc.n	8000b5a <__addsf3+0xa6>
 8000b32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b36:	d306      	bcc.n	8000b46 <__addsf3+0x92>
 8000b38:	0840      	lsrs	r0, r0, #1
 8000b3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3e:	f102 0201 	add.w	r2, r2, #1
 8000b42:	2afe      	cmp	r2, #254	; 0xfe
 8000b44:	d251      	bcs.n	8000bea <__addsf3+0x136>
 8000b46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4e:	bf08      	it	eq
 8000b50:	f020 0001 	biceq.w	r0, r0, #1
 8000b54:	ea40 0003 	orr.w	r0, r0, r3
 8000b58:	4770      	bx	lr
 8000b5a:	0049      	lsls	r1, r1, #1
 8000b5c:	eb40 0000 	adc.w	r0, r0, r0
 8000b60:	3a01      	subs	r2, #1
 8000b62:	bf28      	it	cs
 8000b64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b68:	d2ed      	bcs.n	8000b46 <__addsf3+0x92>
 8000b6a:	fab0 fc80 	clz	ip, r0
 8000b6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b72:	ebb2 020c 	subs.w	r2, r2, ip
 8000b76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7a:	bfaa      	itet	ge
 8000b7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b80:	4252      	neglt	r2, r2
 8000b82:	4318      	orrge	r0, r3
 8000b84:	bfbc      	itt	lt
 8000b86:	40d0      	lsrlt	r0, r2
 8000b88:	4318      	orrlt	r0, r3
 8000b8a:	4770      	bx	lr
 8000b8c:	f092 0f00 	teq	r2, #0
 8000b90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b94:	bf06      	itte	eq
 8000b96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9a:	3201      	addeq	r2, #1
 8000b9c:	3b01      	subne	r3, #1
 8000b9e:	e7b5      	b.n	8000b0c <__addsf3+0x58>
 8000ba0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba8:	bf18      	it	ne
 8000baa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bae:	d021      	beq.n	8000bf4 <__addsf3+0x140>
 8000bb0:	ea92 0f03 	teq	r2, r3
 8000bb4:	d004      	beq.n	8000bc0 <__addsf3+0x10c>
 8000bb6:	f092 0f00 	teq	r2, #0
 8000bba:	bf08      	it	eq
 8000bbc:	4608      	moveq	r0, r1
 8000bbe:	4770      	bx	lr
 8000bc0:	ea90 0f01 	teq	r0, r1
 8000bc4:	bf1c      	itt	ne
 8000bc6:	2000      	movne	r0, #0
 8000bc8:	4770      	bxne	lr
 8000bca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bce:	d104      	bne.n	8000bda <__addsf3+0x126>
 8000bd0:	0040      	lsls	r0, r0, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bd8:	4770      	bx	lr
 8000bda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bde:	bf3c      	itt	cc
 8000be0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bxcc	lr
 8000be6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	4770      	bx	lr
 8000bf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf8:	bf16      	itet	ne
 8000bfa:	4608      	movne	r0, r1
 8000bfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c00:	4601      	movne	r1, r0
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	bf06      	itte	eq
 8000c06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0a:	ea90 0f01 	teqeq	r0, r1
 8000c0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c12:	4770      	bx	lr

08000c14 <__aeabi_ui2f>:
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e004      	b.n	8000c24 <__aeabi_i2f+0x8>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_i2f>:
 8000c1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c20:	bf48      	it	mi
 8000c22:	4240      	negmi	r0, r0
 8000c24:	ea5f 0c00 	movs.w	ip, r0
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c30:	4601      	mov	r1, r0
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	e01c      	b.n	8000c72 <__aeabi_l2f+0x2a>

08000c38 <__aeabi_ul2f>:
 8000c38:	ea50 0201 	orrs.w	r2, r0, r1
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e00a      	b.n	8000c5c <__aeabi_l2f+0x14>
 8000c46:	bf00      	nop

08000c48 <__aeabi_l2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__aeabi_l2f+0x14>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	ea5f 0c01 	movs.w	ip, r1
 8000c60:	bf02      	ittt	eq
 8000c62:	4684      	moveq	ip, r0
 8000c64:	4601      	moveq	r1, r0
 8000c66:	2000      	moveq	r0, #0
 8000c68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c6c:	bf08      	it	eq
 8000c6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c76:	fabc f28c 	clz	r2, ip
 8000c7a:	3a08      	subs	r2, #8
 8000c7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c80:	db10      	blt.n	8000ca4 <__aeabi_l2f+0x5c>
 8000c82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c86:	4463      	add	r3, ip
 8000c88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c94:	fa20 f202 	lsr.w	r2, r0, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ca2:	4770      	bx	lr
 8000ca4:	f102 0220 	add.w	r2, r2, #32
 8000ca8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc2:	4770      	bx	lr

08000cc4 <selfrel_offset31>:
 8000cc4:	6803      	ldr	r3, [r0, #0]
 8000cc6:	005a      	lsls	r2, r3, #1
 8000cc8:	bf4c      	ite	mi
 8000cca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000cce:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000cd2:	4418      	add	r0, r3
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <search_EIT_table>:
 8000cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cdc:	b339      	cbz	r1, 8000d2e <search_EIT_table+0x56>
 8000cde:	1e4f      	subs	r7, r1, #1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4615      	mov	r5, r2
 8000ce4:	463e      	mov	r6, r7
 8000ce6:	f04f 0800 	mov.w	r8, #0
 8000cea:	eb08 0106 	add.w	r1, r8, r6
 8000cee:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000cf2:	1049      	asrs	r1, r1, #1
 8000cf4:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000cf8:	4648      	mov	r0, r9
 8000cfa:	f7ff ffe3 	bl	8000cc4 <selfrel_offset31>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	00c8      	lsls	r0, r1, #3
 8000d02:	3008      	adds	r0, #8
 8000d04:	428f      	cmp	r7, r1
 8000d06:	4420      	add	r0, r4
 8000d08:	d00b      	beq.n	8000d22 <search_EIT_table+0x4a>
 8000d0a:	42ab      	cmp	r3, r5
 8000d0c:	d80b      	bhi.n	8000d26 <search_EIT_table+0x4e>
 8000d0e:	f7ff ffd9 	bl	8000cc4 <selfrel_offset31>
 8000d12:	3801      	subs	r0, #1
 8000d14:	42a8      	cmp	r0, r5
 8000d16:	f101 0801 	add.w	r8, r1, #1
 8000d1a:	d3e6      	bcc.n	8000cea <search_EIT_table+0x12>
 8000d1c:	4648      	mov	r0, r9
 8000d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d9fa      	bls.n	8000d1c <search_EIT_table+0x44>
 8000d26:	4588      	cmp	r8, r1
 8000d28:	d001      	beq.n	8000d2e <search_EIT_table+0x56>
 8000d2a:	1e4e      	subs	r6, r1, #1
 8000d2c:	e7dd      	b.n	8000cea <search_EIT_table+0x12>
 8000d2e:	f04f 0900 	mov.w	r9, #0
 8000d32:	4648      	mov	r0, r9
 8000d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000d38 <__gnu_unwind_get_pr_addr>:
 8000d38:	2801      	cmp	r0, #1
 8000d3a:	d007      	beq.n	8000d4c <__gnu_unwind_get_pr_addr+0x14>
 8000d3c:	2802      	cmp	r0, #2
 8000d3e:	d007      	beq.n	8000d50 <__gnu_unwind_get_pr_addr+0x18>
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__gnu_unwind_get_pr_addr+0x1c>)
 8000d42:	2800      	cmp	r0, #0
 8000d44:	bf0c      	ite	eq
 8000d46:	4618      	moveq	r0, r3
 8000d48:	2000      	movne	r0, #0
 8000d4a:	4770      	bx	lr
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <__gnu_unwind_get_pr_addr+0x20>)
 8000d4e:	4770      	bx	lr
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <__gnu_unwind_get_pr_addr+0x24>)
 8000d52:	4770      	bx	lr
 8000d54:	08001429 	.word	0x08001429
 8000d58:	0800142d 	.word	0x0800142d
 8000d5c:	08001431 	.word	0x08001431

08000d60 <get_eit_entry>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <get_eit_entry+0x94>)
 8000d64:	4604      	mov	r4, r0
 8000d66:	b083      	sub	sp, #12
 8000d68:	1e8d      	subs	r5, r1, #2
 8000d6a:	b33b      	cbz	r3, 8000dbc <get_eit_entry+0x5c>
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	a901      	add	r1, sp, #4
 8000d70:	f3af 8000 	nop.w
 8000d74:	b1e8      	cbz	r0, 8000db2 <get_eit_entry+0x52>
 8000d76:	9901      	ldr	r1, [sp, #4]
 8000d78:	462a      	mov	r2, r5
 8000d7a:	f7ff ffad 	bl	8000cd8 <search_EIT_table>
 8000d7e:	4601      	mov	r1, r0
 8000d80:	b1b8      	cbz	r0, 8000db2 <get_eit_entry+0x52>
 8000d82:	f7ff ff9f 	bl	8000cc4 <selfrel_offset31>
 8000d86:	684b      	ldr	r3, [r1, #4]
 8000d88:	64a0      	str	r0, [r4, #72]	; 0x48
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d02e      	beq.n	8000dec <get_eit_entry+0x8c>
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db27      	blt.n	8000de2 <get_eit_entry+0x82>
 8000d92:	1d08      	adds	r0, r1, #4
 8000d94:	f7ff ff96 	bl	8000cc4 <selfrel_offset31>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000d9e:	6803      	ldr	r3, [r0, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db12      	blt.n	8000dca <get_eit_entry+0x6a>
 8000da4:	f7ff ff8e 	bl	8000cc4 <selfrel_offset31>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2000      	movs	r0, #0
 8000dac:	6123      	str	r3, [r4, #16]
 8000dae:	b003      	add	sp, #12
 8000db0:	bd30      	pop	{r4, r5, pc}
 8000db2:	2300      	movs	r3, #0
 8000db4:	2009      	movs	r0, #9
 8000db6:	6123      	str	r3, [r4, #16]
 8000db8:	b003      	add	sp, #12
 8000dba:	bd30      	pop	{r4, r5, pc}
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <get_eit_entry+0x98>)
 8000dbe:	490f      	ldr	r1, [pc, #60]	; (8000dfc <get_eit_entry+0x9c>)
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	10c9      	asrs	r1, r1, #3
 8000dc6:	9101      	str	r1, [sp, #4]
 8000dc8:	e7d6      	b.n	8000d78 <get_eit_entry+0x18>
 8000dca:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000dce:	f7ff ffb3 	bl	8000d38 <__gnu_unwind_get_pr_addr>
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	bf14      	ite	ne
 8000dd8:	2000      	movne	r0, #0
 8000dda:	2009      	moveq	r0, #9
 8000ddc:	6123      	str	r3, [r4, #16]
 8000dde:	b003      	add	sp, #12
 8000de0:	bd30      	pop	{r4, r5, pc}
 8000de2:	2301      	movs	r3, #1
 8000de4:	1d08      	adds	r0, r1, #4
 8000de6:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000dea:	e7d8      	b.n	8000d9e <get_eit_entry+0x3e>
 8000dec:	2300      	movs	r3, #0
 8000dee:	2005      	movs	r0, #5
 8000df0:	6123      	str	r3, [r4, #16]
 8000df2:	e7dc      	b.n	8000dae <get_eit_entry+0x4e>
 8000df4:	00000000 	.word	0x00000000
 8000df8:	0800662c 	.word	0x0800662c
 8000dfc:	080067cc 	.word	0x080067cc

08000e00 <restore_non_core_regs>:
 8000e00:	6803      	ldr	r3, [r0, #0]
 8000e02:	b510      	push	{r4, lr}
 8000e04:	07da      	lsls	r2, r3, #31
 8000e06:	4604      	mov	r4, r0
 8000e08:	d406      	bmi.n	8000e18 <restore_non_core_regs+0x18>
 8000e0a:	079b      	lsls	r3, r3, #30
 8000e0c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000e10:	d509      	bpl.n	8000e26 <restore_non_core_regs+0x26>
 8000e12:	f000 fc5d 	bl	80016d0 <__gnu_Unwind_Restore_VFP_D>
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	0759      	lsls	r1, r3, #29
 8000e1a:	d509      	bpl.n	8000e30 <restore_non_core_regs+0x30>
 8000e1c:	071a      	lsls	r2, r3, #28
 8000e1e:	d50e      	bpl.n	8000e3e <restore_non_core_regs+0x3e>
 8000e20:	06db      	lsls	r3, r3, #27
 8000e22:	d513      	bpl.n	8000e4c <restore_non_core_regs+0x4c>
 8000e24:	bd10      	pop	{r4, pc}
 8000e26:	f000 fc4b 	bl	80016c0 <__gnu_Unwind_Restore_VFP>
 8000e2a:	6823      	ldr	r3, [r4, #0]
 8000e2c:	0759      	lsls	r1, r3, #29
 8000e2e:	d4f5      	bmi.n	8000e1c <restore_non_core_regs+0x1c>
 8000e30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000e34:	f000 fc54 	bl	80016e0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	071a      	lsls	r2, r3, #28
 8000e3c:	d4f0      	bmi.n	8000e20 <restore_non_core_regs+0x20>
 8000e3e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000e42:	f000 fc55 	bl	80016f0 <__gnu_Unwind_Restore_WMMXD>
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	06db      	lsls	r3, r3, #27
 8000e4a:	d4eb      	bmi.n	8000e24 <restore_non_core_regs+0x24>
 8000e4c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e54:	f000 bc90 	b.w	8001778 <__gnu_Unwind_Restore_WMMXC>

08000e58 <__gnu_unwind_24bit.constprop.0>:
 8000e58:	2009      	movs	r0, #9
 8000e5a:	4770      	bx	lr

08000e5c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	6800      	ldr	r0, [r0, #0]
 8000e60:	b100      	cbz	r0, 8000e64 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000e62:	4418      	add	r0, r3
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <_Unwind_DebugHook>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <unwind_phase2>:
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	4604      	mov	r4, r0
 8000e70:	460e      	mov	r6, r1
 8000e72:	4620      	mov	r0, r4
 8000e74:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000e76:	f7ff ff73 	bl	8000d60 <get_eit_entry>
 8000e7a:	4605      	mov	r5, r0
 8000e7c:	b998      	cbnz	r0, 8000ea6 <unwind_phase2+0x3a>
 8000e7e:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 8000e82:	4632      	mov	r2, r6
 8000e84:	4621      	mov	r1, r4
 8000e86:	2001      	movs	r0, #1
 8000e88:	6923      	ldr	r3, [r4, #16]
 8000e8a:	f8c4 c014 	str.w	ip, [r4, #20]
 8000e8e:	4798      	blx	r3
 8000e90:	2808      	cmp	r0, #8
 8000e92:	d0ee      	beq.n	8000e72 <unwind_phase2+0x6>
 8000e94:	2807      	cmp	r0, #7
 8000e96:	d106      	bne.n	8000ea6 <unwind_phase2+0x3a>
 8000e98:	4628      	mov	r0, r5
 8000e9a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000e9c:	f7ff ffe4 	bl	8000e68 <_Unwind_DebugHook>
 8000ea0:	1d30      	adds	r0, r6, #4
 8000ea2:	f000 fc01 	bl	80016a8 <__restore_core_regs>
 8000ea6:	f005 f9a5 	bl	80061f4 <abort>
 8000eaa:	bf00      	nop

08000eac <unwind_phase2_forced>:
 8000eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb0:	f04f 0a00 	mov.w	sl, #0
 8000eb4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000eb8:	f10d 0e0c 	add.w	lr, sp, #12
 8000ebc:	f101 0c04 	add.w	ip, r1, #4
 8000ec0:	68c7      	ldr	r7, [r0, #12]
 8000ec2:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000ec6:	4606      	mov	r6, r0
 8000ec8:	4614      	mov	r4, r2
 8000eca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000ece:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000ed2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000ed6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000eda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000ede:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000ee2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000ee6:	ad02      	add	r5, sp, #8
 8000ee8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000eec:	f8c5 a000 	str.w	sl, [r5]
 8000ef0:	e021      	b.n	8000f36 <unwind_phase2_forced+0x8a>
 8000ef2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000ef4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000ef8:	4629      	mov	r1, r5
 8000efa:	6173      	str	r3, [r6, #20]
 8000efc:	a87a      	add	r0, sp, #488	; 0x1e8
 8000efe:	f005 f9b3 	bl	8006268 <memcpy>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4650      	mov	r0, sl
 8000f06:	6933      	ldr	r3, [r6, #16]
 8000f08:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000f0a:	4798      	blx	r3
 8000f0c:	9c88      	ldr	r4, [sp, #544]	; 0x220
 8000f0e:	4682      	mov	sl, r0
 8000f10:	646c      	str	r4, [r5, #68]	; 0x44
 8000f12:	4633      	mov	r3, r6
 8000f14:	4632      	mov	r2, r6
 8000f16:	4649      	mov	r1, r9
 8000f18:	2001      	movs	r0, #1
 8000f1a:	e9cd 5800 	strd	r5, r8, [sp]
 8000f1e:	47b8      	blx	r7
 8000f20:	4604      	mov	r4, r0
 8000f22:	b9f0      	cbnz	r0, 8000f62 <unwind_phase2_forced+0xb6>
 8000f24:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000f28:	4628      	mov	r0, r5
 8000f2a:	a97a      	add	r1, sp, #488	; 0x1e8
 8000f2c:	f005 f99c 	bl	8006268 <memcpy>
 8000f30:	f1ba 0f08 	cmp.w	sl, #8
 8000f34:	d11b      	bne.n	8000f6e <unwind_phase2_forced+0xc2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f3a:	f7ff ff11 	bl	8000d60 <get_eit_entry>
 8000f3e:	f104 0909 	add.w	r9, r4, #9
 8000f42:	fa5f fa89 	uxtb.w	sl, r9
 8000f46:	4604      	mov	r4, r0
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d0d2      	beq.n	8000ef2 <unwind_phase2_forced+0x46>
 8000f4c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000f4e:	4633      	mov	r3, r6
 8000f50:	6469      	str	r1, [r5, #68]	; 0x44
 8000f52:	4632      	mov	r2, r6
 8000f54:	2001      	movs	r0, #1
 8000f56:	e9cd 5800 	strd	r5, r8, [sp]
 8000f5a:	f04a 0110 	orr.w	r1, sl, #16
 8000f5e:	47b8      	blx	r7
 8000f60:	b100      	cbz	r0, 8000f64 <unwind_phase2_forced+0xb8>
 8000f62:	2409      	movs	r4, #9
 8000f64:	4620      	mov	r0, r4
 8000f66:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1ba 0f07 	cmp.w	sl, #7
 8000f72:	d1f6      	bne.n	8000f62 <unwind_phase2_forced+0xb6>
 8000f74:	4620      	mov	r0, r4
 8000f76:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f78:	f7ff ff76 	bl	8000e68 <_Unwind_DebugHook>
 8000f7c:	a803      	add	r0, sp, #12
 8000f7e:	f000 fb93 	bl	80016a8 <__restore_core_regs>
 8000f82:	bf00      	nop

08000f84 <_Unwind_GetCFA>:
 8000f84:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000f86:	4770      	bx	lr

08000f88 <__gnu_Unwind_RaiseException>:
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	f04f 37ff 	mov.w	r7, #4294967295
 8000f8e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000f90:	b0f9      	sub	sp, #484	; 0x1e4
 8000f92:	640b      	str	r3, [r1, #64]	; 0x40
 8000f94:	ac01      	add	r4, sp, #4
 8000f96:	f101 0c04 	add.w	ip, r1, #4
 8000f9a:	460e      	mov	r6, r1
 8000f9c:	4605      	mov	r5, r0
 8000f9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000faa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fb8:	9700      	str	r7, [sp, #0]
 8000fba:	e006      	b.n	8000fca <__gnu_Unwind_RaiseException+0x42>
 8000fbc:	466a      	mov	r2, sp
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	692b      	ldr	r3, [r5, #16]
 8000fc2:	4798      	blx	r3
 8000fc4:	2808      	cmp	r0, #8
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	d108      	bne.n	8000fdc <__gnu_Unwind_RaiseException+0x54>
 8000fca:	4628      	mov	r0, r5
 8000fcc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000fce:	f7ff fec7 	bl	8000d60 <get_eit_entry>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d0f2      	beq.n	8000fbc <__gnu_Unwind_RaiseException+0x34>
 8000fd6:	2009      	movs	r0, #9
 8000fd8:	b079      	add	sp, #484	; 0x1e4
 8000fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fdc:	4668      	mov	r0, sp
 8000fde:	f7ff ff0f 	bl	8000e00 <restore_non_core_regs>
 8000fe2:	2c06      	cmp	r4, #6
 8000fe4:	d1f7      	bne.n	8000fd6 <__gnu_Unwind_RaiseException+0x4e>
 8000fe6:	4631      	mov	r1, r6
 8000fe8:	4628      	mov	r0, r5
 8000fea:	f7ff ff3f 	bl	8000e6c <unwind_phase2>
 8000fee:	bf00      	nop

08000ff0 <__gnu_Unwind_ForcedUnwind>:
 8000ff0:	b410      	push	{r4}
 8000ff2:	4614      	mov	r4, r2
 8000ff4:	6184      	str	r4, [r0, #24]
 8000ff6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000ff8:	60c1      	str	r1, [r0, #12]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	641c      	str	r4, [r3, #64]	; 0x40
 8000ffe:	4619      	mov	r1, r3
 8001000:	bc10      	pop	{r4}
 8001002:	e753      	b.n	8000eac <unwind_phase2_forced>

08001004 <__gnu_Unwind_Resume>:
 8001004:	b570      	push	{r4, r5, r6, lr}
 8001006:	6943      	ldr	r3, [r0, #20]
 8001008:	68c6      	ldr	r6, [r0, #12]
 800100a:	640b      	str	r3, [r1, #64]	; 0x40
 800100c:	b9ae      	cbnz	r6, 800103a <__gnu_Unwind_Resume+0x36>
 800100e:	460a      	mov	r2, r1
 8001010:	6903      	ldr	r3, [r0, #16]
 8001012:	4604      	mov	r4, r0
 8001014:	460d      	mov	r5, r1
 8001016:	4601      	mov	r1, r0
 8001018:	2002      	movs	r0, #2
 800101a:	4798      	blx	r3
 800101c:	2807      	cmp	r0, #7
 800101e:	d005      	beq.n	800102c <__gnu_Unwind_Resume+0x28>
 8001020:	2808      	cmp	r0, #8
 8001022:	d10f      	bne.n	8001044 <__gnu_Unwind_Resume+0x40>
 8001024:	4629      	mov	r1, r5
 8001026:	4620      	mov	r0, r4
 8001028:	f7ff ff20 	bl	8000e6c <unwind_phase2>
 800102c:	4630      	mov	r0, r6
 800102e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001030:	f7ff ff1a 	bl	8000e68 <_Unwind_DebugHook>
 8001034:	1d28      	adds	r0, r5, #4
 8001036:	f000 fb37 	bl	80016a8 <__restore_core_regs>
 800103a:	2201      	movs	r2, #1
 800103c:	f7ff ff36 	bl	8000eac <unwind_phase2_forced>
 8001040:	f005 f8d8 	bl	80061f4 <abort>
 8001044:	f005 f8d6 	bl	80061f4 <abort>

08001048 <__gnu_Unwind_Resume_or_Rethrow>:
 8001048:	68c2      	ldr	r2, [r0, #12]
 800104a:	b12a      	cbz	r2, 8001058 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 800104c:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 8001050:	2200      	movs	r2, #0
 8001052:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 8001056:	e729      	b.n	8000eac <unwind_phase2_forced>
 8001058:	e796      	b.n	8000f88 <__gnu_Unwind_RaiseException>
 800105a:	bf00      	nop

0800105c <_Unwind_Complete>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <_Unwind_DeleteException>:
 8001060:	6883      	ldr	r3, [r0, #8]
 8001062:	4601      	mov	r1, r0
 8001064:	b10b      	cbz	r3, 800106a <_Unwind_DeleteException+0xa>
 8001066:	2001      	movs	r0, #1
 8001068:	4718      	bx	r3
 800106a:	4770      	bx	lr

0800106c <_Unwind_VRS_Get>:
 800106c:	2901      	cmp	r1, #1
 800106e:	d012      	beq.n	8001096 <_Unwind_VRS_Get+0x2a>
 8001070:	d809      	bhi.n	8001086 <_Unwind_VRS_Get+0x1a>
 8001072:	b973      	cbnz	r3, 8001092 <_Unwind_VRS_Get+0x26>
 8001074:	2a0f      	cmp	r2, #15
 8001076:	d80c      	bhi.n	8001092 <_Unwind_VRS_Get+0x26>
 8001078:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800107c:	6842      	ldr	r2, [r0, #4]
 800107e:	4618      	mov	r0, r3
 8001080:	9b00      	ldr	r3, [sp, #0]
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	4770      	bx	lr
 8001086:	3903      	subs	r1, #3
 8001088:	2901      	cmp	r1, #1
 800108a:	bf94      	ite	ls
 800108c:	2001      	movls	r0, #1
 800108e:	2002      	movhi	r0, #2
 8001090:	4770      	bx	lr
 8001092:	2002      	movs	r0, #2
 8001094:	4770      	bx	lr
 8001096:	4608      	mov	r0, r1
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <_Unwind_GetGR>:
 800109c:	2300      	movs	r3, #0
 800109e:	b500      	push	{lr}
 80010a0:	b085      	sub	sp, #20
 80010a2:	460a      	mov	r2, r1
 80010a4:	a903      	add	r1, sp, #12
 80010a6:	9100      	str	r1, [sp, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff ffdf 	bl	800106c <_Unwind_VRS_Get>
 80010ae:	9803      	ldr	r0, [sp, #12]
 80010b0:	b005      	add	sp, #20
 80010b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010b6:	bf00      	nop

080010b8 <_Unwind_VRS_Set>:
 80010b8:	2901      	cmp	r1, #1
 80010ba:	d012      	beq.n	80010e2 <_Unwind_VRS_Set+0x2a>
 80010bc:	d809      	bhi.n	80010d2 <_Unwind_VRS_Set+0x1a>
 80010be:	b973      	cbnz	r3, 80010de <_Unwind_VRS_Set+0x26>
 80010c0:	2a0f      	cmp	r2, #15
 80010c2:	d80c      	bhi.n	80010de <_Unwind_VRS_Set+0x26>
 80010c4:	9900      	ldr	r1, [sp, #0]
 80010c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80010ca:	6809      	ldr	r1, [r1, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	6051      	str	r1, [r2, #4]
 80010d0:	4770      	bx	lr
 80010d2:	3903      	subs	r1, #3
 80010d4:	2901      	cmp	r1, #1
 80010d6:	bf94      	ite	ls
 80010d8:	2001      	movls	r0, #1
 80010da:	2002      	movhi	r0, #2
 80010dc:	4770      	bx	lr
 80010de:	2002      	movs	r0, #2
 80010e0:	4770      	bx	lr
 80010e2:	4608      	mov	r0, r1
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <_Unwind_SetGR>:
 80010e8:	2300      	movs	r3, #0
 80010ea:	b510      	push	{r4, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	ac03      	add	r4, sp, #12
 80010f0:	9203      	str	r2, [sp, #12]
 80010f2:	9400      	str	r4, [sp, #0]
 80010f4:	460a      	mov	r2, r1
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff ffde 	bl	80010b8 <_Unwind_VRS_Set>
 80010fc:	b004      	add	sp, #16
 80010fe:	bd10      	pop	{r4, pc}

08001100 <__gnu_Unwind_Backtrace>:
 8001100:	b570      	push	{r4, r5, r6, lr}
 8001102:	f04f 36ff 	mov.w	r6, #4294967295
 8001106:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001108:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8001112:	f102 0c04 	add.w	ip, r2, #4
 8001116:	4605      	mov	r5, r0
 8001118:	460c      	mov	r4, r1
 800111a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800111e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001122:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001126:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800112a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800112e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001132:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001136:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800113a:	9616      	str	r6, [sp, #88]	; 0x58
 800113c:	e012      	b.n	8001164 <__gnu_Unwind_Backtrace+0x64>
 800113e:	210c      	movs	r1, #12
 8001140:	a816      	add	r0, sp, #88	; 0x58
 8001142:	466a      	mov	r2, sp
 8001144:	f7ff ffd0 	bl	80010e8 <_Unwind_SetGR>
 8001148:	4621      	mov	r1, r4
 800114a:	a816      	add	r0, sp, #88	; 0x58
 800114c:	47a8      	blx	r5
 800114e:	b978      	cbnz	r0, 8001170 <__gnu_Unwind_Backtrace+0x70>
 8001150:	4669      	mov	r1, sp
 8001152:	2008      	movs	r0, #8
 8001154:	9b04      	ldr	r3, [sp, #16]
 8001156:	aa16      	add	r2, sp, #88	; 0x58
 8001158:	4798      	blx	r3
 800115a:	2805      	cmp	r0, #5
 800115c:	4606      	mov	r6, r0
 800115e:	d008      	beq.n	8001172 <__gnu_Unwind_Backtrace+0x72>
 8001160:	2809      	cmp	r0, #9
 8001162:	d005      	beq.n	8001170 <__gnu_Unwind_Backtrace+0x70>
 8001164:	4668      	mov	r0, sp
 8001166:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001168:	f7ff fdfa 	bl	8000d60 <get_eit_entry>
 800116c:	2800      	cmp	r0, #0
 800116e:	d0e6      	beq.n	800113e <__gnu_Unwind_Backtrace+0x3e>
 8001170:	2609      	movs	r6, #9
 8001172:	a816      	add	r0, sp, #88	; 0x58
 8001174:	f7ff fe44 	bl	8000e00 <restore_non_core_regs>
 8001178:	4630      	mov	r0, r6
 800117a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800117e:	bd70      	pop	{r4, r5, r6, pc}

08001180 <__gnu_unwind_pr_common>:
 8001180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001184:	461e      	mov	r6, r3
 8001186:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8001188:	b089      	sub	sp, #36	; 0x24
 800118a:	f854 3b04 	ldr.w	r3, [r4], #4
 800118e:	460d      	mov	r5, r1
 8001190:	4617      	mov	r7, r2
 8001192:	f000 0803 	and.w	r8, r0, #3
 8001196:	9406      	str	r4, [sp, #24]
 8001198:	2e00      	cmp	r6, #0
 800119a:	d079      	beq.n	8001290 <__gnu_unwind_pr_common+0x110>
 800119c:	2202      	movs	r2, #2
 800119e:	f88d 201c 	strb.w	r2, [sp, #28]
 80011a2:	0c1a      	lsrs	r2, r3, #16
 80011a4:	f88d 201d 	strb.w	r2, [sp, #29]
 80011a8:	041b      	lsls	r3, r3, #16
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	9305      	str	r3, [sp, #20]
 80011ae:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80011b2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80011b4:	f1b8 0f02 	cmp.w	r8, #2
 80011b8:	bf08      	it	eq
 80011ba:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80011bc:	f013 0301 	ands.w	r3, r3, #1
 80011c0:	d00c      	beq.n	80011dc <__gnu_unwind_pr_common+0x5c>
 80011c2:	4638      	mov	r0, r7
 80011c4:	a905      	add	r1, sp, #20
 80011c6:	f000 fb71 	bl	80018ac <__gnu_unwind_execute>
 80011ca:	b918      	cbnz	r0, 80011d4 <__gnu_unwind_pr_common+0x54>
 80011cc:	2008      	movs	r0, #8
 80011ce:	b009      	add	sp, #36	; 0x24
 80011d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011d4:	2009      	movs	r0, #9
 80011d6:	b009      	add	sp, #36	; 0x24
 80011d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011dc:	f8d4 a000 	ldr.w	sl, [r4]
 80011e0:	f1ba 0f00 	cmp.w	sl, #0
 80011e4:	d0ed      	beq.n	80011c2 <__gnu_unwind_pr_common+0x42>
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	f000 0308 	and.w	r3, r0, #8
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	2e02      	cmp	r6, #2
 80011f0:	d04a      	beq.n	8001288 <__gnu_unwind_pr_common+0x108>
 80011f2:	f8b4 a000 	ldrh.w	sl, [r4]
 80011f6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80011fa:	3404      	adds	r4, #4
 80011fc:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80011fe:	210f      	movs	r1, #15
 8001200:	4638      	mov	r0, r7
 8001202:	f029 0b01 	bic.w	fp, r9, #1
 8001206:	4493      	add	fp, r2
 8001208:	f7ff ff48 	bl	800109c <_Unwind_GetGR>
 800120c:	4583      	cmp	fp, r0
 800120e:	d839      	bhi.n	8001284 <__gnu_unwind_pr_common+0x104>
 8001210:	f02a 0201 	bic.w	r2, sl, #1
 8001214:	445a      	add	r2, fp
 8001216:	4282      	cmp	r2, r0
 8001218:	bf94      	ite	ls
 800121a:	2000      	movls	r0, #0
 800121c:	2001      	movhi	r0, #1
 800121e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	f00a 0a01 	and.w	sl, sl, #1
 800122a:	ea43 030a 	orr.w	r3, r3, sl
 800122e:	2b01      	cmp	r3, #1
 8001230:	d049      	beq.n	80012c6 <__gnu_unwind_pr_common+0x146>
 8001232:	2b02      	cmp	r3, #2
 8001234:	d032      	beq.n	800129c <__gnu_unwind_pr_common+0x11c>
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1cc      	bne.n	80011d4 <__gnu_unwind_pr_common+0x54>
 800123a:	f1b8 0f00 	cmp.w	r8, #0
 800123e:	d002      	beq.n	8001246 <__gnu_unwind_pr_common+0xc6>
 8001240:	2800      	cmp	r0, #0
 8001242:	f040 80ce 	bne.w	80013e2 <__gnu_unwind_pr_common+0x262>
 8001246:	3404      	adds	r4, #4
 8001248:	f8d4 a000 	ldr.w	sl, [r4]
 800124c:	f1ba 0f00 	cmp.w	sl, #0
 8001250:	d1cd      	bne.n	80011ee <__gnu_unwind_pr_common+0x6e>
 8001252:	4638      	mov	r0, r7
 8001254:	a905      	add	r1, sp, #20
 8001256:	f000 fb29 	bl	80018ac <__gnu_unwind_execute>
 800125a:	2800      	cmp	r0, #0
 800125c:	d1ba      	bne.n	80011d4 <__gnu_unwind_pr_common+0x54>
 800125e:	9b01      	ldr	r3, [sp, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0b3      	beq.n	80011cc <__gnu_unwind_pr_common+0x4c>
 8001264:	210f      	movs	r1, #15
 8001266:	4638      	mov	r0, r7
 8001268:	f7ff ff18 	bl	800109c <_Unwind_GetGR>
 800126c:	210e      	movs	r1, #14
 800126e:	4602      	mov	r2, r0
 8001270:	4638      	mov	r0, r7
 8001272:	f7ff ff39 	bl	80010e8 <_Unwind_SetGR>
 8001276:	4638      	mov	r0, r7
 8001278:	210f      	movs	r1, #15
 800127a:	4a6a      	ldr	r2, [pc, #424]	; (8001424 <__gnu_unwind_pr_common+0x2a4>)
 800127c:	f7ff ff34 	bl	80010e8 <_Unwind_SetGR>
 8001280:	2007      	movs	r0, #7
 8001282:	e7a8      	b.n	80011d6 <__gnu_unwind_pr_common+0x56>
 8001284:	2000      	movs	r0, #0
 8001286:	e7ca      	b.n	800121e <__gnu_unwind_pr_common+0x9e>
 8001288:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800128c:	3408      	adds	r4, #8
 800128e:	e7b5      	b.n	80011fc <__gnu_unwind_pr_common+0x7c>
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	9305      	str	r3, [sp, #20]
 8001294:	2303      	movs	r3, #3
 8001296:	f8ad 301c 	strh.w	r3, [sp, #28]
 800129a:	e78a      	b.n	80011b2 <__gnu_unwind_pr_common+0x32>
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80012a2:	f1b8 0f00 	cmp.w	r8, #0
 80012a6:	d145      	bne.n	8001334 <__gnu_unwind_pr_common+0x1b4>
 80012a8:	b128      	cbz	r0, 80012b6 <__gnu_unwind_pr_common+0x136>
 80012aa:	9a02      	ldr	r2, [sp, #8]
 80012ac:	2a00      	cmp	r2, #0
 80012ae:	d05c      	beq.n	800136a <__gnu_unwind_pr_common+0x1ea>
 80012b0:	f1bb 0f00 	cmp.w	fp, #0
 80012b4:	d074      	beq.n	80013a0 <__gnu_unwind_pr_common+0x220>
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	da00      	bge.n	80012bc <__gnu_unwind_pr_common+0x13c>
 80012ba:	3404      	adds	r4, #4
 80012bc:	f10b 0b01 	add.w	fp, fp, #1
 80012c0:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 80012c4:	e7c0      	b.n	8001248 <__gnu_unwind_pr_common+0xc8>
 80012c6:	f1b8 0f00 	cmp.w	r8, #0
 80012ca:	d119      	bne.n	8001300 <__gnu_unwind_pr_common+0x180>
 80012cc:	b1b0      	cbz	r0, 80012fc <__gnu_unwind_pr_common+0x17c>
 80012ce:	6863      	ldr	r3, [r4, #4]
 80012d0:	6822      	ldr	r2, [r4, #0]
 80012d2:	1c99      	adds	r1, r3, #2
 80012d4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80012d8:	f43f af7c 	beq.w	80011d4 <__gnu_unwind_pr_common+0x54>
 80012dc:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80012e0:	3301      	adds	r3, #1
 80012e2:	9104      	str	r1, [sp, #16]
 80012e4:	f000 8091 	beq.w	800140a <__gnu_unwind_pr_common+0x28a>
 80012e8:	1d20      	adds	r0, r4, #4
 80012ea:	f7ff fdb7 	bl	8000e5c <_Unwind_decode_typeinfo_ptr.constprop.0>
 80012ee:	ab04      	add	r3, sp, #16
 80012f0:	4601      	mov	r1, r0
 80012f2:	4628      	mov	r0, r5
 80012f4:	f004 facc 	bl	8005890 <__cxa_type_match>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d15c      	bne.n	80013b6 <__gnu_unwind_pr_common+0x236>
 80012fc:	3408      	adds	r4, #8
 80012fe:	e7a3      	b.n	8001248 <__gnu_unwind_pr_common+0xc8>
 8001300:	210d      	movs	r1, #13
 8001302:	4638      	mov	r0, r7
 8001304:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8001308:	f7ff fec8 	bl	800109c <_Unwind_GetGR>
 800130c:	4581      	cmp	r9, r0
 800130e:	d1f5      	bne.n	80012fc <__gnu_unwind_pr_common+0x17c>
 8001310:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001312:	429c      	cmp	r4, r3
 8001314:	d1f2      	bne.n	80012fc <__gnu_unwind_pr_common+0x17c>
 8001316:	4620      	mov	r0, r4
 8001318:	f7ff fcd4 	bl	8000cc4 <selfrel_offset31>
 800131c:	210f      	movs	r1, #15
 800131e:	4602      	mov	r2, r0
 8001320:	4638      	mov	r0, r7
 8001322:	f7ff fee1 	bl	80010e8 <_Unwind_SetGR>
 8001326:	4638      	mov	r0, r7
 8001328:	462a      	mov	r2, r5
 800132a:	2100      	movs	r1, #0
 800132c:	f7ff fedc 	bl	80010e8 <_Unwind_SetGR>
 8001330:	2007      	movs	r0, #7
 8001332:	e750      	b.n	80011d6 <__gnu_unwind_pr_common+0x56>
 8001334:	210d      	movs	r1, #13
 8001336:	4638      	mov	r0, r7
 8001338:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800133c:	f7ff feae 	bl	800109c <_Unwind_GetGR>
 8001340:	4581      	cmp	r9, r0
 8001342:	d001      	beq.n	8001348 <__gnu_unwind_pr_common+0x1c8>
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	e7b6      	b.n	80012b6 <__gnu_unwind_pr_common+0x136>
 8001348:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800134a:	429c      	cmp	r4, r3
 800134c:	d1fa      	bne.n	8001344 <__gnu_unwind_pr_common+0x1c4>
 800134e:	2304      	movs	r3, #4
 8001350:	2200      	movs	r2, #0
 8001352:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8001356:	18e3      	adds	r3, r4, r3
 8001358:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 800135c:	636b      	str	r3, [r5, #52]	; 0x34
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db5a      	blt.n	800141a <__gnu_unwind_pr_common+0x29a>
 8001364:	2301      	movs	r3, #1
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	e7a8      	b.n	80012bc <__gnu_unwind_pr_common+0x13c>
 800136a:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800136e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001372:	4691      	mov	r9, r2
 8001374:	46b0      	mov	r8, r6
 8001376:	f104 0a04 	add.w	sl, r4, #4
 800137a:	461e      	mov	r6, r3
 800137c:	e00e      	b.n	800139c <__gnu_unwind_pr_common+0x21c>
 800137e:	4650      	mov	r0, sl
 8001380:	9604      	str	r6, [sp, #16]
 8001382:	f7ff fd6b 	bl	8000e5c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001386:	2200      	movs	r2, #0
 8001388:	4601      	mov	r1, r0
 800138a:	ab04      	add	r3, sp, #16
 800138c:	4628      	mov	r0, r5
 800138e:	f109 0901 	add.w	r9, r9, #1
 8001392:	f10a 0a04 	add.w	sl, sl, #4
 8001396:	f004 fa7b 	bl	8005890 <__cxa_type_match>
 800139a:	b9e8      	cbnz	r0, 80013d8 <__gnu_unwind_pr_common+0x258>
 800139c:	45d9      	cmp	r9, fp
 800139e:	d1ee      	bne.n	800137e <__gnu_unwind_pr_common+0x1fe>
 80013a0:	210d      	movs	r1, #13
 80013a2:	4638      	mov	r0, r7
 80013a4:	f7ff fe7a 	bl	800109c <_Unwind_GetGR>
 80013a8:	4603      	mov	r3, r0
 80013aa:	9a04      	ldr	r2, [sp, #16]
 80013ac:	2006      	movs	r0, #6
 80013ae:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 80013b2:	622b      	str	r3, [r5, #32]
 80013b4:	e70f      	b.n	80011d6 <__gnu_unwind_pr_common+0x56>
 80013b6:	4681      	mov	r9, r0
 80013b8:	210d      	movs	r1, #13
 80013ba:	4638      	mov	r0, r7
 80013bc:	f7ff fe6e 	bl	800109c <_Unwind_GetGR>
 80013c0:	f1b9 0f02 	cmp.w	r9, #2
 80013c4:	6228      	str	r0, [r5, #32]
 80013c6:	d125      	bne.n	8001414 <__gnu_unwind_pr_common+0x294>
 80013c8:	462b      	mov	r3, r5
 80013ca:	9a04      	ldr	r2, [sp, #16]
 80013cc:	f843 2f2c 	str.w	r2, [r3, #44]!
 80013d0:	626b      	str	r3, [r5, #36]	; 0x24
 80013d2:	2006      	movs	r0, #6
 80013d4:	62ac      	str	r4, [r5, #40]	; 0x28
 80013d6:	e6fe      	b.n	80011d6 <__gnu_unwind_pr_common+0x56>
 80013d8:	4646      	mov	r6, r8
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80013e0:	e769      	b.n	80012b6 <__gnu_unwind_pr_common+0x136>
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff fc6e 	bl	8000cc4 <selfrel_offset31>
 80013e8:	4602      	mov	r2, r0
 80013ea:	3404      	adds	r4, #4
 80013ec:	63ac      	str	r4, [r5, #56]	; 0x38
 80013ee:	4628      	mov	r0, r5
 80013f0:	4614      	mov	r4, r2
 80013f2:	f004 faab 	bl	800594c <__cxa_begin_cleanup>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	f43f aeec 	beq.w	80011d4 <__gnu_unwind_pr_common+0x54>
 80013fc:	4638      	mov	r0, r7
 80013fe:	4622      	mov	r2, r4
 8001400:	210f      	movs	r1, #15
 8001402:	f7ff fe71 	bl	80010e8 <_Unwind_SetGR>
 8001406:	2007      	movs	r0, #7
 8001408:	e6e5      	b.n	80011d6 <__gnu_unwind_pr_common+0x56>
 800140a:	210d      	movs	r1, #13
 800140c:	4638      	mov	r0, r7
 800140e:	f7ff fe45 	bl	800109c <_Unwind_GetGR>
 8001412:	6228      	str	r0, [r5, #32]
 8001414:	9b04      	ldr	r3, [sp, #16]
 8001416:	626b      	str	r3, [r5, #36]	; 0x24
 8001418:	e7db      	b.n	80013d2 <__gnu_unwind_pr_common+0x252>
 800141a:	f10b 0001 	add.w	r0, fp, #1
 800141e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001422:	e779      	b.n	8001318 <__gnu_unwind_pr_common+0x198>
 8001424:	08006141 	.word	0x08006141

08001428 <__aeabi_unwind_cpp_pr0>:
 8001428:	2300      	movs	r3, #0
 800142a:	e6a9      	b.n	8001180 <__gnu_unwind_pr_common>

0800142c <__aeabi_unwind_cpp_pr1>:
 800142c:	2301      	movs	r3, #1
 800142e:	e6a7      	b.n	8001180 <__gnu_unwind_pr_common>

08001430 <__aeabi_unwind_cpp_pr2>:
 8001430:	2302      	movs	r3, #2
 8001432:	e6a5      	b.n	8001180 <__gnu_unwind_pr_common>

08001434 <_Unwind_VRS_Pop>:
 8001434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001438:	4606      	mov	r6, r0
 800143a:	4615      	mov	r5, r2
 800143c:	461c      	mov	r4, r3
 800143e:	b0c3      	sub	sp, #268	; 0x10c
 8001440:	2904      	cmp	r1, #4
 8001442:	f200 80b8 	bhi.w	80015b6 <_Unwind_VRS_Pop+0x182>
 8001446:	e8df f001 	tbb	[pc, r1]
 800144a:	569c      	.short	0x569c
 800144c:	2db6      	.short	0x2db6
 800144e:	03          	.byte	0x03
 800144f:	00          	.byte	0x00
 8001450:	2c00      	cmp	r4, #0
 8001452:	f040 80b0 	bne.w	80015b6 <_Unwind_VRS_Pop+0x182>
 8001456:	2a10      	cmp	r2, #16
 8001458:	f200 80ad 	bhi.w	80015b6 <_Unwind_VRS_Pop+0x182>
 800145c:	6803      	ldr	r3, [r0, #0]
 800145e:	06d8      	lsls	r0, r3, #27
 8001460:	f100 80f1 	bmi.w	8001646 <_Unwind_VRS_Pop+0x212>
 8001464:	af20      	add	r7, sp, #128	; 0x80
 8001466:	4638      	mov	r0, r7
 8001468:	f000 f990 	bl	800178c <__gnu_Unwind_Save_WMMXC>
 800146c:	2401      	movs	r4, #1
 800146e:	4638      	mov	r0, r7
 8001470:	2300      	movs	r3, #0
 8001472:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8001474:	fa04 f203 	lsl.w	r2, r4, r3
 8001478:	422a      	tst	r2, r5
 800147a:	f103 0301 	add.w	r3, r3, #1
 800147e:	d005      	beq.n	800148c <_Unwind_VRS_Pop+0x58>
 8001480:	460a      	mov	r2, r1
 8001482:	f852 cb04 	ldr.w	ip, [r2], #4
 8001486:	4611      	mov	r1, r2
 8001488:	f8c0 c000 	str.w	ip, [r0]
 800148c:	2b04      	cmp	r3, #4
 800148e:	f100 0004 	add.w	r0, r0, #4
 8001492:	d1ef      	bne.n	8001474 <_Unwind_VRS_Pop+0x40>
 8001494:	4638      	mov	r0, r7
 8001496:	63b1      	str	r1, [r6, #56]	; 0x38
 8001498:	f000 f96e 	bl	8001778 <__gnu_Unwind_Restore_WMMXC>
 800149c:	2000      	movs	r0, #0
 800149e:	b043      	add	sp, #268	; 0x10c
 80014a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014a4:	2c03      	cmp	r4, #3
 80014a6:	f040 8086 	bne.w	80015b6 <_Unwind_VRS_Pop+0x182>
 80014aa:	b294      	uxth	r4, r2
 80014ac:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 80014b0:	2b10      	cmp	r3, #16
 80014b2:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80014b6:	d87e      	bhi.n	80015b6 <_Unwind_VRS_Pop+0x182>
 80014b8:	6803      	ldr	r3, [r0, #0]
 80014ba:	071f      	lsls	r7, r3, #28
 80014bc:	f100 80cb 	bmi.w	8001656 <_Unwind_VRS_Pop+0x222>
 80014c0:	af20      	add	r7, sp, #128	; 0x80
 80014c2:	4638      	mov	r0, r7
 80014c4:	f000 f936 	bl	8001734 <__gnu_Unwind_Save_WMMXD>
 80014c8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80014ca:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80014ce:	b154      	cbz	r4, 80014e6 <_Unwind_VRS_Pop+0xb2>
 80014d0:	460b      	mov	r3, r1
 80014d2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80014d6:	1ad0      	subs	r0, r2, r3
 80014d8:	00e4      	lsls	r4, r4, #3
 80014da:	581d      	ldr	r5, [r3, r0]
 80014dc:	f843 5b04 	str.w	r5, [r3], #4
 80014e0:	428b      	cmp	r3, r1
 80014e2:	d1fa      	bne.n	80014da <_Unwind_VRS_Pop+0xa6>
 80014e4:	4422      	add	r2, r4
 80014e6:	4638      	mov	r0, r7
 80014e8:	63b2      	str	r2, [r6, #56]	; 0x38
 80014ea:	f000 f901 	bl	80016f0 <__gnu_Unwind_Restore_WMMXD>
 80014ee:	2000      	movs	r0, #0
 80014f0:	b043      	add	sp, #268	; 0x10c
 80014f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014f6:	2c01      	cmp	r4, #1
 80014f8:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80014fc:	b295      	uxth	r5, r2
 80014fe:	d056      	beq.n	80015ae <_Unwind_VRS_Pop+0x17a>
 8001500:	2c05      	cmp	r4, #5
 8001502:	d158      	bne.n	80015b6 <_Unwind_VRS_Pop+0x182>
 8001504:	eb08 0905 	add.w	r9, r8, r5
 8001508:	f1b9 0f20 	cmp.w	r9, #32
 800150c:	d853      	bhi.n	80015b6 <_Unwind_VRS_Pop+0x182>
 800150e:	f1b8 0f0f 	cmp.w	r8, #15
 8001512:	d973      	bls.n	80015fc <_Unwind_VRS_Pop+0x1c8>
 8001514:	46a9      	mov	r9, r5
 8001516:	2d00      	cmp	r5, #0
 8001518:	f040 8084 	bne.w	8001624 <_Unwind_VRS_Pop+0x1f0>
 800151c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800151e:	b365      	cbz	r5, 800157a <_Unwind_VRS_Pop+0x146>
 8001520:	af20      	add	r7, sp, #128	; 0x80
 8001522:	f04f 0900 	mov.w	r9, #0
 8001526:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800152a:	3f04      	subs	r7, #4
 800152c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8001530:	f853 1b04 	ldr.w	r1, [r3], #4
 8001534:	42ab      	cmp	r3, r5
 8001536:	f847 1f04 	str.w	r1, [r7, #4]!
 800153a:	d1f9      	bne.n	8001530 <_Unwind_VRS_Pop+0xfc>
 800153c:	f1b9 0f00 	cmp.w	r9, #0
 8001540:	d00f      	beq.n	8001562 <_Unwind_VRS_Pop+0x12e>
 8001542:	466f      	mov	r7, sp
 8001544:	4641      	mov	r1, r8
 8001546:	2910      	cmp	r1, #16
 8001548:	bf38      	it	cc
 800154a:	2110      	movcc	r1, #16
 800154c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001550:	3984      	subs	r1, #132	; 0x84
 8001552:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8001556:	f853 0b04 	ldr.w	r0, [r3], #4
 800155a:	42ab      	cmp	r3, r5
 800155c:	f841 0f04 	str.w	r0, [r1, #4]!
 8001560:	d1f9      	bne.n	8001556 <_Unwind_VRS_Pop+0x122>
 8001562:	2c01      	cmp	r4, #1
 8001564:	d07f      	beq.n	8001666 <_Unwind_VRS_Pop+0x232>
 8001566:	f1b8 0f0f 	cmp.w	r8, #15
 800156a:	63b5      	str	r5, [r6, #56]	; 0x38
 800156c:	d942      	bls.n	80015f4 <_Unwind_VRS_Pop+0x1c0>
 800156e:	f1b9 0f00 	cmp.w	r9, #0
 8001572:	d002      	beq.n	800157a <_Unwind_VRS_Pop+0x146>
 8001574:	4668      	mov	r0, sp
 8001576:	f000 f8b3 	bl	80016e0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800157a:	2000      	movs	r0, #0
 800157c:	b043      	add	sp, #268	; 0x10c
 800157e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001582:	b9c4      	cbnz	r4, 80015b6 <_Unwind_VRS_Pop+0x182>
 8001584:	4623      	mov	r3, r4
 8001586:	2401      	movs	r4, #1
 8001588:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800158a:	1d37      	adds	r7, r6, #4
 800158c:	b2a8      	uxth	r0, r5
 800158e:	fa04 f103 	lsl.w	r1, r4, r3
 8001592:	4201      	tst	r1, r0
 8001594:	bf1c      	itt	ne
 8001596:	f852 1b04 	ldrne.w	r1, [r2], #4
 800159a:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 800159e:	3301      	adds	r3, #1
 80015a0:	2b10      	cmp	r3, #16
 80015a2:	d1f4      	bne.n	800158e <_Unwind_VRS_Pop+0x15a>
 80015a4:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 80015a8:	d1e7      	bne.n	800157a <_Unwind_VRS_Pop+0x146>
 80015aa:	63b2      	str	r2, [r6, #56]	; 0x38
 80015ac:	e004      	b.n	80015b8 <_Unwind_VRS_Pop+0x184>
 80015ae:	eb08 0305 	add.w	r3, r8, r5
 80015b2:	2b10      	cmp	r3, #16
 80015b4:	d903      	bls.n	80015be <_Unwind_VRS_Pop+0x18a>
 80015b6:	2002      	movs	r0, #2
 80015b8:	b043      	add	sp, #268	; 0x10c
 80015ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015be:	f1b8 0f0f 	cmp.w	r8, #15
 80015c2:	d8f8      	bhi.n	80015b6 <_Unwind_VRS_Pop+0x182>
 80015c4:	6833      	ldr	r3, [r6, #0]
 80015c6:	07da      	lsls	r2, r3, #31
 80015c8:	d506      	bpl.n	80015d8 <_Unwind_VRS_Pop+0x1a4>
 80015ca:	4630      	mov	r0, r6
 80015cc:	f023 0303 	bic.w	r3, r3, #3
 80015d0:	f840 3b48 	str.w	r3, [r0], #72
 80015d4:	f000 f878 	bl	80016c8 <__gnu_Unwind_Save_VFP>
 80015d8:	af20      	add	r7, sp, #128	; 0x80
 80015da:	4638      	mov	r0, r7
 80015dc:	f000 f874 	bl	80016c8 <__gnu_Unwind_Save_VFP>
 80015e0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80015e2:	2d00      	cmp	r5, #0
 80015e4:	d19d      	bne.n	8001522 <_Unwind_VRS_Pop+0xee>
 80015e6:	461d      	mov	r5, r3
 80015e8:	3504      	adds	r5, #4
 80015ea:	4638      	mov	r0, r7
 80015ec:	63b5      	str	r5, [r6, #56]	; 0x38
 80015ee:	f000 f867 	bl	80016c0 <__gnu_Unwind_Restore_VFP>
 80015f2:	e7c2      	b.n	800157a <_Unwind_VRS_Pop+0x146>
 80015f4:	a820      	add	r0, sp, #128	; 0x80
 80015f6:	f000 f86b 	bl	80016d0 <__gnu_Unwind_Restore_VFP_D>
 80015fa:	e7b8      	b.n	800156e <_Unwind_VRS_Pop+0x13a>
 80015fc:	f1b9 0f10 	cmp.w	r9, #16
 8001600:	d93f      	bls.n	8001682 <_Unwind_VRS_Pop+0x24e>
 8001602:	f1a9 0910 	sub.w	r9, r9, #16
 8001606:	6833      	ldr	r3, [r6, #0]
 8001608:	07d9      	lsls	r1, r3, #31
 800160a:	d508      	bpl.n	800161e <_Unwind_VRS_Pop+0x1ea>
 800160c:	4630      	mov	r0, r6
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	f840 3b48 	str.w	r3, [r0], #72
 800161a:	f000 f85d 	bl	80016d8 <__gnu_Unwind_Save_VFP_D>
 800161e:	f1b9 0f00 	cmp.w	r9, #0
 8001622:	d031      	beq.n	8001688 <_Unwind_VRS_Pop+0x254>
 8001624:	6833      	ldr	r3, [r6, #0]
 8001626:	075a      	lsls	r2, r3, #29
 8001628:	d41f      	bmi.n	800166a <_Unwind_VRS_Pop+0x236>
 800162a:	f1b8 0f0f 	cmp.w	r8, #15
 800162e:	d924      	bls.n	800167a <_Unwind_VRS_Pop+0x246>
 8001630:	466f      	mov	r7, sp
 8001632:	f1c8 0510 	rsb	r5, r8, #16
 8001636:	4638      	mov	r0, r7
 8001638:	f000 f856 	bl	80016e8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800163c:	2d00      	cmp	r5, #0
 800163e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001640:	dd80      	ble.n	8001544 <_Unwind_VRS_Pop+0x110>
 8001642:	af20      	add	r7, sp, #128	; 0x80
 8001644:	e76f      	b.n	8001526 <_Unwind_VRS_Pop+0xf2>
 8001646:	f023 0310 	bic.w	r3, r3, #16
 800164a:	6033      	str	r3, [r6, #0]
 800164c:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8001650:	f000 f89c 	bl	800178c <__gnu_Unwind_Save_WMMXC>
 8001654:	e706      	b.n	8001464 <_Unwind_VRS_Pop+0x30>
 8001656:	f023 0308 	bic.w	r3, r3, #8
 800165a:	6003      	str	r3, [r0, #0]
 800165c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001660:	f000 f868 	bl	8001734 <__gnu_Unwind_Save_WMMXD>
 8001664:	e72c      	b.n	80014c0 <_Unwind_VRS_Pop+0x8c>
 8001666:	af20      	add	r7, sp, #128	; 0x80
 8001668:	e7be      	b.n	80015e8 <_Unwind_VRS_Pop+0x1b4>
 800166a:	4630      	mov	r0, r6
 800166c:	f023 0304 	bic.w	r3, r3, #4
 8001670:	f840 3bd0 	str.w	r3, [r0], #208
 8001674:	f000 f838 	bl	80016e8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001678:	e7d7      	b.n	800162a <_Unwind_VRS_Pop+0x1f6>
 800167a:	a820      	add	r0, sp, #128	; 0x80
 800167c:	f000 f82c 	bl	80016d8 <__gnu_Unwind_Save_VFP_D>
 8001680:	e7d6      	b.n	8001630 <_Unwind_VRS_Pop+0x1fc>
 8001682:	f04f 0900 	mov.w	r9, #0
 8001686:	e7be      	b.n	8001606 <_Unwind_VRS_Pop+0x1d2>
 8001688:	f1b8 0f0f 	cmp.w	r8, #15
 800168c:	f63f af46 	bhi.w	800151c <_Unwind_VRS_Pop+0xe8>
 8001690:	af20      	add	r7, sp, #128	; 0x80
 8001692:	4638      	mov	r0, r7
 8001694:	f000 f820 	bl	80016d8 <__gnu_Unwind_Save_VFP_D>
 8001698:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800169a:	2d00      	cmp	r5, #0
 800169c:	f47f af41 	bne.w	8001522 <_Unwind_VRS_Pop+0xee>
 80016a0:	4638      	mov	r0, r7
 80016a2:	f000 f815 	bl	80016d0 <__gnu_Unwind_Restore_VFP_D>
 80016a6:	e768      	b.n	800157a <_Unwind_VRS_Pop+0x146>

080016a8 <__restore_core_regs>:
 80016a8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80016ac:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80016b0:	469c      	mov	ip, r3
 80016b2:	46a6      	mov	lr, r4
 80016b4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80016b8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80016bc:	46e5      	mov	sp, ip
 80016be:	bd00      	pop	{pc}

080016c0 <__gnu_Unwind_Restore_VFP>:
 80016c0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <__gnu_Unwind_Save_VFP>:
 80016c8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop

080016d0 <__gnu_Unwind_Restore_VFP_D>:
 80016d0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <__gnu_Unwind_Save_VFP_D>:
 80016d8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop

080016e0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80016e0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop

080016e8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80016e8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop

080016f0 <__gnu_Unwind_Restore_WMMXD>:
 80016f0:	ecf0 0102 	ldfe	f0, [r0], #8
 80016f4:	ecf0 1102 	ldfe	f1, [r0], #8
 80016f8:	ecf0 2102 	ldfe	f2, [r0], #8
 80016fc:	ecf0 3102 	ldfe	f3, [r0], #8
 8001700:	ecf0 4102 	ldfe	f4, [r0], #8
 8001704:	ecf0 5102 	ldfe	f5, [r0], #8
 8001708:	ecf0 6102 	ldfe	f6, [r0], #8
 800170c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001710:	ecf0 8102 	ldfp	f0, [r0], #8
 8001714:	ecf0 9102 	ldfp	f1, [r0], #8
 8001718:	ecf0 a102 	ldfp	f2, [r0], #8
 800171c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001720:	ecf0 c102 	ldfp	f4, [r0], #8
 8001724:	ecf0 d102 	ldfp	f5, [r0], #8
 8001728:	ecf0 e102 	ldfp	f6, [r0], #8
 800172c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop

08001734 <__gnu_Unwind_Save_WMMXD>:
 8001734:	ece0 0102 	stfe	f0, [r0], #8
 8001738:	ece0 1102 	stfe	f1, [r0], #8
 800173c:	ece0 2102 	stfe	f2, [r0], #8
 8001740:	ece0 3102 	stfe	f3, [r0], #8
 8001744:	ece0 4102 	stfe	f4, [r0], #8
 8001748:	ece0 5102 	stfe	f5, [r0], #8
 800174c:	ece0 6102 	stfe	f6, [r0], #8
 8001750:	ece0 7102 	stfe	f7, [r0], #8
 8001754:	ece0 8102 	stfp	f0, [r0], #8
 8001758:	ece0 9102 	stfp	f1, [r0], #8
 800175c:	ece0 a102 	stfp	f2, [r0], #8
 8001760:	ece0 b102 	stfp	f3, [r0], #8
 8001764:	ece0 c102 	stfp	f4, [r0], #8
 8001768:	ece0 d102 	stfp	f5, [r0], #8
 800176c:	ece0 e102 	stfp	f6, [r0], #8
 8001770:	ece0 f102 	stfp	f7, [r0], #8
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop

08001778 <__gnu_Unwind_Restore_WMMXC>:
 8001778:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800177c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001780:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001784:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop

0800178c <__gnu_Unwind_Save_WMMXC>:
 800178c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001790:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001794:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001798:	fca0 b101 	stc2	1, cr11, [r0], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop

080017a0 <_Unwind_RaiseException>:
 80017a0:	46ec      	mov	ip, sp
 80017a2:	b500      	push	{lr}
 80017a4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80017a8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80017b4:	a901      	add	r1, sp, #4
 80017b6:	f7ff fbe7 	bl	8000f88 <__gnu_Unwind_RaiseException>
 80017ba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80017be:	b012      	add	sp, #72	; 0x48
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <_Unwind_Resume>:
 80017c4:	46ec      	mov	ip, sp
 80017c6:	b500      	push	{lr}
 80017c8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80017cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80017d8:	a901      	add	r1, sp, #4
 80017da:	f7ff fc13 	bl	8001004 <__gnu_Unwind_Resume>
 80017de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80017e2:	b012      	add	sp, #72	; 0x48
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop

080017e8 <_Unwind_Resume_or_Rethrow>:
 80017e8:	46ec      	mov	ip, sp
 80017ea:	b500      	push	{lr}
 80017ec:	e92d 5000 	stmdb	sp!, {ip, lr}
 80017f0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80017fc:	a901      	add	r1, sp, #4
 80017fe:	f7ff fc23 	bl	8001048 <__gnu_Unwind_Resume_or_Rethrow>
 8001802:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001806:	b012      	add	sp, #72	; 0x48
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <_Unwind_ForcedUnwind>:
 800180c:	46ec      	mov	ip, sp
 800180e:	b500      	push	{lr}
 8001810:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001814:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001820:	ab01      	add	r3, sp, #4
 8001822:	f7ff fbe5 	bl	8000ff0 <__gnu_Unwind_ForcedUnwind>
 8001826:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800182a:	b012      	add	sp, #72	; 0x48
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop

08001830 <_Unwind_Backtrace>:
 8001830:	46ec      	mov	ip, sp
 8001832:	b500      	push	{lr}
 8001834:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001838:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001844:	aa01      	add	r2, sp, #4
 8001846:	f7ff fc5b 	bl	8001100 <__gnu_Unwind_Backtrace>
 800184a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800184e:	b012      	add	sp, #72	; 0x48
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop

08001854 <next_unwind_byte>:
 8001854:	7a02      	ldrb	r2, [r0, #8]
 8001856:	4603      	mov	r3, r0
 8001858:	b97a      	cbnz	r2, 800187a <next_unwind_byte+0x26>
 800185a:	7a42      	ldrb	r2, [r0, #9]
 800185c:	b1a2      	cbz	r2, 8001888 <next_unwind_byte+0x34>
 800185e:	f04f 0c03 	mov.w	ip, #3
 8001862:	6841      	ldr	r1, [r0, #4]
 8001864:	3a01      	subs	r2, #1
 8001866:	7242      	strb	r2, [r0, #9]
 8001868:	6808      	ldr	r0, [r1, #0]
 800186a:	1d0a      	adds	r2, r1, #4
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	0202      	lsls	r2, r0, #8
 8001870:	f883 c008 	strb.w	ip, [r3, #8]
 8001874:	0e00      	lsrs	r0, r0, #24
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	4770      	bx	lr
 800187a:	6800      	ldr	r0, [r0, #0]
 800187c:	3a01      	subs	r2, #1
 800187e:	721a      	strb	r2, [r3, #8]
 8001880:	0202      	lsls	r2, r0, #8
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	0e00      	lsrs	r0, r0, #24
 8001886:	4770      	bx	lr
 8001888:	20b0      	movs	r0, #176	; 0xb0
 800188a:	4770      	bx	lr

0800188c <_Unwind_GetGR.constprop.0>:
 800188c:	2300      	movs	r3, #0
 800188e:	b500      	push	{lr}
 8001890:	b085      	sub	sp, #20
 8001892:	a903      	add	r1, sp, #12
 8001894:	9100      	str	r1, [sp, #0]
 8001896:	220c      	movs	r2, #12
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff fbe7 	bl	800106c <_Unwind_VRS_Get>
 800189e:	9803      	ldr	r0, [sp, #12]
 80018a0:	b005      	add	sp, #20
 80018a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80018a6:	bf00      	nop

080018a8 <unwind_UCB_from_context>:
 80018a8:	e7f0      	b.n	800188c <_Unwind_GetGR.constprop.0>
 80018aa:	bf00      	nop

080018ac <__gnu_unwind_execute>:
 80018ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018b0:	f04f 0800 	mov.w	r8, #0
 80018b4:	4605      	mov	r5, r0
 80018b6:	460e      	mov	r6, r1
 80018b8:	b085      	sub	sp, #20
 80018ba:	4630      	mov	r0, r6
 80018bc:	f7ff ffca 	bl	8001854 <next_unwind_byte>
 80018c0:	28b0      	cmp	r0, #176	; 0xb0
 80018c2:	4604      	mov	r4, r0
 80018c4:	f000 80ba 	beq.w	8001a3c <__gnu_unwind_execute+0x190>
 80018c8:	0607      	lsls	r7, r0, #24
 80018ca:	d520      	bpl.n	800190e <__gnu_unwind_execute+0x62>
 80018cc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80018d0:	2b80      	cmp	r3, #128	; 0x80
 80018d2:	d04d      	beq.n	8001970 <__gnu_unwind_execute+0xc4>
 80018d4:	2b90      	cmp	r3, #144	; 0x90
 80018d6:	d036      	beq.n	8001946 <__gnu_unwind_execute+0x9a>
 80018d8:	2ba0      	cmp	r3, #160	; 0xa0
 80018da:	d060      	beq.n	800199e <__gnu_unwind_execute+0xf2>
 80018dc:	2bb0      	cmp	r3, #176	; 0xb0
 80018de:	d073      	beq.n	80019c8 <__gnu_unwind_execute+0x11c>
 80018e0:	2bc0      	cmp	r3, #192	; 0xc0
 80018e2:	f000 808a 	beq.w	80019fa <__gnu_unwind_execute+0x14e>
 80018e6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80018ea:	2bd0      	cmp	r3, #208	; 0xd0
 80018ec:	d10b      	bne.n	8001906 <__gnu_unwind_execute+0x5a>
 80018ee:	f000 0207 	and.w	r2, r0, #7
 80018f2:	3201      	adds	r2, #1
 80018f4:	2305      	movs	r3, #5
 80018f6:	2101      	movs	r1, #1
 80018f8:	4628      	mov	r0, r5
 80018fa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80018fe:	f7ff fd99 	bl	8001434 <_Unwind_VRS_Pop>
 8001902:	2800      	cmp	r0, #0
 8001904:	d0d9      	beq.n	80018ba <__gnu_unwind_execute+0xe>
 8001906:	2009      	movs	r0, #9
 8001908:	b005      	add	sp, #20
 800190a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800190e:	0083      	lsls	r3, r0, #2
 8001910:	b2db      	uxtb	r3, r3
 8001912:	1d1f      	adds	r7, r3, #4
 8001914:	2300      	movs	r3, #0
 8001916:	f10d 090c 	add.w	r9, sp, #12
 800191a:	4619      	mov	r1, r3
 800191c:	220d      	movs	r2, #13
 800191e:	4628      	mov	r0, r5
 8001920:	f8cd 9000 	str.w	r9, [sp]
 8001924:	f7ff fba2 	bl	800106c <_Unwind_VRS_Get>
 8001928:	9b03      	ldr	r3, [sp, #12]
 800192a:	0660      	lsls	r0, r4, #25
 800192c:	bf4c      	ite	mi
 800192e:	1bdf      	submi	r7, r3, r7
 8001930:	18ff      	addpl	r7, r7, r3
 8001932:	2300      	movs	r3, #0
 8001934:	220d      	movs	r2, #13
 8001936:	4628      	mov	r0, r5
 8001938:	4619      	mov	r1, r3
 800193a:	f8cd 9000 	str.w	r9, [sp]
 800193e:	9703      	str	r7, [sp, #12]
 8001940:	f7ff fbba 	bl	80010b8 <_Unwind_VRS_Set>
 8001944:	e7b9      	b.n	80018ba <__gnu_unwind_execute+0xe>
 8001946:	f000 030d 	and.w	r3, r0, #13
 800194a:	2b0d      	cmp	r3, #13
 800194c:	d0db      	beq.n	8001906 <__gnu_unwind_execute+0x5a>
 800194e:	2300      	movs	r3, #0
 8001950:	af03      	add	r7, sp, #12
 8001952:	4619      	mov	r1, r3
 8001954:	f000 020f 	and.w	r2, r0, #15
 8001958:	9700      	str	r7, [sp, #0]
 800195a:	4628      	mov	r0, r5
 800195c:	f7ff fb86 	bl	800106c <_Unwind_VRS_Get>
 8001960:	2300      	movs	r3, #0
 8001962:	220d      	movs	r2, #13
 8001964:	4628      	mov	r0, r5
 8001966:	4619      	mov	r1, r3
 8001968:	9700      	str	r7, [sp, #0]
 800196a:	f7ff fba5 	bl	80010b8 <_Unwind_VRS_Set>
 800196e:	e7a4      	b.n	80018ba <__gnu_unwind_execute+0xe>
 8001970:	4630      	mov	r0, r6
 8001972:	f7ff ff6f 	bl	8001854 <next_unwind_byte>
 8001976:	0224      	lsls	r4, r4, #8
 8001978:	4320      	orrs	r0, r4
 800197a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800197e:	d0c2      	beq.n	8001906 <__gnu_unwind_execute+0x5a>
 8001980:	2300      	movs	r3, #0
 8001982:	0104      	lsls	r4, r0, #4
 8001984:	4619      	mov	r1, r3
 8001986:	4628      	mov	r0, r5
 8001988:	b2a2      	uxth	r2, r4
 800198a:	f7ff fd53 	bl	8001434 <_Unwind_VRS_Pop>
 800198e:	2800      	cmp	r0, #0
 8001990:	d1b9      	bne.n	8001906 <__gnu_unwind_execute+0x5a>
 8001992:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001996:	bf18      	it	ne
 8001998:	f04f 0801 	movne.w	r8, #1
 800199c:	e78d      	b.n	80018ba <__gnu_unwind_execute+0xe>
 800199e:	43c3      	mvns	r3, r0
 80019a0:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	411a      	asrs	r2, r3
 80019aa:	2300      	movs	r3, #0
 80019ac:	0701      	lsls	r1, r0, #28
 80019ae:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80019b2:	bf48      	it	mi
 80019b4:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80019b8:	4628      	mov	r0, r5
 80019ba:	4619      	mov	r1, r3
 80019bc:	f7ff fd3a 	bl	8001434 <_Unwind_VRS_Pop>
 80019c0:	2800      	cmp	r0, #0
 80019c2:	f43f af7a 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 80019c6:	e79e      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 80019c8:	28b1      	cmp	r0, #177	; 0xb1
 80019ca:	d03c      	beq.n	8001a46 <__gnu_unwind_execute+0x19a>
 80019cc:	28b2      	cmp	r0, #178	; 0xb2
 80019ce:	f000 80b0 	beq.w	8001b32 <__gnu_unwind_execute+0x286>
 80019d2:	28b3      	cmp	r0, #179	; 0xb3
 80019d4:	d04a      	beq.n	8001a6c <__gnu_unwind_execute+0x1c0>
 80019d6:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80019da:	2bb4      	cmp	r3, #180	; 0xb4
 80019dc:	d093      	beq.n	8001906 <__gnu_unwind_execute+0x5a>
 80019de:	2301      	movs	r3, #1
 80019e0:	f000 0207 	and.w	r2, r0, #7
 80019e4:	441a      	add	r2, r3
 80019e6:	4628      	mov	r0, r5
 80019e8:	4619      	mov	r1, r3
 80019ea:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019ee:	f7ff fd21 	bl	8001434 <_Unwind_VRS_Pop>
 80019f2:	2800      	cmp	r0, #0
 80019f4:	f43f af61 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 80019f8:	e785      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 80019fa:	28c6      	cmp	r0, #198	; 0xc6
 80019fc:	d04f      	beq.n	8001a9e <__gnu_unwind_execute+0x1f2>
 80019fe:	28c7      	cmp	r0, #199	; 0xc7
 8001a00:	d061      	beq.n	8001ac6 <__gnu_unwind_execute+0x21a>
 8001a02:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001a06:	2bc0      	cmp	r3, #192	; 0xc0
 8001a08:	d070      	beq.n	8001aec <__gnu_unwind_execute+0x240>
 8001a0a:	28c8      	cmp	r0, #200	; 0xc8
 8001a0c:	d07c      	beq.n	8001b08 <__gnu_unwind_execute+0x25c>
 8001a0e:	28c9      	cmp	r0, #201	; 0xc9
 8001a10:	f47f af79 	bne.w	8001906 <__gnu_unwind_execute+0x5a>
 8001a14:	4630      	mov	r0, r6
 8001a16:	f7ff ff1d 	bl	8001854 <next_unwind_byte>
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4628      	mov	r0, r5
 8001a22:	0314      	lsls	r4, r2, #12
 8001a24:	f002 020f 	and.w	r2, r2, #15
 8001a28:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8001a2c:	440a      	add	r2, r1
 8001a2e:	4322      	orrs	r2, r4
 8001a30:	f7ff fd00 	bl	8001434 <_Unwind_VRS_Pop>
 8001a34:	2800      	cmp	r0, #0
 8001a36:	f43f af40 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 8001a3a:	e764      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 8001a3c:	f1b8 0f00 	cmp.w	r8, #0
 8001a40:	d01c      	beq.n	8001a7c <__gnu_unwind_execute+0x1d0>
 8001a42:	2000      	movs	r0, #0
 8001a44:	e760      	b.n	8001908 <__gnu_unwind_execute+0x5c>
 8001a46:	4630      	mov	r0, r6
 8001a48:	f7ff ff04 	bl	8001854 <next_unwind_byte>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	f43f af59 	beq.w	8001906 <__gnu_unwind_execute+0x5a>
 8001a54:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001a58:	f47f af55 	bne.w	8001906 <__gnu_unwind_execute+0x5a>
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4628      	mov	r0, r5
 8001a60:	f7ff fce8 	bl	8001434 <_Unwind_VRS_Pop>
 8001a64:	2800      	cmp	r0, #0
 8001a66:	f43f af28 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 8001a6a:	e74c      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	f7ff fef1 	bl	8001854 <next_unwind_byte>
 8001a72:	2301      	movs	r3, #1
 8001a74:	4602      	mov	r2, r0
 8001a76:	4619      	mov	r1, r3
 8001a78:	4628      	mov	r0, r5
 8001a7a:	e7d2      	b.n	8001a22 <__gnu_unwind_execute+0x176>
 8001a7c:	ac03      	add	r4, sp, #12
 8001a7e:	4643      	mov	r3, r8
 8001a80:	220e      	movs	r2, #14
 8001a82:	4641      	mov	r1, r8
 8001a84:	4628      	mov	r0, r5
 8001a86:	9400      	str	r4, [sp, #0]
 8001a88:	f7ff faf0 	bl	800106c <_Unwind_VRS_Get>
 8001a8c:	4643      	mov	r3, r8
 8001a8e:	220f      	movs	r2, #15
 8001a90:	4628      	mov	r0, r5
 8001a92:	4641      	mov	r1, r8
 8001a94:	9400      	str	r4, [sp, #0]
 8001a96:	f7ff fb0f 	bl	80010b8 <_Unwind_VRS_Set>
 8001a9a:	4640      	mov	r0, r8
 8001a9c:	e734      	b.n	8001908 <__gnu_unwind_execute+0x5c>
 8001a9e:	4630      	mov	r0, r6
 8001aa0:	f7ff fed8 	bl	8001854 <next_unwind_byte>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	0314      	lsls	r4, r2, #12
 8001aaa:	f002 020f 	and.w	r2, r2, #15
 8001aae:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8001ab2:	3201      	adds	r2, #1
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4322      	orrs	r2, r4
 8001aba:	f7ff fcbb 	bl	8001434 <_Unwind_VRS_Pop>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	f43f aefb 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 8001ac4:	e71f      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f7ff fec4 	bl	8001854 <next_unwind_byte>
 8001acc:	4602      	mov	r2, r0
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	f43f af19 	beq.w	8001906 <__gnu_unwind_execute+0x5a>
 8001ad4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001ad8:	f47f af15 	bne.w	8001906 <__gnu_unwind_execute+0x5a>
 8001adc:	2104      	movs	r1, #4
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f7ff fca8 	bl	8001434 <_Unwind_VRS_Pop>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	f43f aee8 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 8001aea:	e70c      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 8001aec:	2303      	movs	r3, #3
 8001aee:	f000 020f 	and.w	r2, r0, #15
 8001af2:	3201      	adds	r2, #1
 8001af4:	4628      	mov	r0, r5
 8001af6:	4619      	mov	r1, r3
 8001af8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001afc:	f7ff fc9a 	bl	8001434 <_Unwind_VRS_Pop>
 8001b00:	2800      	cmp	r0, #0
 8001b02:	f43f aeda 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 8001b06:	e6fe      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 8001b08:	4630      	mov	r0, r6
 8001b0a:	f7ff fea3 	bl	8001854 <next_unwind_byte>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	2101      	movs	r1, #1
 8001b12:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8001b16:	f002 020f 	and.w	r2, r2, #15
 8001b1a:	3410      	adds	r4, #16
 8001b1c:	440a      	add	r2, r1
 8001b1e:	2305      	movs	r3, #5
 8001b20:	4628      	mov	r0, r5
 8001b22:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001b26:	f7ff fc85 	bl	8001434 <_Unwind_VRS_Pop>
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	f43f aec5 	beq.w	80018ba <__gnu_unwind_execute+0xe>
 8001b30:	e6e9      	b.n	8001906 <__gnu_unwind_execute+0x5a>
 8001b32:	2300      	movs	r3, #0
 8001b34:	f10d 090c 	add.w	r9, sp, #12
 8001b38:	220d      	movs	r2, #13
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4628      	mov	r0, r5
 8001b3e:	f8cd 9000 	str.w	r9, [sp]
 8001b42:	f7ff fa93 	bl	800106c <_Unwind_VRS_Get>
 8001b46:	4630      	mov	r0, r6
 8001b48:	f7ff fe84 	bl	8001854 <next_unwind_byte>
 8001b4c:	0602      	lsls	r2, r0, #24
 8001b4e:	f04f 0402 	mov.w	r4, #2
 8001b52:	d50c      	bpl.n	8001b6e <__gnu_unwind_execute+0x2c2>
 8001b54:	9b03      	ldr	r3, [sp, #12]
 8001b56:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001b5a:	40a0      	lsls	r0, r4
 8001b5c:	4418      	add	r0, r3
 8001b5e:	9003      	str	r0, [sp, #12]
 8001b60:	4630      	mov	r0, r6
 8001b62:	f7ff fe77 	bl	8001854 <next_unwind_byte>
 8001b66:	0603      	lsls	r3, r0, #24
 8001b68:	f104 0407 	add.w	r4, r4, #7
 8001b6c:	d4f2      	bmi.n	8001b54 <__gnu_unwind_execute+0x2a8>
 8001b6e:	9b03      	ldr	r3, [sp, #12]
 8001b70:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001b74:	40a2      	lsls	r2, r4
 8001b76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b7a:	441a      	add	r2, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9203      	str	r2, [sp, #12]
 8001b80:	4628      	mov	r0, r5
 8001b82:	220d      	movs	r2, #13
 8001b84:	4619      	mov	r1, r3
 8001b86:	f8cd 9000 	str.w	r9, [sp]
 8001b8a:	f7ff fa95 	bl	80010b8 <_Unwind_VRS_Set>
 8001b8e:	e694      	b.n	80018ba <__gnu_unwind_execute+0xe>

08001b90 <__gnu_unwind_frame>:
 8001b90:	460b      	mov	r3, r1
 8001b92:	f04f 0c03 	mov.w	ip, #3
 8001b96:	b500      	push	{lr}
 8001b98:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	6853      	ldr	r3, [r2, #4]
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	9202      	str	r2, [sp, #8]
 8001ba4:	a901      	add	r1, sp, #4
 8001ba6:	0e1a      	lsrs	r2, r3, #24
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	f88d c00c 	strb.w	ip, [sp, #12]
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	f88d 200d 	strb.w	r2, [sp, #13]
 8001bb4:	f7ff fe7a 	bl	80018ac <__gnu_unwind_execute>
 8001bb8:	b005      	add	sp, #20
 8001bba:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bbe:	bf00      	nop

08001bc0 <_Unwind_GetRegionStart>:
 8001bc0:	b508      	push	{r3, lr}
 8001bc2:	f7ff fe71 	bl	80018a8 <unwind_UCB_from_context>
 8001bc6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001bc8:	bd08      	pop	{r3, pc}
 8001bca:	bf00      	nop

08001bcc <_Unwind_GetLanguageSpecificData>:
 8001bcc:	b508      	push	{r3, lr}
 8001bce:	f7ff fe6b 	bl	80018a8 <unwind_UCB_from_context>
 8001bd2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001bd4:	79c3      	ldrb	r3, [r0, #7]
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001bdc:	bd08      	pop	{r3, pc}
 8001bde:	bf00      	nop

08001be0 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	2300      	movs	r3, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f805 	bl	8001c06 <_ZNSt8__detail17_List_node_header7_M_initEv>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
#endif
      }
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f87b 	bl	8001d30 <_ZNSaIN6CRSLib3Can6RM00087RxFrameEED1Ev>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f85e 	bl	8001d10 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE12_Vector_implC1Ev>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ffeb 	bl	8001c44 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EEC1Ev>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f88d 	bl	8001da0 <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIfEEEED1Ev>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f870 	bl	8001d80 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE10_List_implC1Ev>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_ZNSt7__cxx114listIPN8servo_md13CanControllerIfEESaIS4_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ffeb 	bl	8001c90 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EEC1Ev>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE10_List_implD1Ev>:
      struct _List_impl
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f891 	bl	8001df4 <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIhEEEED1Ev>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EEC1Ev>:
      _List_base() = default;
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f874 	bl	8001dd4 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE10_List_implC1Ev>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_ZNSt7__cxx114listIPN8servo_md13CanControllerIhEESaIS4_EEC1Ev>:
      list() = default;
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ffeb 	bl	8001cdc <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EEC1Ev>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f885 	bl	8001e28 <_ZNSaIN6CRSLib3Can6RM00087RxFrameEEC1Ev>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 f88d 	bl	8001e40 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_Vector_impl_dataC1Ev>
	{ }
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_ZNSaIN6CRSLib3Can6RM00087RxFrameEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	10db      	asrs	r3, r3, #3
 8001d5c:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev+0x38>)
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001d62:	461a      	mov	r2, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f87e 	bl	8001e66 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE13_M_deallocateEPS3_j>
      }
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5d 	bl	8001c2c <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE12_Vector_implD1Ev>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	aaaaaaab 	.word	0xaaaaaaab

08001d80 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f87f 	bl	8001e8c <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEC1Ev>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff2c 	bl	8001bee <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIfEEEED1Ev>:
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f871 	bl	8001ea4 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE8_M_clearEv>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff57 	bl	8001c78 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE10_List_implD1Ev>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f894 	bl	8001f0a <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEC1Ev>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff02 	bl	8001bee <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIhEEEED1Ev>:
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f886 	bl	8001f22 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE8_M_clearEv>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff53 	bl	8001cc4 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE10_List_implD1Ev>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_ZNSaIN6CRSLib3Can6RM00087RxFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8a9 	bl	8001f88 <_ZN9__gnu_cxx13new_allocatorIN6CRSLib3Can6RM00087RxFrameEEC1Ev>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
	{ }
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
	if (__p)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f88c 	bl	8001f9c <_ZNSt16allocator_traitsISaIN6CRSLib3Can6RM00087RxFrameEEE10deallocateERS4_PS3_j>
      }
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEC1Ev>:
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8a0 	bl	8001fda <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIfEEEEC1Ev>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d015      	beq.n	8001ee6 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE8_M_clearEv+0x42>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8001ec4:	6938      	ldr	r0, [r7, #16]
 8001ec6:	f000 f812 	bl	8001eee <_ZNSt10_List_nodeIPN8servo_md13CanControllerIfEEE9_M_valptrEv>
 8001eca:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f88e 	bl	8001fee <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE21_M_get_Node_allocatorEv>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f893 	bl	8002002 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEE7destroyIS4_EEvRS6_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 8001edc:	6939      	ldr	r1, [r7, #16]
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f89b 	bl	800201a <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE11_M_put_nodeEPSt10_List_nodeIS4_E>
      while (__cur != &_M_impl._M_node)
 8001ee4:	e7e5      	b.n	8001eb2 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE8_M_clearEv+0xe>
	}
    }
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_ZNSt10_List_nodeIPN8servo_md13CanControllerIfEEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3308      	adds	r3, #8
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f8b4 	bl	8002068 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIfEEE6_M_ptrEv>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_ZNSaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEC1Ev>:
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8b4 	bl	8002080 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIhEEEEC1Ev>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d015      	beq.n	8001f64 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8001f42:	6938      	ldr	r0, [r7, #16]
 8001f44:	f000 f812 	bl	8001f6c <_ZNSt10_List_nodeIPN8servo_md13CanControllerIhEEE9_M_valptrEv>
 8001f48:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8a2 	bl	8002094 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE21_M_get_Node_allocatorEv>
 8001f50:	4603      	mov	r3, r0
 8001f52:	68f9      	ldr	r1, [r7, #12]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 f8a7 	bl	80020a8 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEE7destroyIS4_EEvRS6_PT_>
	  _M_put_node(__tmp);
 8001f5a:	6939      	ldr	r1, [r7, #16]
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f8af 	bl	80020c0 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE11_M_put_nodeEPSt10_List_nodeIS4_E>
      while (__cur != &_M_impl._M_node)
 8001f62:	e7e5      	b.n	8001f30 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE8_M_clearEv+0xe>
    }
 8001f64:	bf00      	nop
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_ZNSt10_List_nodeIPN8servo_md13CanControllerIhEEE9_M_valptrEv>:
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3308      	adds	r3, #8
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f8b0 	bl	80020de <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIhEEE6_M_ptrEv>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <_ZN9__gnu_cxx13new_allocatorIN6CRSLib3Can6RM00087RxFrameEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <_ZNSt16allocator_traitsISaIN6CRSLib3Can6RM00087RxFrameEEE10deallocateERS4_PS3_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 8001fb4:	f7ff fe14 	bl	8001be0 <_ZSt21is_constant_evaluatedv>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <_ZNSt16allocator_traitsISaIN6CRSLib3Can6RM00087RxFrameEEE10deallocateERS4_PS3_j+0x2a>
	  {
	    ::operator delete(__p);
 8001fbe:	69b8      	ldr	r0, [r7, #24]
 8001fc0:	f003 fc45 	bl	800584e <_ZdlPv>
	    return;
 8001fc4:	e005      	b.n	8001fd2 <_ZNSt16allocator_traitsISaIN6CRSLib3Can6RM00087RxFrameEEE10deallocateERS4_PS3_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	69b9      	ldr	r1, [r7, #24]
 8001fca:	69f8      	ldr	r0, [r7, #28]
 8001fcc:	f000 f916 	bl	80021fc <_ZN9__gnu_cxx13new_allocatorIN6CRSLib3Can6RM00087RxFrameEE10deallocateEPS4_j>
      { __a.deallocate(__p, __n); }
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIfEEEEC1Ev>:
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEE7destroyIS4_EEvRS6_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
 800200c:	6838      	ldr	r0, [r7, #0]
 800200e:	f000 f872 	bl	80020f6 <_ZSt10destroy_atIPN8servo_md13CanControllerIfEEEvPT_>
#endif
	}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EE11_M_put_nodeEPSt10_List_nodeIS4_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	6839      	ldr	r1, [r7, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f86c 	bl	8002108 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEE10deallocateERS6_PS5_j>
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <_ZSt8_DestroyIPN6CRSLib3Can6RM00087RxFrameES3_EvT_S5_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f87c 	bl	8002158 <_ZSt8_DestroyIPN6CRSLib3Can6RM00087RxFrameEEvT_S5_>
    }
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIfEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f887 	bl	8002184 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIfEEE7_M_addrEv>
 8002076:	4603      	mov	r3, r0
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIhEEEEC1Ev>:
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80020b2:	6838      	ldr	r0, [r7, #0]
 80020b4:	f000 f870 	bl	8002198 <_ZSt10destroy_atIPN8servo_md13CanControllerIhEEEvPT_>
	}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EE11_M_put_nodeEPSt10_List_nodeIS4_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	6839      	ldr	r1, [r7, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 f86a 	bl	80021aa <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEE10deallocateERS6_PS5_j>
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIhEEE6_M_ptrEv>:
      _M_ptr() noexcept
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f87e 	bl	80021e8 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIhEEE7_M_addrEv>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_ZSt10destroy_atIPN8servo_md13CanControllerIfEEEvPT_>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#if __cplusplus >= 201703L
  template <typename _Tp>
    _GLIBCXX20_CONSTEXPR inline void
    destroy_at(_Tp* __location)
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
	  for (auto& __x : *__location)
	    std::destroy_at(std::__addressof(__x));
	}
      else
	__location->~_Tp();
    }
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002120:	f7ff fd5e 	bl	8001be0 <_ZSt21is_constant_evaluatedv>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 800212a:	69b8      	ldr	r0, [r7, #24]
 800212c:	f003 fb8f 	bl	800584e <_ZdlPv>
	    return;
 8002130:	e005      	b.n	800213e <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIfEEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	69b9      	ldr	r1, [r7, #24]
 8002136:	69f8      	ldr	r0, [r7, #28]
 8002138:	f000 f894 	bl	8002264 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIfEEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_ZSt10destroy_atIN6CRSLib3Can6RM00087RxFrameEEvPT_>:
    destroy_at(_Tp* __location)
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
    }
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <_ZSt8_DestroyIPN6CRSLib3Can6RM00087RxFrameEEvT_S5_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 8002162:	f7ff fd3d 	bl	8001be0 <_ZSt21is_constant_evaluatedv>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d004      	beq.n	8002176 <_ZSt8_DestroyIPN6CRSLib3Can6RM00087RxFrameEEvT_S5_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800216c:	6839      	ldr	r1, [r7, #0]
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f856 	bl	8002220 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN6CRSLib3Can6RM00087RxFrameEEEvT_S7_>
 8002174:	e003      	b.n	800217e <_ZSt8_DestroyIPN6CRSLib3Can6RM00087RxFrameEEvT_S5_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002176:	6839      	ldr	r1, [r7, #0]
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f869 	bl	8002250 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN6CRSLib3Can6RM00087RxFrameEEEvT_S7_>
    }
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIfEEE7_M_addrEv>:
      _M_addr() noexcept
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <_ZSt10destroy_atIPN8servo_md13CanControllerIhEEEvPT_>:
    destroy_at(_Tp* __location)
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
    }
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b088      	sub	sp, #32
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80021c2:	f7ff fd0d 	bl	8001be0 <_ZSt21is_constant_evaluatedv>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 80021cc:	69b8      	ldr	r0, [r7, #24]
 80021ce:	f003 fb3e 	bl	800584e <_ZdlPv>
	    return;
 80021d2:	e005      	b.n	80021e0 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md13CanControllerIhEEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	69b9      	ldr	r1, [r7, #24]
 80021d8:	69f8      	ldr	r0, [r7, #28]
 80021da:	f000 f86a 	bl	80022b2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIhEEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 80021de:	bf00      	nop
 80021e0:	bf00      	nop
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md13CanControllerIhEEE7_M_addrEv>:
      _M_addr() noexcept
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <_ZN9__gnu_cxx13new_allocatorIN6CRSLib3Can6RM00087RxFrameEE10deallocateEPS4_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4619      	mov	r1, r3
 8002214:	68b8      	ldr	r0, [r7, #8]
 8002216:	f003 fb1c 	bl	8005852 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN6CRSLib3Can6RM00087RxFrameEEEvT_S7_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d00a      	beq.n	8002248 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN6CRSLib3Can6RM00087RxFrameEEEvT_S7_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f828 	bl	8002288 <_ZSt11__addressofIN6CRSLib3Can6RM00087RxFrameEEPT_RS4_>
 8002238:	4603      	mov	r3, r0
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f82e 	bl	800229c <_ZSt8_DestroyIN6CRSLib3Can6RM00087RxFrameEEvPT_>
	  for (; __first != __last; ++__first)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3318      	adds	r3, #24
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	e7f0      	b.n	800222a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN6CRSLib3Can6RM00087RxFrameEEEvT_S7_+0xa>
	}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN6CRSLib3Can6RM00087RxFrameEEEvT_S7_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIfEEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4619      	mov	r1, r3
 800227c:	68b8      	ldr	r0, [r7, #8]
 800227e:	f003 fae8 	bl	8005852 <_ZdlPvj>
      }
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_ZSt11__addressofIN6CRSLib3Can6RM00087RxFrameEEPT_RS4_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <_ZSt8_DestroyIN6CRSLib3Can6RM00087RxFrameEEvPT_>:
    _Destroy(_Tp* __pointer)
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff4e 	bl	8002146 <_ZSt10destroy_atIN6CRSLib3Can6RM00087RxFrameEEvPT_>
    }
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md13CanControllerIhEEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4619      	mov	r1, r3
 80022ca:	68b8      	ldr	r0, [r7, #8]
 80022cc:	f003 fac1 	bl	8005852 <_ZdlPvj>
      }
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_ZNSt7__cxx114listIPN8servo_md13CanControllerIhEESaIS4_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fd91 	bl	8001e08 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIhEESaIS4_EED1Ev>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_ZNSt7__cxx114listIPN8servo_md13CanControllerIfEESaIS4_EED1Ev>:
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fd5a 	bl	8001db4 <_ZNSt7__cxx1110_List_baseIPN8servo_md13CanControllerIfEESaIS4_EED1Ev>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <_Z41__static_initialization_and_destruction_0ii>:
	void CanController<T>::trigger_update(){
		for(CanController<T>* pController : pInstances){
			pController->update();
		}
	}
}
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d148      	bne.n	80023ae <_Z41__static_initialization_and_destruction_0ii+0xa2>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002322:	4293      	cmp	r3, r2
 8002324:	d143      	bne.n	80023ae <_Z41__static_initialization_and_destruction_0ii+0xa2>
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController<T>::rx_frames;
 8002326:	4b4a      	ldr	r3, [pc, #296]	; (8002450 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	4a48      	ldr	r2, [pc, #288]	; (8002450 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b47      	ldr	r3, [pc, #284]	; (8002450 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002342:	4844      	ldr	r0, [pc, #272]	; (8002454 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8002344:	f7ff fc8b 	bl	8001c5e <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EEC1Ev>
	std::list<CanController<T>*> CanController<T>::pInstances;
 8002348:	4b43      	ldr	r3, [pc, #268]	; (8002458 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3301      	adds	r3, #1
 800234e:	4a42      	ldr	r2, [pc, #264]	; (8002458 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	4b41      	ldr	r3, [pc, #260]	; (8002458 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8002364:	483d      	ldr	r0, [pc, #244]	; (800245c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8002366:	f7ff fca0 	bl	8001caa <_ZNSt7__cxx114listIPN8servo_md13CanControllerIfEESaIS4_EEC1Ev>
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController<T>::rx_frames;
 800236a:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3301      	adds	r3, #1
 8002370:	4a3b      	ldr	r2, [pc, #236]	; (8002460 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <_Z41__static_initialization_and_destruction_0ii+0x80>
 8002386:	4837      	ldr	r0, [pc, #220]	; (8002464 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8002388:	f7ff fc69 	bl	8001c5e <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EEC1Ev>
	std::list<CanController<T>*> CanController<T>::pInstances;
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3301      	adds	r3, #1
 8002392:	4a35      	ldr	r2, [pc, #212]	; (8002468 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b34      	ldr	r3, [pc, #208]	; (8002468 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b01      	cmp	r3, #1
 800239c:	bf0c      	ite	eq
 800239e:	2301      	moveq	r3, #1
 80023a0:	2300      	movne	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <_Z41__static_initialization_and_destruction_0ii+0xa2>
 80023a8:	4830      	ldr	r0, [pc, #192]	; (800246c <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80023aa:	f7ff fca4 	bl	8001cf6 <_ZNSt7__cxx114listIPN8servo_md13CanControllerIhEESaIS4_EEC1Ev>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d148      	bne.n	8002446 <_Z41__static_initialization_and_destruction_0ii+0x13a>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d143      	bne.n	8002446 <_Z41__static_initialization_and_destruction_0ii+0x13a>
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	4a28      	ldr	r2, [pc, #160]	; (8002468 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 80023da:	4824      	ldr	r0, [pc, #144]	; (800246c <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80023dc:	f7ff ff7b 	bl	80022d6 <_ZNSt7__cxx114listIPN8servo_md13CanControllerIhEESaIS4_EED1Ev>
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController<T>::rx_frames;
 80023e0:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	4a1e      	ldr	r2, [pc, #120]	; (8002460 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf0c      	ite	eq
 80023f2:	2301      	moveq	r3, #1
 80023f4:	2300      	movne	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <_Z41__static_initialization_and_destruction_0ii+0xf6>
 80023fc:	4819      	ldr	r0, [pc, #100]	; (8002464 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80023fe:	f000 f837 	bl	8002470 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev>
	std::list<CanController<T>*> CanController<T>::pInstances;
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3b01      	subs	r3, #1
 8002408:	4a13      	ldr	r2, [pc, #76]	; (8002458 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <_Z41__static_initialization_and_destruction_0ii+0x118>
 800241e:	480f      	ldr	r0, [pc, #60]	; (800245c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8002420:	f7ff ff66 	bl	80022f0 <_ZNSt7__cxx114listIPN8servo_md13CanControllerIfEESaIS4_EED1Ev>
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController<T>::rx_frames;
 8002424:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3b01      	subs	r3, #1
 800242a:	4a09      	ldr	r2, [pc, #36]	; (8002450 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	bf0c      	ite	eq
 8002436:	2301      	moveq	r3, #1
 8002438:	2300      	movne	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <_Z41__static_initialization_and_destruction_0ii+0x13a>
 8002440:	4804      	ldr	r0, [pc, #16]	; (8002454 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8002442:	f000 f815 	bl	8002470 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200000c8 	.word	0x200000c8
 8002454:	20000098 	.word	0x20000098
 8002458:	200000cc 	.word	0x200000cc
 800245c:	200000a4 	.word	0x200000a4
 8002460:	200000d0 	.word	0x200000d0
 8002464:	200000b0 	.word	0x200000b0
 8002468:	200000d4 	.word	0x200000d4
 800246c:	200000bc 	.word	0x200000bc

08002470 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681c      	ldr	r4, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fdd8 	bl	8002038 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EE19_M_get_Tp_allocatorEv>
 8002488:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800248a:	461a      	mov	r2, r3
 800248c:	4629      	mov	r1, r5
 800248e:	4620      	mov	r0, r4
 8002490:	f7ff fddc 	bl	800204c <_ZSt8_DestroyIPN6CRSLib3Can6RM00087RxFrameES3_EvT_S5_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fc54 	bl	8001d44 <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bdb0      	pop	{r4, r5, r7, pc}

080024a6 <_GLOBAL__sub_I_CanController.cpp>:
 80024a6:	b580      	push	{r7, lr}
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7ff ff2c 	bl	800230c <_Z41__static_initialization_and_destruction_0ii>
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <_GLOBAL__sub_D_CanController.cpp>:
 80024b6:	b580      	push	{r7, lr}
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024be:	2000      	movs	r0, #0
 80024c0:	f7ff ff24 	bl	800230c <_Z41__static_initialization_and_destruction_0ii>
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <_ZN8servo_md15MotorController18emergency_callbackEv>:

			//角度はラジアンで指定する
			void set_angle(float angle);

			//Emergencyスイッチが扱われたときに呼ばれるコールバック関数
			void emergency_callback(void){
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
				is_emergency = true;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	751a      	strb	r2, [r3, #20]

				//PWMを止めると角度が0になるため、どちらが良いか？
				//HAL_TIM_PWM_Stop(pwm_tim, pwm_channel);
			}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <_ZN8servo_md15MotorController6updateEv>:
			//パラメーターを保持する保管庫的なクラスを登録する関数
			void set_register(Parameters& params);

			//パラメーターの値を読み込み、それに従ってモーターに出力する関数
			//定期的に呼ばれる
			void update(){
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
				if(!is_emergency){
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7d1b      	ldrb	r3, [r3, #20]
 80024ea:	f083 0301 	eor.w	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d010      	beq.n	8002516 <_ZN8servo_md15MotorController6updateEv+0x38>
					//パラメーターの値を読み込む
					MotorParam motorparam = params.get_motor_params();
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	f107 0308 	add.w	r3, r7, #8
 80024fc:	4611      	mov	r1, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 faaa 	bl	8002a58 <_ZN8servo_md10Parameters16get_motor_paramsEv>
					angle = motorparam.target;
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60da      	str	r2, [r3, #12]
					//読み込んだ値をモーターに出力する
					set_angle(angle);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	4619      	mov	r1, r3
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f82d 	bl	8002570 <_ZN8servo_md15MotorController9set_angleEf>
				}
			}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE10_List_implD1Ev>:
      struct _List_impl
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f8ee 	bl	8002708 <_ZNSaISt10_List_nodeIPN8servo_md15MotorControllerEEED1Ev>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EEC1Ev>:
      _List_base() = default;
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 f8d1 	bl	80026e8 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE10_List_implC1Ev>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EEC1Ev>:
      list() = default;
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ffeb 	bl	8002536 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EEC1Ev>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	0000      	movs	r0, r0
 800256c:	0000      	movs	r0, r0
	...

08002570 <_ZN8servo_md15MotorController9set_angleEf>:
{
	std::list<MotorController*> MotorController::pInstances;

	//角度からPWMのパルス幅を計算する関数
    void MotorController::set_angle(float angle)
    {
 8002570:	b5b0      	push	{r4, r5, r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
        //角度からパルス幅を計算する angle [0,pi] -> count [pwm_count_min,pwm_count_max]
        uint16_t count = (uint16_t)(pwm_count_min + (pwm_count_max - pwm_count_min) * angle / std::numbers::pi);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8a1b      	ldrh	r3, [r3, #16]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fd fff6 	bl	8000570 <__aeabi_i2d>
 8002584:	4604      	mov	r4, r0
 8002586:	460d      	mov	r5, r1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8a5b      	ldrh	r3, [r3, #18]
 800258c:	461a      	mov	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	8a1b      	ldrh	r3, [r3, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fb41 	bl	8000c1c <__aeabi_i2f>
 800259a:	4603      	mov	r3, r0
 800259c:	6839      	ldr	r1, [r7, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd fde0 	bl	8000164 <__aeabi_fmul>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd fff4 	bl	8000594 <__aeabi_f2d>
 80025ac:	a31c      	add	r3, pc, #112	; (adr r3, 8002620 <_ZN8servo_md15MotorController9set_angleEf+0xb0>)
 80025ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b2:	f7fe f971 	bl	8000898 <__aeabi_ddiv>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4620      	mov	r0, r4
 80025bc:	4629      	mov	r1, r5
 80025be:	f7fd fe8b 	bl	80002d8 <__adddf3>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	f7fe fa4d 	bl	8000a68 <__aeabi_d2uiz>
 80025ce:	4603      	mov	r3, r0
 80025d0:	81fb      	strh	r3, [r7, #14]
        //パルス幅を設定する
        __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, count);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	791b      	ldrb	r3, [r3, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <_ZN8servo_md15MotorController9set_angleEf+0x76>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	89fa      	ldrh	r2, [r7, #14]
 80025e2:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80025e4:	e018      	b.n	8002618 <_ZN8servo_md15MotorController9set_angleEf+0xa8>
        __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, count);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	791b      	ldrb	r3, [r3, #4]
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d105      	bne.n	80025fa <_ZN8servo_md15MotorController9set_angleEf+0x8a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	89fa      	ldrh	r2, [r7, #14]
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80025f8:	e00e      	b.n	8002618 <_ZN8servo_md15MotorController9set_angleEf+0xa8>
        __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, count);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	791b      	ldrb	r3, [r3, #4]
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d105      	bne.n	800260e <_ZN8servo_md15MotorController9set_angleEf+0x9e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	89fa      	ldrh	r2, [r7, #14]
 800260a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800260c:	e004      	b.n	8002618 <_ZN8servo_md15MotorController9set_angleEf+0xa8>
        __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, count);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	89fa      	ldrh	r2, [r7, #14]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bdb0      	pop	{r4, r5, r7, pc}
 8002620:	54442d18 	.word	0x54442d18
 8002624:	400921fb 	.word	0x400921fb

08002628 <_ZN8servo_md15MotorController26trigger_emergency_callbackEv>:
    void MotorController::set_register(Parameters &parameters)
    {
        this->params = parameters;
    }

    void MotorController::trigger_emergency_callback(void){
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
    	for(MotorController* pInstance : pInstances){
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <_ZN8servo_md15MotorController26trigger_emergency_callbackEv+0x5c>)
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f882 	bl	800273c <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE5beginEv>
 8002638:	4603      	mov	r3, r0
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f88e 	bl	800275e <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE3endEv>
 8002642:	4603      	mov	r3, r0
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	463a      	mov	r2, r7
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f896 	bl	800277e <_ZSteqRKSt14_List_iteratorIPN8servo_md15MotorControllerEES5_>
 8002652:	4603      	mov	r3, r0
 8002654:	f083 0301 	eor.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00e      	beq.n	800267c <_ZN8servo_md15MotorController26trigger_emergency_callbackEv+0x54>
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	4618      	mov	r0, r3
 8002662:	f000 f8ae 	bl	80027c2 <_ZNKSt14_List_iteratorIPN8servo_md15MotorControllerEEdeEv>
 8002666:	4603      	mov	r3, r0
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60bb      	str	r3, [r7, #8]
    		pInstance->emergency_callback();
 800266c:	68b8      	ldr	r0, [r7, #8]
 800266e:	f7ff ff2a 	bl	80024c6 <_ZN8servo_md15MotorController18emergency_callbackEv>
    	for(MotorController* pInstance : pInstances){
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	4618      	mov	r0, r3
 8002676:	f000 f895 	bl	80027a4 <_ZNSt14_List_iteratorIPN8servo_md15MotorControllerEEppEv>
 800267a:	e7e4      	b.n	8002646 <_ZN8servo_md15MotorController26trigger_emergency_callbackEv+0x1e>
    	}
    }
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200000d8 	.word	0x200000d8

08002688 <_ZN8servo_md15MotorController14trigger_updateEv>:

    void MotorController::trigger_update(void){
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
    	for(MotorController* pInstance : pInstances){
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <_ZN8servo_md15MotorController14trigger_updateEv+0x5c>)
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f852 	bl	800273c <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE5beginEv>
 8002698:	4603      	mov	r3, r0
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f85e 	bl	800275e <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE3endEv>
 80026a2:	4603      	mov	r3, r0
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	463a      	mov	r2, r7
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 f866 	bl	800277e <_ZSteqRKSt14_List_iteratorIPN8servo_md15MotorControllerEES5_>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f083 0301 	eor.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00e      	beq.n	80026dc <_ZN8servo_md15MotorController14trigger_updateEv+0x54>
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 f87e 	bl	80027c2 <_ZNKSt14_List_iteratorIPN8servo_md15MotorControllerEEdeEv>
 80026c6:	4603      	mov	r3, r0
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60bb      	str	r3, [r7, #8]
    		pInstance->update();
 80026cc:	68b8      	ldr	r0, [r7, #8]
 80026ce:	f7ff ff06 	bl	80024de <_ZN8servo_md15MotorController6updateEv>
    	for(MotorController* pInstance : pInstances){
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 f865 	bl	80027a4 <_ZNSt14_List_iteratorIPN8servo_md15MotorControllerEEppEv>
 80026da:	e7e4      	b.n	80026a6 <_ZN8servo_md15MotorController14trigger_updateEv+0x1e>
    	}
    }
 80026dc:	bf00      	nop
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	200000d8 	.word	0x200000d8

080026e8 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f874 	bl	80027de <_ZNSaISt10_List_nodeIPN8servo_md15MotorControllerEEEC1Ev>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fa78 	bl	8001bee <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <_ZNSaISt10_List_nodeIPN8servo_md15MotorControllerEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f866 	bl	80027f6 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE8_M_clearEv>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fef6 	bl	800251e <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE10_List_implD1Ev>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f876 	bl	8002840 <_ZNSt14_List_iteratorIPN8servo_md15MotorControllerEEC1EPNSt8__detail15_List_node_baseE>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %list.  Iteration is done in ordinary element
       *  order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f866 	bl	8002840 <_ZNSt14_List_iteratorIPN8servo_md15MotorControllerEEC1EPNSt8__detail15_List_node_baseE>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_ZSteqRKSt14_List_iteratorIPN8servo_md15MotorControllerEES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <_ZNSt14_List_iteratorIPN8servo_md15MotorControllerEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	601a      	str	r2, [r3, #0]
	return *this;
 80027b6:	687b      	ldr	r3, [r7, #4]
      }
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <_ZNKSt14_List_iteratorIPN8servo_md15MotorControllerEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f844 	bl	800285c <_ZNSt10_List_nodeIPN8servo_md15MotorControllerEE9_M_valptrEv>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <_ZNSaISt10_List_nodeIPN8servo_md15MotorControllerEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f846 	bl	8002878 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEEC1Ev>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	429a      	cmp	r2, r3
 800280a:	d015      	beq.n	8002838 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8002816:	6938      	ldr	r0, [r7, #16]
 8002818:	f000 f820 	bl	800285c <_ZNSt10_List_nodeIPN8servo_md15MotorControllerEE9_M_valptrEv>
 800281c:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f834 	bl	800288c <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE21_M_get_Node_allocatorEv>
 8002824:	4603      	mov	r3, r0
 8002826:	68f9      	ldr	r1, [r7, #12]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 f839 	bl	80028a0 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE7destroyIS3_EEvRS5_PT_>
	  _M_put_node(__tmp);
 800282e:	6939      	ldr	r1, [r7, #16]
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f841 	bl	80028b8 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      while (__cur != &_M_impl._M_node)
 8002836:	e7e5      	b.n	8002804 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE8_M_clearEv+0xe>
    }
 8002838:	bf00      	nop
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <_ZNSt14_List_iteratorIPN8servo_md15MotorControllerEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <_ZNSt10_List_nodeIPN8servo_md15MotorControllerEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3308      	adds	r3, #8
 8002868:	4618      	mov	r0, r3
 800286a:	f000 f834 	bl	80028d6 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md15MotorControllerEE6_M_ptrEv>
 800286e:	4603      	mov	r3, r0
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80028aa:	6838      	ldr	r0, [r7, #0]
 80028ac:	f000 f81f 	bl	80028ee <_ZSt10destroy_atIPN8servo_md15MotorControllerEEvPT_>
	}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	6839      	ldr	r1, [r7, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f819 	bl	8002900 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE10deallocateERS5_PS4_j>
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md15MotorControllerEE6_M_ptrEv>:
      _M_ptr() noexcept
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f82d 	bl	800293e <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md15MotorControllerEE7_M_addrEv>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <_ZSt10destroy_atIPN8servo_md15MotorControllerEEvPT_>:
    destroy_at(_Tp* __location)
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
    }
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002918:	f7ff f962 	bl	8001be0 <_ZSt21is_constant_evaluatedv>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE10deallocateERS5_PS4_j+0x2a>
	    ::operator delete(__p);
 8002922:	69b8      	ldr	r0, [r7, #24]
 8002924:	f002 ff93 	bl	800584e <_ZdlPv>
	    return;
 8002928:	e005      	b.n	8002936 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md15MotorControllerEEEE10deallocateERS5_PS4_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	69b9      	ldr	r1, [r7, #24]
 800292e:	69f8      	ldr	r0, [r7, #28]
 8002930:	f000 f80f 	bl	8002952 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md15MotorControllerEE7_M_addrEv>:
      _M_addr() noexcept
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md15MotorControllerEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4619      	mov	r1, r3
 800296a:	68b8      	ldr	r0, [r7, #8]
 800296c:	f002 ff71 	bl	8005852 <_ZdlPvj>
      }
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EED1Ev>:
      ~list() = default;
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fecb 	bl	800271c <_ZNSt7__cxx1110_List_baseIPN8servo_md15MotorControllerESaIS3_EED1Ev>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_Z41__static_initialization_and_destruction_0ii>:

} // namespace servo_md
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d107      	bne.n	80029b0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d102      	bne.n	80029b0 <_Z41__static_initialization_and_destruction_0ii+0x20>
	std::list<MotorController*> MotorController::pInstances;
 80029aa:	4809      	ldr	r0, [pc, #36]	; (80029d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80029ac:	f7ff fdd0 	bl	8002550 <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EEC1Ev>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d107      	bne.n	80029c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029bc:	4293      	cmp	r3, r2
 80029be:	d102      	bne.n	80029c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80029c0:	4803      	ldr	r0, [pc, #12]	; (80029d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80029c2:	f7ff ffd8 	bl	8002976 <_ZNSt7__cxx114listIPN8servo_md15MotorControllerESaIS3_EED1Ev>
} // namespace servo_md
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200000d8 	.word	0x200000d8

080029d4 <_GLOBAL__sub_I__ZN8servo_md15MotorController10pInstancesB5cxx11E>:
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029dc:	2001      	movs	r0, #1
 80029de:	f7ff ffd7 	bl	8002990 <_Z41__static_initialization_and_destruction_0ii>
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <_GLOBAL__sub_D__ZN8servo_md15MotorController10pInstancesB5cxx11E>:
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7ff ffcf 	bl	8002990 <_Z41__static_initialization_and_destruction_0ii>
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <_ZN8servo_md10Parameters18emergency_callbackEv>:
			MotorParam SMParam;

			static std::list<Parameters*> pInstances;

			//Emergencyボタンが押されたときに呼ばれるコールバック関数
			void emergency_callback(void){
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
				SMParam.mode = MD_MODE::DEFAULT;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	605a      	str	r2, [r3, #4]
			}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE10_List_implD1Ev>:
      struct _List_impl
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f88f 	bl	8002b38 <_ZNSaISt10_List_nodeIPN8servo_md10ParametersEEED1Ev>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EEC1Ev>:
      _List_base() = default;
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f872 	bl	8002b18 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE10_List_implC1Ev>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EEC1Ev>:
      list() = default;
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ffeb 	bl	8002a24 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EEC1Ev>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZN8servo_md10Parameters16get_motor_paramsEv>:
	std::list<Parameters*> Parameters::pInstances;

    //パラメータを取得する関数
	//第1引数は結果を格納する構造体オブジェクトへのポインタ
	MotorParam Parameters::get_motor_params()
    {
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
        return SMParam;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	3304      	adds	r3, #4
 8002a68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a6c:	e882 0003 	stmia.w	r2, {r0, r1}
    }
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <_ZN8servo_md10Parameters15set_motor_paramERKNS_10MotorParamE>:

	//パラメータを設定する関数
	//第1引数は設定内容が書かれた構造体オブジェクト
	void Parameters::set_motor_param(const MotorParam& param)
    {
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
        SMParam = param;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a8e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <_ZN8servo_md10Parameters7set_BIDEm>:
        return BID;
    }

	//BIDを設定する関数
	void Parameters::set_BID(const uint32_t bid)
    {
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
        BID = bid;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	801a      	strh	r2, [r3, #0]
    }
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <_ZN8servo_md10Parameters26trigger_emergency_callbackEv>:

	void Parameters::trigger_emergency_callback(void){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
		for(Parameters* pParameters : pInstances){
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <_ZN8servo_md10Parameters26trigger_emergency_callbackEv+0x5c>)
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f852 	bl	8002b6c <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EE5beginEv>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f85e 	bl	8002b8e <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EE3endEv>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	463a      	mov	r2, r7
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f866 	bl	8002bae <_ZSteqRKSt14_List_iteratorIPN8servo_md10ParametersEES5_>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00e      	beq.n	8002b0c <_ZN8servo_md10Parameters26trigger_emergency_callbackEv+0x54>
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 f87e 	bl	8002bf2 <_ZNKSt14_List_iteratorIPN8servo_md10ParametersEEdeEv>
 8002af6:	4603      	mov	r3, r0
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60bb      	str	r3, [r7, #8]
			pParameters->emergency_callback();
 8002afc:	68b8      	ldr	r0, [r7, #8]
 8002afe:	f7ff ff79 	bl	80029f4 <_ZN8servo_md10Parameters18emergency_callbackEv>
		for(Parameters* pParameters : pInstances){
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 f865 	bl	8002bd4 <_ZNSt14_List_iteratorIPN8servo_md10ParametersEEppEv>
 8002b0a:	e7e4      	b.n	8002ad6 <_ZN8servo_md10Parameters26trigger_emergency_callbackEv+0x1e>
		}
	}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200000e4 	.word	0x200000e4

08002b18 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f874 	bl	8002c0e <_ZNSaISt10_List_nodeIPN8servo_md10ParametersEEEC1Ev>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff f860 	bl	8001bee <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <_ZNSaISt10_List_nodeIPN8servo_md10ParametersEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f866 	bl	8002c26 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE8_M_clearEv>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff55 	bl	8002a0c <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE10_List_implD1Ev>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f876 	bl	8002c70 <_ZNSt14_List_iteratorIPN8servo_md10ParametersEEC1EPNSt8__detail15_List_node_baseE>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	f107 030c 	add.w	r3, r7, #12
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f866 	bl	8002c70 <_ZNSt14_List_iteratorIPN8servo_md10ParametersEEC1EPNSt8__detail15_List_node_baseE>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_ZSteqRKSt14_List_iteratorIPN8servo_md10ParametersEES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <_ZNSt14_List_iteratorIPN8servo_md10ParametersEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]
	return *this;
 8002be6:	687b      	ldr	r3, [r7, #4]
      }
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <_ZNKSt14_List_iteratorIPN8servo_md10ParametersEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f844 	bl	8002c8c <_ZNSt10_List_nodeIPN8servo_md10ParametersEE9_M_valptrEv>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <_ZNSaISt10_List_nodeIPN8servo_md10ParametersEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f846 	bl	8002ca8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md10ParametersEEEC1Ev>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d015      	beq.n	8002c68 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8002c46:	6938      	ldr	r0, [r7, #16]
 8002c48:	f000 f820 	bl	8002c8c <_ZNSt10_List_nodeIPN8servo_md10ParametersEE9_M_valptrEv>
 8002c4c:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f834 	bl	8002cbc <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE21_M_get_Node_allocatorEv>
 8002c54:	4603      	mov	r3, r0
 8002c56:	68f9      	ldr	r1, [r7, #12]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f839 	bl	8002cd0 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md10ParametersEEEE7destroyIS3_EEvRS5_PT_>
	  _M_put_node(__tmp);
 8002c5e:	6939      	ldr	r1, [r7, #16]
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f841 	bl	8002ce8 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      while (__cur != &_M_impl._M_node)
 8002c66:	e7e5      	b.n	8002c34 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE8_M_clearEv+0xe>
    }
 8002c68:	bf00      	nop
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_ZNSt14_List_iteratorIPN8servo_md10ParametersEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <_ZNSt10_List_nodeIPN8servo_md10ParametersEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3308      	adds	r3, #8
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 f834 	bl	8002d06 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md10ParametersEE6_M_ptrEv>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md10ParametersEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md10ParametersEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8002cda:	6838      	ldr	r0, [r7, #0]
 8002cdc:	f000 f81f 	bl	8002d1e <_ZSt10destroy_atIPN8servo_md10ParametersEEvPT_>
	}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	6839      	ldr	r1, [r7, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 f819 	bl	8002d30 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md10ParametersEEEE10deallocateERS5_PS4_j>
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md10ParametersEE6_M_ptrEv>:
      _M_ptr() noexcept
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f82d 	bl	8002d6e <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md10ParametersEE7_M_addrEv>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <_ZSt10destroy_atIPN8servo_md10ParametersEEvPT_>:
    destroy_at(_Tp* __location)
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
    }
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md10ParametersEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002d48:	f7fe ff4a 	bl	8001be0 <_ZSt21is_constant_evaluatedv>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md10ParametersEEEE10deallocateERS5_PS4_j+0x2a>
	    ::operator delete(__p);
 8002d52:	69b8      	ldr	r0, [r7, #24]
 8002d54:	f002 fd7b 	bl	800584e <_ZdlPv>
	    return;
 8002d58:	e005      	b.n	8002d66 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN8servo_md10ParametersEEEE10deallocateERS5_PS4_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	69b9      	ldr	r1, [r7, #24]
 8002d5e:	69f8      	ldr	r0, [r7, #28]
 8002d60:	f000 f80f 	bl	8002d82 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md10ParametersEEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <_ZN9__gnu_cxx16__aligned_membufIPN8servo_md10ParametersEE7_M_addrEv>:
      _M_addr() noexcept
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN8servo_md10ParametersEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	68b8      	ldr	r0, [r7, #8]
 8002d9c:	f002 fd59 	bl	8005852 <_ZdlPvj>
      }
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EED1Ev>:
      ~list() = default;
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fecb 	bl	8002b4c <_ZNSt7__cxx1110_List_baseIPN8servo_md10ParametersESaIS3_EED1Ev>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <_Z41__static_initialization_and_destruction_0ii>:
}
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d107      	bne.n	8002de0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d102      	bne.n	8002de0 <_Z41__static_initialization_and_destruction_0ii+0x20>
	std::list<Parameters*> Parameters::pInstances;
 8002dda:	4809      	ldr	r0, [pc, #36]	; (8002e00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002ddc:	f7ff fe2f 	bl	8002a3e <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EEC1Ev>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d107      	bne.n	8002df6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d102      	bne.n	8002df6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002df0:	4803      	ldr	r0, [pc, #12]	; (8002e00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002df2:	f7ff ffd8 	bl	8002da6 <_ZNSt7__cxx114listIPN8servo_md10ParametersESaIS3_EED1Ev>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	200000e4 	.word	0x200000e4

08002e04 <_GLOBAL__sub_I__ZN8servo_md10Parameters10pInstancesB5cxx11E>:
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f7ff ffd7 	bl	8002dc0 <_Z41__static_initialization_and_destruction_0ii>
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_GLOBAL__sub_D__ZN8servo_md10Parameters10pInstancesB5cxx11E>:
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7ff ffcf 	bl	8002dc0 <_Z41__static_initialization_and_destruction_0ii>
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <_ZN8servo_md7led_mgr11led_processEv>:
static bool is_yellow_led_on = false;
static uint8_t blink_num;
static uint8_t enabled_motor_num = 0;

namespace servo_md::led_mgr{
	void led_process(void){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
		constexpr unsigned int can_led_on_time = 60; //ms
 8002e2a:	233c      	movs	r3, #60	; 0x3c
 8002e2c:	61fb      	str	r3, [r7, #28]
		constexpr unsigned int green_led_on_time = 1900; //ms
 8002e2e:	f240 736c 	movw	r3, #1900	; 0x76c
 8002e32:	61bb      	str	r3, [r7, #24]
		constexpr unsigned int green_led_off_time = 100; //ms
 8002e34:	2364      	movs	r3, #100	; 0x64
 8002e36:	617b      	str	r3, [r7, #20]
		constexpr unsigned int yellow_led_period = 2000; //ms
 8002e38:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002e3c:	613b      	str	r3, [r7, #16]
		constexpr unsigned int yellow_led_margin = 500; //ms
 8002e3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e42:	60fb      	str	r3, [r7, #12]
		constexpr unsigned int yellow_led_blink_period = yellow_led_period - yellow_led_margin;
 8002e44:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002e48:	60bb      	str	r3, [r7, #8]
		if(is_can_led_on && ((HAL_GetTick() - can_led_last_on) > can_led_on_time)){
 8002e4a:	4b77      	ldr	r3, [pc, #476]	; (8003028 <_ZN8servo_md7led_mgr11led_processEv+0x204>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <_ZN8servo_md7led_mgr11led_processEv+0x42>
 8002e52:	f000 ff0f 	bl	8003c74 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4b74      	ldr	r3, [pc, #464]	; (800302c <_ZN8servo_md7led_mgr11led_processEv+0x208>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b3c      	cmp	r3, #60	; 0x3c
 8002e60:	d901      	bls.n	8002e66 <_ZN8servo_md7led_mgr11led_processEv+0x42>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <_ZN8servo_md7led_mgr11led_processEv+0x44>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <_ZN8servo_md7led_mgr11led_processEv+0x5a>
			HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e72:	486f      	ldr	r0, [pc, #444]	; (8003030 <_ZN8servo_md7led_mgr11led_processEv+0x20c>)
 8002e74:	f001 fa8e 	bl	8004394 <HAL_GPIO_WritePin>
			is_can_led_on = true;
 8002e78:	4b6b      	ldr	r3, [pc, #428]	; (8003028 <_ZN8servo_md7led_mgr11led_processEv+0x204>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
		}

		if(is_green_led_on && ((HAL_GetTick() - green_led_last_toggle) > green_led_on_time)){
 8002e7e:	4b6d      	ldr	r3, [pc, #436]	; (8003034 <_ZN8servo_md7led_mgr11led_processEv+0x210>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <_ZN8servo_md7led_mgr11led_processEv+0x7a>
 8002e86:	f000 fef5 	bl	8003c74 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <_ZN8servo_md7led_mgr11led_processEv+0x214>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f240 726c 	movw	r2, #1900	; 0x76c
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <_ZN8servo_md7led_mgr11led_processEv+0x7a>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <_ZN8servo_md7led_mgr11led_processEv+0x7c>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00d      	beq.n	8002ec0 <_ZN8servo_md7led_mgr11led_processEv+0x9c>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4864      	ldr	r0, [pc, #400]	; (800303c <_ZN8servo_md7led_mgr11led_processEv+0x218>)
 8002eaa:	f001 fa73 	bl	8004394 <HAL_GPIO_WritePin>
			is_green_led_on = false;
 8002eae:	4b61      	ldr	r3, [pc, #388]	; (8003034 <_ZN8servo_md7led_mgr11led_processEv+0x210>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
			green_led_last_toggle = HAL_GetTick();
 8002eb4:	f000 fede 	bl	8003c74 <HAL_GetTick>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4a5f      	ldr	r2, [pc, #380]	; (8003038 <_ZN8servo_md7led_mgr11led_processEv+0x214>)
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e020      	b.n	8002f02 <_ZN8servo_md7led_mgr11led_processEv+0xde>
		}else if((!is_green_led_on) && ((HAL_GetTick() - green_led_last_toggle) > green_led_off_time)){
 8002ec0:	4b5c      	ldr	r3, [pc, #368]	; (8003034 <_ZN8servo_md7led_mgr11led_processEv+0x210>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	f083 0301 	eor.w	r3, r3, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <_ZN8servo_md7led_mgr11led_processEv+0xbe>
 8002ece:	f000 fed1 	bl	8003c74 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	4b58      	ldr	r3, [pc, #352]	; (8003038 <_ZN8servo_md7led_mgr11led_processEv+0x214>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <_ZN8servo_md7led_mgr11led_processEv+0xbe>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <_ZN8servo_md7led_mgr11led_processEv+0xc0>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00c      	beq.n	8002f02 <_ZN8servo_md7led_mgr11led_processEv+0xde>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8002ee8:	2201      	movs	r2, #1
 8002eea:	2101      	movs	r1, #1
 8002eec:	4853      	ldr	r0, [pc, #332]	; (800303c <_ZN8servo_md7led_mgr11led_processEv+0x218>)
 8002eee:	f001 fa51 	bl	8004394 <HAL_GPIO_WritePin>
			is_green_led_on = true;
 8002ef2:	4b50      	ldr	r3, [pc, #320]	; (8003034 <_ZN8servo_md7led_mgr11led_processEv+0x210>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
			green_led_last_toggle = HAL_GetTick();
 8002ef8:	f000 febc 	bl	8003c74 <HAL_GetTick>
 8002efc:	4603      	mov	r3, r0
 8002efe:	4a4e      	ldr	r2, [pc, #312]	; (8003038 <_ZN8servo_md7led_mgr11led_processEv+0x214>)
 8002f00:	6013      	str	r3, [r2, #0]
		}

		if(enabled_motor_num != 0){
 8002f02:	4b4f      	ldr	r3, [pc, #316]	; (8003040 <_ZN8servo_md7led_mgr11led_processEv+0x21c>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d07f      	beq.n	800300a <_ZN8servo_md7led_mgr11led_processEv+0x1e6>
			int yellow_led_on_time, yellow_led_off_time;
			yellow_led_on_time = yellow_led_off_time = yellow_led_blink_period / enabled_motor_num / 2;
 8002f0a:	4b4d      	ldr	r3, [pc, #308]	; (8003040 <_ZN8servo_md7led_mgr11led_processEv+0x21c>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
			if(blink_num < enabled_motor_num){
 8002f1e:	4b49      	ldr	r3, [pc, #292]	; (8003044 <_ZN8servo_md7led_mgr11led_processEv+0x220>)
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <_ZN8servo_md7led_mgr11led_processEv+0x21c>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d250      	bcs.n	8002fcc <_ZN8servo_md7led_mgr11led_processEv+0x1a8>
				if(is_yellow_led_on && (HAL_GetTick() - yellow_led_last_toggle) > yellow_led_on_time){
 8002f2a:	4b47      	ldr	r3, [pc, #284]	; (8003048 <_ZN8servo_md7led_mgr11led_processEv+0x224>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <_ZN8servo_md7led_mgr11led_processEv+0x124>
 8002f32:	f000 fe9f 	bl	8003c74 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	4b44      	ldr	r3, [pc, #272]	; (800304c <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	1ad2      	subs	r2, r2, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d901      	bls.n	8002f48 <_ZN8servo_md7led_mgr11led_processEv+0x124>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <_ZN8servo_md7led_mgr11led_processEv+0x126>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00d      	beq.n	8002f6a <_ZN8servo_md7led_mgr11led_processEv+0x146>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2102      	movs	r1, #2
 8002f52:	483a      	ldr	r0, [pc, #232]	; (800303c <_ZN8servo_md7led_mgr11led_processEv+0x218>)
 8002f54:	f001 fa1e 	bl	8004394 <HAL_GPIO_WritePin>
					is_yellow_led_on = false;
 8002f58:	4b3b      	ldr	r3, [pc, #236]	; (8003048 <_ZN8servo_md7led_mgr11led_processEv+0x224>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
					yellow_led_last_toggle = HAL_GetTick();
 8002f5e:	f000 fe89 	bl	8003c74 <HAL_GetTick>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4a39      	ldr	r2, [pc, #228]	; (800304c <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 8002f66:	6013      	str	r3, [r2, #0]
			}
		}else{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
			yellow_led_last_toggle = HAL_GetTick();
		}
	}
 8002f68:	e059      	b.n	800301e <_ZN8servo_md7led_mgr11led_processEv+0x1fa>
				}else if((!is_yellow_led_on) && (HAL_GetTick() - yellow_led_last_toggle) > yellow_led_off_time){
 8002f6a:	4b37      	ldr	r3, [pc, #220]	; (8003048 <_ZN8servo_md7led_mgr11led_processEv+0x224>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	f083 0301 	eor.w	r3, r3, #1
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <_ZN8servo_md7led_mgr11led_processEv+0x16a>
 8002f78:	f000 fe7c 	bl	8003c74 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4b33      	ldr	r3, [pc, #204]	; (800304c <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	1ad2      	subs	r2, r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d901      	bls.n	8002f8e <_ZN8servo_md7led_mgr11led_processEv+0x16a>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <_ZN8servo_md7led_mgr11led_processEv+0x16c>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d044      	beq.n	800301e <_ZN8servo_md7led_mgr11led_processEv+0x1fa>
					if(blink_num < enabled_motor_num - 1){
 8002f94:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <_ZN8servo_md7led_mgr11led_processEv+0x220>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b29      	ldr	r3, [pc, #164]	; (8003040 <_ZN8servo_md7led_mgr11led_processEv+0x21c>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	da07      	bge.n	8002fb4 <_ZN8servo_md7led_mgr11led_processEv+0x190>
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	4824      	ldr	r0, [pc, #144]	; (800303c <_ZN8servo_md7led_mgr11led_processEv+0x218>)
 8002faa:	f001 f9f3 	bl	8004394 <HAL_GPIO_WritePin>
						is_yellow_led_on = true;
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <_ZN8servo_md7led_mgr11led_processEv+0x224>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
					blink_num++;
 8002fb4:	4b23      	ldr	r3, [pc, #140]	; (8003044 <_ZN8servo_md7led_mgr11led_processEv+0x220>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	4b21      	ldr	r3, [pc, #132]	; (8003044 <_ZN8servo_md7led_mgr11led_processEv+0x220>)
 8002fbe:	701a      	strb	r2, [r3, #0]
					yellow_led_last_toggle = HAL_GetTick();
 8002fc0:	f000 fe58 	bl	8003c74 <HAL_GetTick>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4a21      	ldr	r2, [pc, #132]	; (800304c <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 8002fc8:	6013      	str	r3, [r2, #0]
	}
 8002fca:	e028      	b.n	800301e <_ZN8servo_md7led_mgr11led_processEv+0x1fa>
				if((HAL_GetTick() - yellow_led_last_toggle) > yellow_led_margin){
 8002fcc:	f000 fe52 	bl	8003c74 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fdc:	bf8c      	ite	hi
 8002fde:	2301      	movhi	r3, #1
 8002fe0:	2300      	movls	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01a      	beq.n	800301e <_ZN8servo_md7led_mgr11led_processEv+0x1fa>
					blink_num = 0;
 8002fe8:	4b16      	ldr	r3, [pc, #88]	; (8003044 <_ZN8servo_md7led_mgr11led_processEv+0x220>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002fee:	2201      	movs	r2, #1
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	4812      	ldr	r0, [pc, #72]	; (800303c <_ZN8servo_md7led_mgr11led_processEv+0x218>)
 8002ff4:	f001 f9ce 	bl	8004394 <HAL_GPIO_WritePin>
					is_yellow_led_on = true;
 8002ff8:	4b13      	ldr	r3, [pc, #76]	; (8003048 <_ZN8servo_md7led_mgr11led_processEv+0x224>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
					yellow_led_last_toggle = HAL_GetTick();
 8002ffe:	f000 fe39 	bl	8003c74 <HAL_GetTick>
 8003002:	4603      	mov	r3, r0
 8003004:	4a11      	ldr	r2, [pc, #68]	; (800304c <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 8003006:	6013      	str	r3, [r2, #0]
	}
 8003008:	e009      	b.n	800301e <_ZN8servo_md7led_mgr11led_processEv+0x1fa>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800300a:	2200      	movs	r2, #0
 800300c:	2102      	movs	r1, #2
 800300e:	480b      	ldr	r0, [pc, #44]	; (800303c <_ZN8servo_md7led_mgr11led_processEv+0x218>)
 8003010:	f001 f9c0 	bl	8004394 <HAL_GPIO_WritePin>
			yellow_led_last_toggle = HAL_GetTick();
 8003014:	f000 fe2e 	bl	8003c74 <HAL_GetTick>
 8003018:	4603      	mov	r3, r0
 800301a:	4a0c      	ldr	r2, [pc, #48]	; (800304c <_ZN8servo_md7led_mgr11led_processEv+0x228>)
 800301c:	6013      	str	r3, [r2, #0]
	}
 800301e:	bf00      	nop
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200000fc 	.word	0x200000fc
 800302c:	200000f0 	.word	0x200000f0
 8003030:	40011000 	.word	0x40011000
 8003034:	20000000 	.word	0x20000000
 8003038:	200000f4 	.word	0x200000f4
 800303c:	40010c00 	.word	0x40010c00
 8003040:	200000ff 	.word	0x200000ff
 8003044:	200000fe 	.word	0x200000fe
 8003048:	200000fd 	.word	0x200000fd
 800304c:	200000f8 	.word	0x200000f8

08003050 <_ZN8servo_md7led_mgr17disable_all_motorEv>:

	void decrease_enabled_motor(){
		enabled_motor_num = enabled_motor_num > 0? enabled_motor_num - 1 : 0;
	}

	void disable_all_motor(){
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
		enabled_motor_num = 0;
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <_ZN8servo_md7led_mgr17disable_all_motorEv+0x14>)
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
	}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	200000ff 	.word	0x200000ff

08003068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800306c:	f000 fdaa 	bl	8003bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003070:	f000 f80d 	bl	800308e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003074:	f000 fa10 	bl	8003498 <MX_GPIO_Init>
  MX_CAN_Init();
 8003078:	f000 f84e 	bl	8003118 <MX_CAN_Init>
  MX_TIM1_Init();
 800307c:	f000 f880 	bl	8003180 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003080:	f000 f91e 	bl	80032c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003084:	f000 f992 	bl	80033ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  wrapper_cpp();
 8003088:	f000 fc9a 	bl	80039c0 <wrapper_cpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800308c:	e7fe      	b.n	800308c <main+0x24>

0800308e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b090      	sub	sp, #64	; 0x40
 8003092:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003094:	f107 0318 	add.w	r3, r7, #24
 8003098:	2228      	movs	r2, #40	; 0x28
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f003 f8f1 	bl	8006284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030b0:	2301      	movs	r3, #1
 80030b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030be:	2301      	movs	r3, #1
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030c2:	2302      	movs	r3, #2
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80030d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030d2:	f107 0318 	add.w	r3, r7, #24
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 f996 	bl	8004408 <HAL_RCC_OscConfig>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80030e2:	f000 fa5d 	bl	80035a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030e6:	230f      	movs	r3, #15
 80030e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ea:	2302      	movs	r3, #2
 80030ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	2102      	movs	r1, #2
 8003100:	4618      	mov	r0, r3
 8003102:	f001 fc03 	bl	800490c <HAL_RCC_ClockConfig>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800310c:	f000 fa48 	bl	80035a0 <Error_Handler>
  }
}
 8003110:	bf00      	nop
 8003112:	3740      	adds	r7, #64	; 0x40
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800311c:	4b16      	ldr	r3, [pc, #88]	; (8003178 <MX_CAN_Init+0x60>)
 800311e:	4a17      	ldr	r2, [pc, #92]	; (800317c <MX_CAN_Init+0x64>)
 8003120:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8003122:	4b15      	ldr	r3, [pc, #84]	; (8003178 <MX_CAN_Init+0x60>)
 8003124:	2210      	movs	r2, #16
 8003126:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <MX_CAN_Init+0x60>)
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <MX_CAN_Init+0x60>)
 8003130:	2200      	movs	r2, #0
 8003132:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <MX_CAN_Init+0x60>)
 8003136:	2200      	movs	r2, #0
 8003138:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <MX_CAN_Init+0x60>)
 800313c:	2200      	movs	r2, #0
 800313e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <MX_CAN_Init+0x60>)
 8003142:	2200      	movs	r2, #0
 8003144:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <MX_CAN_Init+0x60>)
 8003148:	2200      	movs	r2, #0
 800314a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <MX_CAN_Init+0x60>)
 800314e:	2200      	movs	r2, #0
 8003150:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <MX_CAN_Init+0x60>)
 8003154:	2200      	movs	r2, #0
 8003156:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003158:	4b07      	ldr	r3, [pc, #28]	; (8003178 <MX_CAN_Init+0x60>)
 800315a:	2200      	movs	r2, #0
 800315c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <MX_CAN_Init+0x60>)
 8003160:	2200      	movs	r2, #0
 8003162:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003164:	4804      	ldr	r0, [pc, #16]	; (8003178 <MX_CAN_Init+0x60>)
 8003166:	f000 fd8f 	bl	8003c88 <HAL_CAN_Init>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8003170:	f000 fa16 	bl	80035a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20000100 	.word	0x20000100
 800317c:	40006400 	.word	0x40006400

08003180 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b096      	sub	sp, #88	; 0x58
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003186:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	609a      	str	r2, [r3, #8]
 8003192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003194:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800319e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	611a      	str	r2, [r3, #16]
 80031ae:	615a      	str	r2, [r3, #20]
 80031b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	2220      	movs	r2, #32
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f003 f863 	bl	8006284 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031be:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <MX_TIM1_Init+0x138>)
 80031c0:	4a3e      	ldr	r2, [pc, #248]	; (80032bc <MX_TIM1_Init+0x13c>)
 80031c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80031c4:	4b3c      	ldr	r3, [pc, #240]	; (80032b8 <MX_TIM1_Init+0x138>)
 80031c6:	2247      	movs	r2, #71	; 0x47
 80031c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ca:	4b3b      	ldr	r3, [pc, #236]	; (80032b8 <MX_TIM1_Init+0x138>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80031d0:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <MX_TIM1_Init+0x138>)
 80031d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d8:	4b37      	ldr	r3, [pc, #220]	; (80032b8 <MX_TIM1_Init+0x138>)
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <MX_TIM1_Init+0x138>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e4:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <MX_TIM1_Init+0x138>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031ea:	4833      	ldr	r0, [pc, #204]	; (80032b8 <MX_TIM1_Init+0x138>)
 80031ec:	f001 fd26 	bl	8004c3c <HAL_TIM_Base_Init>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80031f6:	f000 f9d3 	bl	80035a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003200:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003204:	4619      	mov	r1, r3
 8003206:	482c      	ldr	r0, [pc, #176]	; (80032b8 <MX_TIM1_Init+0x138>)
 8003208:	f001 ff1a 	bl	8005040 <HAL_TIM_ConfigClockSource>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003212:	f000 f9c5 	bl	80035a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003216:	4828      	ldr	r0, [pc, #160]	; (80032b8 <MX_TIM1_Init+0x138>)
 8003218:	f001 fd5f 	bl	8004cda <HAL_TIM_PWM_Init>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003222:	f000 f9bd 	bl	80035a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800322a:	2300      	movs	r3, #0
 800322c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800322e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003232:	4619      	mov	r1, r3
 8003234:	4820      	ldr	r0, [pc, #128]	; (80032b8 <MX_TIM1_Init+0x138>)
 8003236:	f002 fa61 	bl	80056fc <HAL_TIMEx_MasterConfigSynchronization>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003240:	f000 f9ae 	bl	80035a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003244:	2360      	movs	r3, #96	; 0x60
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800324c:	2300      	movs	r3, #0
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003250:	2300      	movs	r3, #0
 8003252:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003254:	2300      	movs	r3, #0
 8003256:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003258:	2300      	movs	r3, #0
 800325a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800325c:	2300      	movs	r3, #0
 800325e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003264:	2200      	movs	r2, #0
 8003266:	4619      	mov	r1, r3
 8003268:	4813      	ldr	r0, [pc, #76]	; (80032b8 <MX_TIM1_Init+0x138>)
 800326a:	f001 fe2b 	bl	8004ec4 <HAL_TIM_PWM_ConfigChannel>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003274:	f000 f994 	bl	80035a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003278:	2300      	movs	r3, #0
 800327a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800327c:	2300      	movs	r3, #0
 800327e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800328c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003290:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003296:	1d3b      	adds	r3, r7, #4
 8003298:	4619      	mov	r1, r3
 800329a:	4807      	ldr	r0, [pc, #28]	; (80032b8 <MX_TIM1_Init+0x138>)
 800329c:	f002 fa86 	bl	80057ac <HAL_TIMEx_ConfigBreakDeadTime>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80032a6:	f000 f97b 	bl	80035a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032aa:	4803      	ldr	r0, [pc, #12]	; (80032b8 <MX_TIM1_Init+0x138>)
 80032ac:	f000 fa54 	bl	8003758 <HAL_TIM_MspPostInit>

}
 80032b0:	bf00      	nop
 80032b2:	3758      	adds	r7, #88	; 0x58
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000128 	.word	0x20000128
 80032bc:	40012c00 	.word	0x40012c00

080032c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08e      	sub	sp, #56	; 0x38
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d4:	f107 0320 	add.w	r3, r7, #32
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
 80032ec:	615a      	str	r2, [r3, #20]
 80032ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032f0:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <MX_TIM2_Init+0xe8>)
 80032f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <MX_TIM2_Init+0xe8>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032fe:	4b2a      	ldr	r3, [pc, #168]	; (80033a8 <MX_TIM2_Init+0xe8>)
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003304:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <MX_TIM2_Init+0xe8>)
 8003306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800330a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800330c:	4b26      	ldr	r3, [pc, #152]	; (80033a8 <MX_TIM2_Init+0xe8>)
 800330e:	2200      	movs	r2, #0
 8003310:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003312:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <MX_TIM2_Init+0xe8>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003318:	4823      	ldr	r0, [pc, #140]	; (80033a8 <MX_TIM2_Init+0xe8>)
 800331a:	f001 fc8f 	bl	8004c3c <HAL_TIM_Base_Init>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003324:	f000 f93c 	bl	80035a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800332e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003332:	4619      	mov	r1, r3
 8003334:	481c      	ldr	r0, [pc, #112]	; (80033a8 <MX_TIM2_Init+0xe8>)
 8003336:	f001 fe83 	bl	8005040 <HAL_TIM_ConfigClockSource>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003340:	f000 f92e 	bl	80035a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003344:	4818      	ldr	r0, [pc, #96]	; (80033a8 <MX_TIM2_Init+0xe8>)
 8003346:	f001 fcc8 	bl	8004cda <HAL_TIM_PWM_Init>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003350:	f000 f926 	bl	80035a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003354:	2300      	movs	r3, #0
 8003356:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003358:	2300      	movs	r3, #0
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800335c:	f107 0320 	add.w	r3, r7, #32
 8003360:	4619      	mov	r1, r3
 8003362:	4811      	ldr	r0, [pc, #68]	; (80033a8 <MX_TIM2_Init+0xe8>)
 8003364:	f002 f9ca 	bl	80056fc <HAL_TIMEx_MasterConfigSynchronization>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800336e:	f000 f917 	bl	80035a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003372:	2360      	movs	r3, #96	; 0x60
 8003374:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	2200      	movs	r2, #0
 8003386:	4619      	mov	r1, r3
 8003388:	4807      	ldr	r0, [pc, #28]	; (80033a8 <MX_TIM2_Init+0xe8>)
 800338a:	f001 fd9b 	bl	8004ec4 <HAL_TIM_PWM_ConfigChannel>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003394:	f000 f904 	bl	80035a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003398:	4803      	ldr	r0, [pc, #12]	; (80033a8 <MX_TIM2_Init+0xe8>)
 800339a:	f000 f9dd 	bl	8003758 <HAL_TIM_MspPostInit>

}
 800339e:	bf00      	nop
 80033a0:	3738      	adds	r7, #56	; 0x38
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000170 	.word	0x20000170

080033ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08e      	sub	sp, #56	; 0x38
 80033b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033c0:	f107 0320 	add.w	r3, r7, #32
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
 80033d8:	615a      	str	r2, [r3, #20]
 80033da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033dc:	4b2c      	ldr	r3, [pc, #176]	; (8003490 <MX_TIM3_Init+0xe4>)
 80033de:	4a2d      	ldr	r2, [pc, #180]	; (8003494 <MX_TIM3_Init+0xe8>)
 80033e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033e2:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <MX_TIM3_Init+0xe4>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033e8:	4b29      	ldr	r3, [pc, #164]	; (8003490 <MX_TIM3_Init+0xe4>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80033ee:	4b28      	ldr	r3, [pc, #160]	; (8003490 <MX_TIM3_Init+0xe4>)
 80033f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033f6:	4b26      	ldr	r3, [pc, #152]	; (8003490 <MX_TIM3_Init+0xe4>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033fc:	4b24      	ldr	r3, [pc, #144]	; (8003490 <MX_TIM3_Init+0xe4>)
 80033fe:	2200      	movs	r2, #0
 8003400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003402:	4823      	ldr	r0, [pc, #140]	; (8003490 <MX_TIM3_Init+0xe4>)
 8003404:	f001 fc1a 	bl	8004c3c <HAL_TIM_Base_Init>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800340e:	f000 f8c7 	bl	80035a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003418:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800341c:	4619      	mov	r1, r3
 800341e:	481c      	ldr	r0, [pc, #112]	; (8003490 <MX_TIM3_Init+0xe4>)
 8003420:	f001 fe0e 	bl	8005040 <HAL_TIM_ConfigClockSource>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800342a:	f000 f8b9 	bl	80035a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800342e:	4818      	ldr	r0, [pc, #96]	; (8003490 <MX_TIM3_Init+0xe4>)
 8003430:	f001 fc53 	bl	8004cda <HAL_TIM_PWM_Init>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800343a:	f000 f8b1 	bl	80035a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003446:	f107 0320 	add.w	r3, r7, #32
 800344a:	4619      	mov	r1, r3
 800344c:	4810      	ldr	r0, [pc, #64]	; (8003490 <MX_TIM3_Init+0xe4>)
 800344e:	f002 f955 	bl	80056fc <HAL_TIMEx_MasterConfigSynchronization>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003458:	f000 f8a2 	bl	80035a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800345c:	2360      	movs	r3, #96	; 0x60
 800345e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800346c:	1d3b      	adds	r3, r7, #4
 800346e:	2200      	movs	r2, #0
 8003470:	4619      	mov	r1, r3
 8003472:	4807      	ldr	r0, [pc, #28]	; (8003490 <MX_TIM3_Init+0xe4>)
 8003474:	f001 fd26 	bl	8004ec4 <HAL_TIM_PWM_ConfigChannel>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800347e:	f000 f88f 	bl	80035a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003482:	4803      	ldr	r0, [pc, #12]	; (8003490 <MX_TIM3_Init+0xe4>)
 8003484:	f000 f968 	bl	8003758 <HAL_TIM_MspPostInit>

}
 8003488:	bf00      	nop
 800348a:	3738      	adds	r7, #56	; 0x38
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	200001b8 	.word	0x200001b8
 8003494:	40000400 	.word	0x40000400

08003498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349e:	f107 0310 	add.w	r3, r7, #16
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ac:	4b38      	ldr	r3, [pc, #224]	; (8003590 <MX_GPIO_Init+0xf8>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	4a37      	ldr	r2, [pc, #220]	; (8003590 <MX_GPIO_Init+0xf8>)
 80034b2:	f043 0310 	orr.w	r3, r3, #16
 80034b6:	6193      	str	r3, [r2, #24]
 80034b8:	4b35      	ldr	r3, [pc, #212]	; (8003590 <MX_GPIO_Init+0xf8>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034c4:	4b32      	ldr	r3, [pc, #200]	; (8003590 <MX_GPIO_Init+0xf8>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	4a31      	ldr	r2, [pc, #196]	; (8003590 <MX_GPIO_Init+0xf8>)
 80034ca:	f043 0320 	orr.w	r3, r3, #32
 80034ce:	6193      	str	r3, [r2, #24]
 80034d0:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <MX_GPIO_Init+0xf8>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034dc:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <MX_GPIO_Init+0xf8>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	4a2b      	ldr	r2, [pc, #172]	; (8003590 <MX_GPIO_Init+0xf8>)
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	6193      	str	r3, [r2, #24]
 80034e8:	4b29      	ldr	r3, [pc, #164]	; (8003590 <MX_GPIO_Init+0xf8>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f4:	4b26      	ldr	r3, [pc, #152]	; (8003590 <MX_GPIO_Init+0xf8>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	4a25      	ldr	r2, [pc, #148]	; (8003590 <MX_GPIO_Init+0xf8>)
 80034fa:	f043 0308 	orr.w	r3, r3, #8
 80034fe:	6193      	str	r3, [r2, #24]
 8003500:	4b23      	ldr	r3, [pc, #140]	; (8003590 <MX_GPIO_Init+0xf8>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 800350c:	2200      	movs	r2, #0
 800350e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003512:	4820      	ldr	r0, [pc, #128]	; (8003594 <MX_GPIO_Init+0xfc>)
 8003514:	f000 ff3e 	bl	8004394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8003518:	2200      	movs	r2, #0
 800351a:	2103      	movs	r1, #3
 800351c:	481e      	ldr	r0, [pc, #120]	; (8003598 <MX_GPIO_Init+0x100>)
 800351e:	f000 ff39 	bl	8004394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_CAN_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin;
 8003522:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003528:	2301      	movs	r3, #1
 800352a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800352c:	2302      	movs	r3, #2
 800352e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003530:	2302      	movs	r3, #2
 8003532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 8003534:	f107 0310 	add.w	r3, r7, #16
 8003538:	4619      	mov	r1, r3
 800353a:	4816      	ldr	r0, [pc, #88]	; (8003594 <MX_GPIO_Init+0xfc>)
 800353c:	f000 fdae 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8003540:	2303      	movs	r3, #3
 8003542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003544:	2301      	movs	r3, #1
 8003546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003548:	2302      	movs	r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354c:	2302      	movs	r3, #2
 800354e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003550:	f107 0310 	add.w	r3, r7, #16
 8003554:	4619      	mov	r1, r3
 8003556:	4810      	ldr	r0, [pc, #64]	; (8003598 <MX_GPIO_Init+0x100>)
 8003558:	f000 fda0 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : EMS_Pin */
  GPIO_InitStruct.Pin = EMS_Pin;
 800355c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <MX_GPIO_Init+0x104>)
 8003564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003566:	2302      	movs	r3, #2
 8003568:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 800356a:	f107 0310 	add.w	r3, r7, #16
 800356e:	4619      	mov	r1, r3
 8003570:	4809      	ldr	r0, [pc, #36]	; (8003598 <MX_GPIO_Init+0x100>)
 8003572:	f000 fd93 	bl	800409c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003576:	2200      	movs	r2, #0
 8003578:	2100      	movs	r1, #0
 800357a:	2028      	movs	r0, #40	; 0x28
 800357c:	f000 fd57 	bl	800402e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003580:	2028      	movs	r0, #40	; 0x28
 8003582:	f000 fd70 	bl	8004066 <HAL_NVIC_EnableIRQ>

}
 8003586:	bf00      	nop
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	40011000 	.word	0x40011000
 8003598:	40010c00 	.word	0x40010c00
 800359c:	10210000 	.word	0x10210000

080035a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035a4:	b672      	cpsid	i
}
 80035a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035a8:	e7fe      	b.n	80035a8 <Error_Handler+0x8>
	...

080035ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80035b2:	4b15      	ldr	r3, [pc, #84]	; (8003608 <HAL_MspInit+0x5c>)
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	4a14      	ldr	r2, [pc, #80]	; (8003608 <HAL_MspInit+0x5c>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6193      	str	r3, [r2, #24]
 80035be:	4b12      	ldr	r3, [pc, #72]	; (8003608 <HAL_MspInit+0x5c>)
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ca:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <HAL_MspInit+0x5c>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <HAL_MspInit+0x5c>)
 80035d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d4:	61d3      	str	r3, [r2, #28]
 80035d6:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <HAL_MspInit+0x5c>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <HAL_MspInit+0x60>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	4a04      	ldr	r2, [pc, #16]	; (800360c <HAL_MspInit+0x60>)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	40021000 	.word	0x40021000
 800360c:	40010000 	.word	0x40010000

08003610 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a25      	ldr	r2, [pc, #148]	; (80036c0 <HAL_CAN_MspInit+0xb0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d143      	bne.n	80036b8 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003630:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <HAL_CAN_MspInit+0xb4>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <HAL_CAN_MspInit+0xb4>)
 8003636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800363a:	61d3      	str	r3, [r2, #28]
 800363c:	4b21      	ldr	r3, [pc, #132]	; (80036c4 <HAL_CAN_MspInit+0xb4>)
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003648:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <HAL_CAN_MspInit+0xb4>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <HAL_CAN_MspInit+0xb4>)
 800364e:	f043 0308 	orr.w	r3, r3, #8
 8003652:	6193      	str	r3, [r2, #24]
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <HAL_CAN_MspInit+0xb4>)
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800366e:	f107 0314 	add.w	r3, r7, #20
 8003672:	4619      	mov	r1, r3
 8003674:	4814      	ldr	r0, [pc, #80]	; (80036c8 <HAL_CAN_MspInit+0xb8>)
 8003676:	f000 fd11 	bl	800409c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800367a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800367e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003680:	2302      	movs	r3, #2
 8003682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003684:	2303      	movs	r3, #3
 8003686:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	4619      	mov	r1, r3
 800368e:	480e      	ldr	r0, [pc, #56]	; (80036c8 <HAL_CAN_MspInit+0xb8>)
 8003690:	f000 fd04 	bl	800409c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8003694:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <HAL_CAN_MspInit+0xbc>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
 80036b2:	4a06      	ldr	r2, [pc, #24]	; (80036cc <HAL_CAN_MspInit+0xbc>)
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80036b8:	bf00      	nop
 80036ba:	3728      	adds	r7, #40	; 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40006400 	.word	0x40006400
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40010c00 	.word	0x40010c00
 80036cc:	40010000 	.word	0x40010000

080036d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1b      	ldr	r2, [pc, #108]	; (800374c <HAL_TIM_Base_MspInit+0x7c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d10c      	bne.n	80036fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_TIM_Base_MspInit+0x80>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <HAL_TIM_Base_MspInit+0x80>)
 80036e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036ec:	6193      	str	r3, [r2, #24]
 80036ee:	4b18      	ldr	r3, [pc, #96]	; (8003750 <HAL_TIM_Base_MspInit+0x80>)
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80036fa:	e022      	b.n	8003742 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003704:	d10c      	bne.n	8003720 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_TIM_Base_MspInit+0x80>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4a11      	ldr	r2, [pc, #68]	; (8003750 <HAL_TIM_Base_MspInit+0x80>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	61d3      	str	r3, [r2, #28]
 8003712:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <HAL_TIM_Base_MspInit+0x80>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	693b      	ldr	r3, [r7, #16]
}
 800371e:	e010      	b.n	8003742 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <HAL_TIM_Base_MspInit+0x84>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d10b      	bne.n	8003742 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_TIM_Base_MspInit+0x80>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	4a08      	ldr	r2, [pc, #32]	; (8003750 <HAL_TIM_Base_MspInit+0x80>)
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	61d3      	str	r3, [r2, #28]
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_TIM_Base_MspInit+0x80>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
}
 8003742:	bf00      	nop
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40021000 	.word	0x40021000
 8003754:	40000400 	.word	0x40000400

08003758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a37      	ldr	r2, [pc, #220]	; (8003850 <HAL_TIM_MspPostInit+0xf8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d119      	bne.n	80037ac <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <HAL_TIM_MspPostInit+0xfc>)
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	4a35      	ldr	r2, [pc, #212]	; (8003854 <HAL_TIM_MspPostInit+0xfc>)
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	6193      	str	r3, [r2, #24]
 8003784:	4b33      	ldr	r3, [pc, #204]	; (8003854 <HAL_TIM_MspPostInit+0xfc>)
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379a:	2302      	movs	r3, #2
 800379c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379e:	f107 0314 	add.w	r3, r7, #20
 80037a2:	4619      	mov	r1, r3
 80037a4:	482c      	ldr	r0, [pc, #176]	; (8003858 <HAL_TIM_MspPostInit+0x100>)
 80037a6:	f000 fc79 	bl	800409c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037aa:	e04c      	b.n	8003846 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b4:	d118      	bne.n	80037e8 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b6:	4b27      	ldr	r3, [pc, #156]	; (8003854 <HAL_TIM_MspPostInit+0xfc>)
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	4a26      	ldr	r2, [pc, #152]	; (8003854 <HAL_TIM_MspPostInit+0xfc>)
 80037bc:	f043 0304 	orr.w	r3, r3, #4
 80037c0:	6193      	str	r3, [r2, #24]
 80037c2:	4b24      	ldr	r3, [pc, #144]	; (8003854 <HAL_TIM_MspPostInit+0xfc>)
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037ce:	2301      	movs	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d2:	2302      	movs	r3, #2
 80037d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d6:	2302      	movs	r3, #2
 80037d8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	f107 0314 	add.w	r3, r7, #20
 80037de:	4619      	mov	r1, r3
 80037e0:	481d      	ldr	r0, [pc, #116]	; (8003858 <HAL_TIM_MspPostInit+0x100>)
 80037e2:	f000 fc5b 	bl	800409c <HAL_GPIO_Init>
}
 80037e6:	e02e      	b.n	8003846 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1b      	ldr	r2, [pc, #108]	; (800385c <HAL_TIM_MspPostInit+0x104>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d129      	bne.n	8003846 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <HAL_TIM_MspPostInit+0xfc>)
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_TIM_MspPostInit+0xfc>)
 80037f8:	f043 0308 	orr.w	r3, r3, #8
 80037fc:	6193      	str	r3, [r2, #24]
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <HAL_TIM_MspPostInit+0xfc>)
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800380a:	2310      	movs	r3, #16
 800380c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380e:	2302      	movs	r3, #2
 8003810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003812:	2302      	movs	r3, #2
 8003814:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003816:	f107 0314 	add.w	r3, r7, #20
 800381a:	4619      	mov	r1, r3
 800381c:	4810      	ldr	r0, [pc, #64]	; (8003860 <HAL_TIM_MspPostInit+0x108>)
 800381e:	f000 fc3d 	bl	800409c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_TIM_MspPostInit+0x10c>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
 8003840:	4a08      	ldr	r2, [pc, #32]	; (8003864 <HAL_TIM_MspPostInit+0x10c>)
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	6053      	str	r3, [r2, #4]
}
 8003846:	bf00      	nop
 8003848:	3728      	adds	r7, #40	; 0x28
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40012c00 	.word	0x40012c00
 8003854:	40021000 	.word	0x40021000
 8003858:	40010800 	.word	0x40010800
 800385c:	40000400 	.word	0x40000400
 8003860:	40010c00 	.word	0x40010c00
 8003864:	40010000 	.word	0x40010000

08003868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800386c:	e7fe      	b.n	800386c <NMI_Handler+0x4>

0800386e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800386e:	b480      	push	{r7}
 8003870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003872:	e7fe      	b.n	8003872 <HardFault_Handler+0x4>

08003874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003878:	e7fe      	b.n	8003878 <MemManage_Handler+0x4>

0800387a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800387e:	e7fe      	b.n	800387e <BusFault_Handler+0x4>

08003880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003884:	e7fe      	b.n	8003884 <UsageFault_Handler+0x4>

08003886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003892:	b480      	push	{r7}
 8003894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038ae:	f000 f9cf 	bl	8003c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMS_Pin);
 80038ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80038be:	f000 fd81 	bl	80043c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038c6:	b480      	push	{r7}
 80038c8:	af00      	add	r7, sp, #0
	return 1;
 80038ca:	2301      	movs	r3, #1
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <_kill>:

int _kill(int pid, int sig)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038de:	f002 fc91 	bl	8006204 <__errno>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2216      	movs	r2, #22
 80038e6:	601a      	str	r2, [r3, #0]
	return -1;
 80038e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <_exit>:

void _exit (int status)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ffe7 	bl	80038d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003906:	e7fe      	b.n	8003906 <_exit+0x12>

08003908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <_ZN8servo_md10ParametersC1Ev>:

		public:
			//コンストラクタ(引数やオーバーロードは自由に決めてよい)
			explicit Parameters(){}
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <_ZN8servo_md15MotorControllerC1EP17TIM_HandleTypeDefRNS_10ParametersEmhttt>:
			explicit MotorController(
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
			): pwm_tim(pwm_tim), pwm_channel(pwm_channel), params(params){
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003942:	711a      	strb	r2, [r3, #4]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	609a      	str	r2, [r3, #8]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	821a      	strh	r2, [r3, #16]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	825a      	strh	r2, [r3, #18]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	751a      	strb	r2, [r3, #20]
				const uint16_t count_up_period = 1000000/(source_clock/(pwm_tim->Instance->PSC + 1));
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	3301      	adds	r3, #1
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	4a12      	ldr	r2, [pc, #72]	; (80039bc <_ZN8servo_md15MotorControllerC1EP17TIM_HandleTypeDefRNS_10ParametersEmhttt+0x94>)
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	82fb      	strh	r3, [r7, #22]
				pwm_count_max = pwm_pulse_max/count_up_period;
 800397a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800397c:	8afb      	ldrh	r3, [r7, #22]
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	825a      	strh	r2, [r3, #18]
				pwm_count_min = pwm_pulse_min/count_up_period;
 8003988:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800398a:	8afb      	ldrh	r3, [r7, #22]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	821a      	strh	r2, [r3, #16]
				pwm_tim->Instance->ARR = pwm_cycle/count_up_period;
 8003996:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003998:	8afb      	ldrh	r3, [r7, #22]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	62da      	str	r2, [r3, #44]	; 0x2c
				HAL_TIM_PWM_Start(pwm_tim, pwm_channel);
 80039a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039aa:	4619      	mov	r1, r3
 80039ac:	68b8      	ldr	r0, [r7, #8]
 80039ae:	f001 f9ed 	bl	8004d8c <HAL_TIM_PWM_Start>
			}
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	000f4240 	.word	0x000f4240

080039c0 <wrapper_cpp>:
static inline unsigned long get_general_tim_clock();
static inline unsigned long get_advanced_tim_clock();
static void common_cmd_callback(uint8_t, Parameters&);
static void common_target_callback(float, Parameters&);

void wrapper_cpp(void){
 80039c0:	b5b0      	push	{r4, r5, r7, lr}
 80039c2:	b09e      	sub	sp, #120	; 0x78
 80039c4:	af04      	add	r7, sp, #16
	constexpr uint16_t pwm_pulse_min = 500; //microsec
 80039c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80039ca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	constexpr uint16_t pwm_pulse_max = 2400; //microsec
 80039ce:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80039d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	constexpr uint16_t pwm_cycle = 20000; //microsec
 80039d6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80039da:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

//	CanManager can_mgr(&hcan);
	Parameters parameters[MOTOR_NUM];
 80039de:	f107 0308 	add.w	r3, r7, #8
 80039e2:	2401      	movs	r4, #1
 80039e4:	461d      	mov	r5, r3
 80039e6:	2c00      	cmp	r4, #0
 80039e8:	db05      	blt.n	80039f6 <wrapper_cpp+0x36>
 80039ea:	4628      	mov	r0, r5
 80039ec:	f7ff ff92 	bl	8003914 <_ZN8servo_md10ParametersC1Ev>
 80039f0:	350c      	adds	r5, #12
 80039f2:	3c01      	subs	r4, #1
 80039f4:	e7f7      	b.n	80039e6 <wrapper_cpp+0x26>
	MotorController(&htim1, parameters[A], get_advanced_tim_clock(), TIM_CHANNEL_1, pwm_cycle, pwm_pulse_min, pwm_pulse_max);
 80039f6:	f000 f8a3 	bl	8003b40 <_ZL22get_advanced_tim_clockv>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f107 0208 	add.w	r2, r7, #8
 8003a00:	f107 0020 	add.w	r0, r7, #32
 8003a04:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8003a08:	9103      	str	r1, [sp, #12]
 8003a0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003a0e:	9102      	str	r1, [sp, #8]
 8003a10:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003a14:	9101      	str	r1, [sp, #4]
 8003a16:	2100      	movs	r1, #0
 8003a18:	9100      	str	r1, [sp, #0]
 8003a1a:	4937      	ldr	r1, [pc, #220]	; (8003af8 <wrapper_cpp+0x138>)
 8003a1c:	f7ff ff84 	bl	8003928 <_ZN8servo_md15MotorControllerC1EP17TIM_HandleTypeDefRNS_10ParametersEmhttt>
	MotorController(&htim2, parameters[C], get_general_tim_clock());
 8003a20:	f000 f872 	bl	8003b08 <_ZL21get_general_tim_clockv>
 8003a24:	4601      	mov	r1, r0
 8003a26:	f107 0308 	add.w	r3, r7, #8
 8003a2a:	f103 020c 	add.w	r2, r3, #12
 8003a2e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003a32:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8003a36:	9303      	str	r3, [sp, #12]
 8003a38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003a3c:	9302      	str	r3, [sp, #8]
 8003a3e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	2300      	movs	r3, #0
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	492c      	ldr	r1, [pc, #176]	; (8003afc <wrapper_cpp+0x13c>)
 8003a4c:	f7ff ff6c 	bl	8003928 <_ZN8servo_md15MotorControllerC1EP17TIM_HandleTypeDefRNS_10ParametersEmhttt>
#endif
	};
*/
	//パラメーター設定
	//ver1.0ではフラッシュから読み出す
	constexpr uint16_t bida = 0x400;
 8003a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a54:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
//	constexpr uint16_t two_bit_ignore_mask = ~0b11;
	parameters[A].set_BID(bida);
 8003a58:	f107 0308 	add.w	r3, r7, #8
 8003a5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff f81b 	bl	8002a9c <_ZN8servo_md10Parameters7set_BIDEm>
	parameters[C].set_BID(bida + 4);
 8003a66:	f107 0308 	add.w	r3, r7, #8
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	f240 4104 	movw	r1, #1028	; 0x404
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff f813 	bl	8002a9c <_ZN8servo_md10Parameters7set_BIDEm>
#if !defined EMSBoard_1_0
	parameters[E].set_BID(bida + 8);
#endif

	parameters[A].set_motor_param(
			MotorParam{
 8003a76:	2304      	movs	r3, #4
 8003a78:	653b      	str	r3, [r7, #80]	; 0x50
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	657b      	str	r3, [r7, #84]	; 0x54
	parameters[A].set_motor_param(
 8003a80:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003a84:	f107 0308 	add.w	r3, r7, #8
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fff5 	bl	8002a7a <_ZN8servo_md10Parameters15set_motor_paramERKNS_10MotorParamE>
				.mode = MD_MODE::ENABLE,
				.target = 0
			}
	);
	parameters[C].set_motor_param(
				MotorParam{
 8003a90:	2304      	movs	r3, #4
 8003a92:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	65fb      	str	r3, [r7, #92]	; 0x5c
	parameters[C].set_motor_param(
 8003a9a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a9e:	f107 0308 	add.w	r3, r7, #8
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe ffe7 	bl	8002a7a <_ZN8servo_md10Parameters15set_motor_paramERKNS_10MotorParamE>
#endif

	//CANスタート
	HAL_CAN_Start(&hcan);
*/
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003aac:	2100      	movs	r1, #0
 8003aae:	4812      	ldr	r0, [pc, #72]	; (8003af8 <wrapper_cpp+0x138>)
 8003ab0:	f001 f96c 	bl	8004d8c <HAL_TIM_PWM_Start>

	MotorParam paramA = parameters[A].get_motor_params();
 8003ab4:	463b      	mov	r3, r7
 8003ab6:	f107 0208 	add.w	r2, r7, #8
 8003aba:	4611      	mov	r1, r2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe ffcb 	bl	8002a58 <_ZN8servo_md10Parameters16get_motor_paramsEv>
	paramA.target = 0.5f * std::numbers::pi;
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <wrapper_cpp+0x140>)
 8003ac4:	607b      	str	r3, [r7, #4]
	parameters[A].set_motor_param(paramA);
 8003ac6:	463a      	mov	r2, r7
 8003ac8:	f107 0308 	add.w	r3, r7, #8
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe ffd3 	bl	8002a7a <_ZN8servo_md10Parameters15set_motor_paramERKNS_10MotorParamE>
	while(true){
		if(error_request_flag){
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <wrapper_cpp+0x144>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <wrapper_cpp+0x12e>
			MotorController::trigger_emergency_callback();
 8003adc:	f7fe fda4 	bl	8002628 <_ZN8servo_md15MotorController26trigger_emergency_callbackEv>
			Parameters::trigger_emergency_callback();
 8003ae0:	f7fe ffea 	bl	8002ab8 <_ZN8servo_md10Parameters26trigger_emergency_callbackEv>
			led_mgr::disable_all_motor();
 8003ae4:	f7ff fab4 	bl	8003050 <_ZN8servo_md7led_mgr17disable_all_motorEv>
			error_request_flag = false;
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <wrapper_cpp+0x144>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
		}

//		CanController<uint8_t>::trigger_update();
//		CanController<float>::trigger_update();
		MotorController::trigger_update();
 8003aee:	f7fe fdcb 	bl	8002688 <_ZN8servo_md15MotorController14trigger_updateEv>
		led_mgr::led_process();
 8003af2:	f7ff f997 	bl	8002e24 <_ZN8servo_md7led_mgr11led_processEv>
		if(error_request_flag){
 8003af6:	e7ed      	b.n	8003ad4 <wrapper_cpp+0x114>
 8003af8:	20000128 	.word	0x20000128
 8003afc:	20000170 	.word	0x20000170
 8003b00:	3fc90fdb 	.word	0x3fc90fdb
 8003b04:	20000200 	.word	0x20000200

08003b08 <_ZL21get_general_tim_clockv>:
		current_param.target = value;
		param.set_motor_param(current_param);
	}
}

unsigned long get_general_tim_clock(){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
	unsigned long result;
	result = HAL_RCC_GetPCLK1Freq();
 8003b0e:	f001 f84f 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8003b12:	4603      	mov	r3, r0
 8003b14:	607b      	str	r3, [r7, #4]
	if(((RCC->CFGR & RCC_CFGR_PPRE1)>>8) >= 0b100) result *= 2; //APB1プリスケーラーが/1以外の時はタイマクロックはPCLK1の2倍
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <_ZL21get_general_tim_clockv+0x34>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bf14      	ite	ne
 8003b22:	2301      	movne	r3, #1
 8003b24:	2300      	moveq	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <_ZL21get_general_tim_clockv+0x2a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	607b      	str	r3, [r7, #4]
	return result;
 8003b32:	687b      	ldr	r3, [r7, #4]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40021000 	.word	0x40021000

08003b40 <_ZL22get_advanced_tim_clockv>:

unsigned long get_advanced_tim_clock(){
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
	unsigned long result;
	result = HAL_RCC_GetPCLK2Freq();
 8003b46:	f001 f847 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	607b      	str	r3, [r7, #4]
	if(((RCC->CFGR & RCC_CFGR_PPRE2)>>11) >= 0b100) result *= 2; //APB2プリスケーラーが/1以外の時はタイマクロックはPCLK2の2倍
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <_ZL22get_advanced_tim_clockv+0x34>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bf14      	ite	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	2300      	moveq	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <_ZL22get_advanced_tim_clockv+0x2a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	607b      	str	r3, [r7, #4]
	return result;
 8003b6a:	687b      	ldr	r3, [r7, #4]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000

08003b78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b78:	480c      	ldr	r0, [pc, #48]	; (8003bac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b7a:	490d      	ldr	r1, [pc, #52]	; (8003bb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b7c:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b80:	e002      	b.n	8003b88 <LoopCopyDataInit>

08003b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b86:	3304      	adds	r3, #4

08003b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b8c:	d3f9      	bcc.n	8003b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b90:	4c0a      	ldr	r4, [pc, #40]	; (8003bbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b94:	e001      	b.n	8003b9a <LoopFillZerobss>

08003b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b98:	3204      	adds	r2, #4

08003b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b9c:	d3fb      	bcc.n	8003b96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b9e:	f7ff feb3 	bl	8003908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ba2:	f002 fb35 	bl	8006210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ba6:	f7ff fa5f 	bl	8003068 <main>
  bx lr
 8003baa:	4770      	bx	lr
  ldr r0, =_sdata
 8003bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bb0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003bb4:	080067ec 	.word	0x080067ec
  ldr r2, =_sbss
 8003bb8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003bbc:	20000220 	.word	0x20000220

08003bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bc0:	e7fe      	b.n	8003bc0 <ADC1_2_IRQHandler>
	...

08003bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bc8:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_Init+0x28>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a07      	ldr	r2, [pc, #28]	; (8003bec <HAL_Init+0x28>)
 8003bce:	f043 0310 	orr.w	r3, r3, #16
 8003bd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bd4:	2003      	movs	r0, #3
 8003bd6:	f000 fa1f 	bl	8004018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bda:	200f      	movs	r0, #15
 8003bdc:	f000 f808 	bl	8003bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003be0:	f7ff fce4 	bl	80035ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40022000 	.word	0x40022000

08003bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bf8:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <HAL_InitTick+0x54>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <HAL_InitTick+0x58>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	4619      	mov	r1, r3
 8003c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fa37 	bl	8004082 <HAL_SYSTICK_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e00e      	b.n	8003c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b0f      	cmp	r3, #15
 8003c22:	d80a      	bhi.n	8003c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c24:	2200      	movs	r2, #0
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2c:	f000 f9ff 	bl	800402e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c30:	4a06      	ldr	r2, [pc, #24]	; (8003c4c <HAL_InitTick+0x5c>)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e000      	b.n	8003c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000004 	.word	0x20000004
 8003c48:	2000000c 	.word	0x2000000c
 8003c4c:	20000008 	.word	0x20000008

08003c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_IncTick+0x1c>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_IncTick+0x20>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4413      	add	r3, r2
 8003c60:	4a03      	ldr	r2, [pc, #12]	; (8003c70 <HAL_IncTick+0x20>)
 8003c62:	6013      	str	r3, [r2, #0]
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr
 8003c6c:	2000000c 	.word	0x2000000c
 8003c70:	20000204 	.word	0x20000204

08003c74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return uwTick;
 8003c78:	4b02      	ldr	r3, [pc, #8]	; (8003c84 <HAL_GetTick+0x10>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	20000204 	.word	0x20000204

08003c88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0ed      	b.n	8003e76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff fcb2 	bl	8003610 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cbc:	f7ff ffda 	bl	8003c74 <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003cc2:	e012      	b.n	8003cea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003cc4:	f7ff ffd6 	bl	8003c74 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b0a      	cmp	r3, #10
 8003cd0:	d90b      	bls.n	8003cea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2205      	movs	r2, #5
 8003ce2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e0c5      	b.n	8003e76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0e5      	beq.n	8003cc4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0202 	bic.w	r2, r2, #2
 8003d06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d08:	f7ff ffb4 	bl	8003c74 <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d0e:	e012      	b.n	8003d36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d10:	f7ff ffb0 	bl	8003c74 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b0a      	cmp	r3, #10
 8003d1c:	d90b      	bls.n	8003d36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2205      	movs	r2, #5
 8003d2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e09f      	b.n	8003e76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e5      	bne.n	8003d10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	7e1b      	ldrb	r3, [r3, #24]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d108      	bne.n	8003d5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	e007      	b.n	8003d6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	7e5b      	ldrb	r3, [r3, #25]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d108      	bne.n	8003d88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e007      	b.n	8003d98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	7e9b      	ldrb	r3, [r3, #26]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d108      	bne.n	8003db2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0220 	orr.w	r2, r2, #32
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	e007      	b.n	8003dc2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0220 	bic.w	r2, r2, #32
 8003dc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	7edb      	ldrb	r3, [r3, #27]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d108      	bne.n	8003ddc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0210 	bic.w	r2, r2, #16
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e007      	b.n	8003dec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0210 	orr.w	r2, r2, #16
 8003dea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	7f1b      	ldrb	r3, [r3, #28]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d108      	bne.n	8003e06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0208 	orr.w	r2, r2, #8
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e007      	b.n	8003e16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0208 	bic.w	r2, r2, #8
 8003e14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	7f5b      	ldrb	r3, [r3, #29]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d108      	bne.n	8003e30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0204 	orr.w	r2, r2, #4
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e007      	b.n	8003e40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0204 	bic.w	r2, r2, #4
 8003e3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	ea42 0103 	orr.w	r1, r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	1e5a      	subs	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	60d3      	str	r3, [r2, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0a1b      	lsrs	r3, r3, #8
 8003ed2:	f003 0307 	and.w	r3, r3, #7
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db0b      	blt.n	8003f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	f003 021f 	and.w	r2, r3, #31
 8003efc:	4906      	ldr	r1, [pc, #24]	; (8003f18 <__NVIC_EnableIRQ+0x34>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2001      	movs	r0, #1
 8003f06:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	e000e100 	.word	0xe000e100

08003f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	6039      	str	r1, [r7, #0]
 8003f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	db0a      	blt.n	8003f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	490c      	ldr	r1, [pc, #48]	; (8003f68 <__NVIC_SetPriority+0x4c>)
 8003f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3a:	0112      	lsls	r2, r2, #4
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	440b      	add	r3, r1
 8003f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f44:	e00a      	b.n	8003f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	4908      	ldr	r1, [pc, #32]	; (8003f6c <__NVIC_SetPriority+0x50>)
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	3b04      	subs	r3, #4
 8003f54:	0112      	lsls	r2, r2, #4
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	440b      	add	r3, r1
 8003f5a:	761a      	strb	r2, [r3, #24]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	e000e100 	.word	0xe000e100
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b089      	sub	sp, #36	; 0x24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f1c3 0307 	rsb	r3, r3, #7
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	bf28      	it	cs
 8003f8e:	2304      	movcs	r3, #4
 8003f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d902      	bls.n	8003fa0 <NVIC_EncodePriority+0x30>
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3b03      	subs	r3, #3
 8003f9e:	e000      	b.n	8003fa2 <NVIC_EncodePriority+0x32>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	43d9      	mvns	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	4313      	orrs	r3, r2
         );
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3724      	adds	r7, #36	; 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr

08003fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe4:	d301      	bcc.n	8003fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e00f      	b.n	800400a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <SysTick_Config+0x40>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ff2:	210f      	movs	r1, #15
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	f7ff ff90 	bl	8003f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <SysTick_Config+0x40>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004002:	4b04      	ldr	r3, [pc, #16]	; (8004014 <SysTick_Config+0x40>)
 8004004:	2207      	movs	r2, #7
 8004006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	e000e010 	.word	0xe000e010

08004018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff2d 	bl	8003e80 <__NVIC_SetPriorityGrouping>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004040:	f7ff ff42 	bl	8003ec8 <__NVIC_GetPriorityGrouping>
 8004044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f7ff ff90 	bl	8003f70 <NVIC_EncodePriority>
 8004050:	4602      	mov	r2, r0
 8004052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ff5f 	bl	8003f1c <__NVIC_SetPriority>
}
 800405e:	bf00      	nop
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	4603      	mov	r3, r0
 800406e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff35 	bl	8003ee4 <__NVIC_EnableIRQ>
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff ffa2 	bl	8003fd4 <SysTick_Config>
 8004090:	4603      	mov	r3, r0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800409c:	b480      	push	{r7}
 800409e:	b08b      	sub	sp, #44	; 0x2c
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80040aa:	2300      	movs	r3, #0
 80040ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ae:	e161      	b.n	8004374 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80040b0:	2201      	movs	r2, #1
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	f040 8150 	bne.w	800436e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4a97      	ldr	r2, [pc, #604]	; (8004330 <HAL_GPIO_Init+0x294>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d05e      	beq.n	8004196 <HAL_GPIO_Init+0xfa>
 80040d8:	4a95      	ldr	r2, [pc, #596]	; (8004330 <HAL_GPIO_Init+0x294>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d875      	bhi.n	80041ca <HAL_GPIO_Init+0x12e>
 80040de:	4a95      	ldr	r2, [pc, #596]	; (8004334 <HAL_GPIO_Init+0x298>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d058      	beq.n	8004196 <HAL_GPIO_Init+0xfa>
 80040e4:	4a93      	ldr	r2, [pc, #588]	; (8004334 <HAL_GPIO_Init+0x298>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d86f      	bhi.n	80041ca <HAL_GPIO_Init+0x12e>
 80040ea:	4a93      	ldr	r2, [pc, #588]	; (8004338 <HAL_GPIO_Init+0x29c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d052      	beq.n	8004196 <HAL_GPIO_Init+0xfa>
 80040f0:	4a91      	ldr	r2, [pc, #580]	; (8004338 <HAL_GPIO_Init+0x29c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d869      	bhi.n	80041ca <HAL_GPIO_Init+0x12e>
 80040f6:	4a91      	ldr	r2, [pc, #580]	; (800433c <HAL_GPIO_Init+0x2a0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d04c      	beq.n	8004196 <HAL_GPIO_Init+0xfa>
 80040fc:	4a8f      	ldr	r2, [pc, #572]	; (800433c <HAL_GPIO_Init+0x2a0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d863      	bhi.n	80041ca <HAL_GPIO_Init+0x12e>
 8004102:	4a8f      	ldr	r2, [pc, #572]	; (8004340 <HAL_GPIO_Init+0x2a4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d046      	beq.n	8004196 <HAL_GPIO_Init+0xfa>
 8004108:	4a8d      	ldr	r2, [pc, #564]	; (8004340 <HAL_GPIO_Init+0x2a4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d85d      	bhi.n	80041ca <HAL_GPIO_Init+0x12e>
 800410e:	2b12      	cmp	r3, #18
 8004110:	d82a      	bhi.n	8004168 <HAL_GPIO_Init+0xcc>
 8004112:	2b12      	cmp	r3, #18
 8004114:	d859      	bhi.n	80041ca <HAL_GPIO_Init+0x12e>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <HAL_GPIO_Init+0x80>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	08004197 	.word	0x08004197
 8004120:	08004171 	.word	0x08004171
 8004124:	08004183 	.word	0x08004183
 8004128:	080041c5 	.word	0x080041c5
 800412c:	080041cb 	.word	0x080041cb
 8004130:	080041cb 	.word	0x080041cb
 8004134:	080041cb 	.word	0x080041cb
 8004138:	080041cb 	.word	0x080041cb
 800413c:	080041cb 	.word	0x080041cb
 8004140:	080041cb 	.word	0x080041cb
 8004144:	080041cb 	.word	0x080041cb
 8004148:	080041cb 	.word	0x080041cb
 800414c:	080041cb 	.word	0x080041cb
 8004150:	080041cb 	.word	0x080041cb
 8004154:	080041cb 	.word	0x080041cb
 8004158:	080041cb 	.word	0x080041cb
 800415c:	080041cb 	.word	0x080041cb
 8004160:	08004179 	.word	0x08004179
 8004164:	0800418d 	.word	0x0800418d
 8004168:	4a76      	ldr	r2, [pc, #472]	; (8004344 <HAL_GPIO_Init+0x2a8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800416e:	e02c      	b.n	80041ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	623b      	str	r3, [r7, #32]
          break;
 8004176:	e029      	b.n	80041cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	3304      	adds	r3, #4
 800417e:	623b      	str	r3, [r7, #32]
          break;
 8004180:	e024      	b.n	80041cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	3308      	adds	r3, #8
 8004188:	623b      	str	r3, [r7, #32]
          break;
 800418a:	e01f      	b.n	80041cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	330c      	adds	r3, #12
 8004192:	623b      	str	r3, [r7, #32]
          break;
 8004194:	e01a      	b.n	80041cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d102      	bne.n	80041a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800419e:	2304      	movs	r3, #4
 80041a0:	623b      	str	r3, [r7, #32]
          break;
 80041a2:	e013      	b.n	80041cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d105      	bne.n	80041b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041ac:	2308      	movs	r3, #8
 80041ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	611a      	str	r2, [r3, #16]
          break;
 80041b6:	e009      	b.n	80041cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041b8:	2308      	movs	r3, #8
 80041ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	615a      	str	r2, [r3, #20]
          break;
 80041c2:	e003      	b.n	80041cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80041c4:	2300      	movs	r3, #0
 80041c6:	623b      	str	r3, [r7, #32]
          break;
 80041c8:	e000      	b.n	80041cc <HAL_GPIO_Init+0x130>
          break;
 80041ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2bff      	cmp	r3, #255	; 0xff
 80041d0:	d801      	bhi.n	80041d6 <HAL_GPIO_Init+0x13a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	e001      	b.n	80041da <HAL_GPIO_Init+0x13e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3304      	adds	r3, #4
 80041da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2bff      	cmp	r3, #255	; 0xff
 80041e0:	d802      	bhi.n	80041e8 <HAL_GPIO_Init+0x14c>
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	e002      	b.n	80041ee <HAL_GPIO_Init+0x152>
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	3b08      	subs	r3, #8
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	210f      	movs	r1, #15
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	401a      	ands	r2, r3
 8004200:	6a39      	ldr	r1, [r7, #32]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	fa01 f303 	lsl.w	r3, r1, r3
 8004208:	431a      	orrs	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 80a9 	beq.w	800436e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800421c:	4b4a      	ldr	r3, [pc, #296]	; (8004348 <HAL_GPIO_Init+0x2ac>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	4a49      	ldr	r2, [pc, #292]	; (8004348 <HAL_GPIO_Init+0x2ac>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6193      	str	r3, [r2, #24]
 8004228:	4b47      	ldr	r3, [pc, #284]	; (8004348 <HAL_GPIO_Init+0x2ac>)
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004234:	4a45      	ldr	r2, [pc, #276]	; (800434c <HAL_GPIO_Init+0x2b0>)
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	3302      	adds	r3, #2
 800423c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004240:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	220f      	movs	r2, #15
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4013      	ands	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a3d      	ldr	r2, [pc, #244]	; (8004350 <HAL_GPIO_Init+0x2b4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00d      	beq.n	800427c <HAL_GPIO_Init+0x1e0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a3c      	ldr	r2, [pc, #240]	; (8004354 <HAL_GPIO_Init+0x2b8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d007      	beq.n	8004278 <HAL_GPIO_Init+0x1dc>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a3b      	ldr	r2, [pc, #236]	; (8004358 <HAL_GPIO_Init+0x2bc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d101      	bne.n	8004274 <HAL_GPIO_Init+0x1d8>
 8004270:	2302      	movs	r3, #2
 8004272:	e004      	b.n	800427e <HAL_GPIO_Init+0x1e2>
 8004274:	2303      	movs	r3, #3
 8004276:	e002      	b.n	800427e <HAL_GPIO_Init+0x1e2>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <HAL_GPIO_Init+0x1e2>
 800427c:	2300      	movs	r3, #0
 800427e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004280:	f002 0203 	and.w	r2, r2, #3
 8004284:	0092      	lsls	r2, r2, #2
 8004286:	4093      	lsls	r3, r2
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800428e:	492f      	ldr	r1, [pc, #188]	; (800434c <HAL_GPIO_Init+0x2b0>)
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	089b      	lsrs	r3, r3, #2
 8004294:	3302      	adds	r3, #2
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d006      	beq.n	80042b6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80042a8:	4b2c      	ldr	r3, [pc, #176]	; (800435c <HAL_GPIO_Init+0x2c0>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	492b      	ldr	r1, [pc, #172]	; (800435c <HAL_GPIO_Init+0x2c0>)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	600b      	str	r3, [r1, #0]
 80042b4:	e006      	b.n	80042c4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80042b6:	4b29      	ldr	r3, [pc, #164]	; (800435c <HAL_GPIO_Init+0x2c0>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	43db      	mvns	r3, r3
 80042be:	4927      	ldr	r1, [pc, #156]	; (800435c <HAL_GPIO_Init+0x2c0>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d006      	beq.n	80042de <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80042d0:	4b22      	ldr	r3, [pc, #136]	; (800435c <HAL_GPIO_Init+0x2c0>)
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	4921      	ldr	r1, [pc, #132]	; (800435c <HAL_GPIO_Init+0x2c0>)
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]
 80042dc:	e006      	b.n	80042ec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80042de:	4b1f      	ldr	r3, [pc, #124]	; (800435c <HAL_GPIO_Init+0x2c0>)
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	491d      	ldr	r1, [pc, #116]	; (800435c <HAL_GPIO_Init+0x2c0>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d006      	beq.n	8004306 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80042f8:	4b18      	ldr	r3, [pc, #96]	; (800435c <HAL_GPIO_Init+0x2c0>)
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	4917      	ldr	r1, [pc, #92]	; (800435c <HAL_GPIO_Init+0x2c0>)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	4313      	orrs	r3, r2
 8004302:	608b      	str	r3, [r1, #8]
 8004304:	e006      	b.n	8004314 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004306:	4b15      	ldr	r3, [pc, #84]	; (800435c <HAL_GPIO_Init+0x2c0>)
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	43db      	mvns	r3, r3
 800430e:	4913      	ldr	r1, [pc, #76]	; (800435c <HAL_GPIO_Init+0x2c0>)
 8004310:	4013      	ands	r3, r2
 8004312:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01f      	beq.n	8004360 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004320:	4b0e      	ldr	r3, [pc, #56]	; (800435c <HAL_GPIO_Init+0x2c0>)
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	490d      	ldr	r1, [pc, #52]	; (800435c <HAL_GPIO_Init+0x2c0>)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	4313      	orrs	r3, r2
 800432a:	60cb      	str	r3, [r1, #12]
 800432c:	e01f      	b.n	800436e <HAL_GPIO_Init+0x2d2>
 800432e:	bf00      	nop
 8004330:	10320000 	.word	0x10320000
 8004334:	10310000 	.word	0x10310000
 8004338:	10220000 	.word	0x10220000
 800433c:	10210000 	.word	0x10210000
 8004340:	10120000 	.word	0x10120000
 8004344:	10110000 	.word	0x10110000
 8004348:	40021000 	.word	0x40021000
 800434c:	40010000 	.word	0x40010000
 8004350:	40010800 	.word	0x40010800
 8004354:	40010c00 	.word	0x40010c00
 8004358:	40011000 	.word	0x40011000
 800435c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_GPIO_Init+0x2f4>)
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	43db      	mvns	r3, r3
 8004368:	4909      	ldr	r1, [pc, #36]	; (8004390 <HAL_GPIO_Init+0x2f4>)
 800436a:	4013      	ands	r3, r2
 800436c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	3301      	adds	r3, #1
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	fa22 f303 	lsr.w	r3, r2, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	f47f ae96 	bne.w	80040b0 <HAL_GPIO_Init+0x14>
  }
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	372c      	adds	r7, #44	; 0x2c
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr
 8004390:	40010400 	.word	0x40010400

08004394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	807b      	strh	r3, [r7, #2]
 80043a0:	4613      	mov	r3, r2
 80043a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043a4:	787b      	ldrb	r3, [r7, #1]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043b0:	e003      	b.n	80043ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043b2:	887b      	ldrh	r3, [r7, #2]
 80043b4:	041a      	lsls	r2, r3, #16
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	611a      	str	r2, [r3, #16]
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr

080043c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043ce:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d006      	beq.n	80043e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043da:	4a05      	ldr	r2, [pc, #20]	; (80043f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f806 	bl	80043f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40010400 	.word	0x40010400

080043f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e272      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8087 	beq.w	8004536 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004428:	4b92      	ldr	r3, [pc, #584]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b04      	cmp	r3, #4
 8004432:	d00c      	beq.n	800444e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004434:	4b8f      	ldr	r3, [pc, #572]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d112      	bne.n	8004466 <HAL_RCC_OscConfig+0x5e>
 8004440:	4b8c      	ldr	r3, [pc, #560]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444c:	d10b      	bne.n	8004466 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444e:	4b89      	ldr	r3, [pc, #548]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d06c      	beq.n	8004534 <HAL_RCC_OscConfig+0x12c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d168      	bne.n	8004534 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e24c      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x76>
 8004470:	4b80      	ldr	r3, [pc, #512]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a7f      	ldr	r2, [pc, #508]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e02e      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x98>
 8004486:	4b7b      	ldr	r3, [pc, #492]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a7a      	ldr	r2, [pc, #488]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 800448c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b78      	ldr	r3, [pc, #480]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a77      	ldr	r2, [pc, #476]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0xbc>
 80044aa:	4b72      	ldr	r3, [pc, #456]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a71      	ldr	r2, [pc, #452]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6e      	ldr	r2, [pc, #440]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 80044c4:	4b6b      	ldr	r3, [pc, #428]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6a      	ldr	r2, [pc, #424]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b68      	ldr	r3, [pc, #416]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a67      	ldr	r2, [pc, #412]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7ff fbc6 	bl	8003c74 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ec:	f7ff fbc2 	bl	8003c74 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e200      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b5d      	ldr	r3, [pc, #372]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xe4>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7ff fbb2 	bl	8003c74 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004514:	f7ff fbae 	bl	8003c74 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1ec      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b53      	ldr	r3, [pc, #332]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x10c>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d063      	beq.n	800460a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004542:	4b4c      	ldr	r3, [pc, #304]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800454e:	4b49      	ldr	r3, [pc, #292]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x18c>
 800455a:	4b46      	ldr	r3, [pc, #280]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b43      	ldr	r3, [pc, #268]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x176>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1c0      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b3d      	ldr	r3, [pc, #244]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4939      	ldr	r1, [pc, #228]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e03a      	b.n	800460a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b36      	ldr	r3, [pc, #216]	; (8004678 <HAL_RCC_OscConfig+0x270>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7ff fb67 	bl	8003c74 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045aa:	f7ff fb63 	bl	8003c74 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e1a1      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4927      	ldr	r1, [pc, #156]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	e015      	b.n	800460a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045de:	4b26      	ldr	r3, [pc, #152]	; (8004678 <HAL_RCC_OscConfig+0x270>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7ff fb46 	bl	8003c74 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ec:	f7ff fb42 	bl	8003c74 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e180      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d03a      	beq.n	800468c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d019      	beq.n	8004652 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461e:	4b17      	ldr	r3, [pc, #92]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004624:	f7ff fb26 	bl	8003c74 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462c:	f7ff fb22 	bl	8003c74 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e160      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800464a:	2001      	movs	r0, #1
 800464c:	f000 fad8 	bl	8004c00 <RCC_Delay>
 8004650:	e01c      	b.n	800468c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004652:	4b0a      	ldr	r3, [pc, #40]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004658:	f7ff fb0c 	bl	8003c74 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465e:	e00f      	b.n	8004680 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004660:	f7ff fb08 	bl	8003c74 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d908      	bls.n	8004680 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e146      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	42420000 	.word	0x42420000
 800467c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004680:	4b92      	ldr	r3, [pc, #584]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e9      	bne.n	8004660 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80a6 	beq.w	80047e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469a:	2300      	movs	r3, #0
 800469c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800469e:	4b8b      	ldr	r3, [pc, #556]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10d      	bne.n	80046c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046aa:	4b88      	ldr	r3, [pc, #544]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	4a87      	ldr	r2, [pc, #540]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b4:	61d3      	str	r3, [r2, #28]
 80046b6:	4b85      	ldr	r3, [pc, #532]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046be:	60bb      	str	r3, [r7, #8]
 80046c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c2:	2301      	movs	r3, #1
 80046c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c6:	4b82      	ldr	r3, [pc, #520]	; (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d118      	bne.n	8004704 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046d2:	4b7f      	ldr	r3, [pc, #508]	; (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a7e      	ldr	r2, [pc, #504]	; (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046de:	f7ff fac9 	bl	8003c74 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e6:	f7ff fac5 	bl	8003c74 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b64      	cmp	r3, #100	; 0x64
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e103      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f8:	4b75      	ldr	r3, [pc, #468]	; (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d106      	bne.n	800471a <HAL_RCC_OscConfig+0x312>
 800470c:	4b6f      	ldr	r3, [pc, #444]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	4a6e      	ldr	r2, [pc, #440]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	6213      	str	r3, [r2, #32]
 8004718:	e02d      	b.n	8004776 <HAL_RCC_OscConfig+0x36e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x334>
 8004722:	4b6a      	ldr	r3, [pc, #424]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	4a69      	ldr	r2, [pc, #420]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	6213      	str	r3, [r2, #32]
 800472e:	4b67      	ldr	r3, [pc, #412]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	4a66      	ldr	r2, [pc, #408]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004734:	f023 0304 	bic.w	r3, r3, #4
 8004738:	6213      	str	r3, [r2, #32]
 800473a:	e01c      	b.n	8004776 <HAL_RCC_OscConfig+0x36e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b05      	cmp	r3, #5
 8004742:	d10c      	bne.n	800475e <HAL_RCC_OscConfig+0x356>
 8004744:	4b61      	ldr	r3, [pc, #388]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4a60      	ldr	r2, [pc, #384]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	6213      	str	r3, [r2, #32]
 8004750:	4b5e      	ldr	r3, [pc, #376]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	4a5d      	ldr	r2, [pc, #372]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6213      	str	r3, [r2, #32]
 800475c:	e00b      	b.n	8004776 <HAL_RCC_OscConfig+0x36e>
 800475e:	4b5b      	ldr	r3, [pc, #364]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	4a5a      	ldr	r2, [pc, #360]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	6213      	str	r3, [r2, #32]
 800476a:	4b58      	ldr	r3, [pc, #352]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	4a57      	ldr	r2, [pc, #348]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004770:	f023 0304 	bic.w	r3, r3, #4
 8004774:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d015      	beq.n	80047aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477e:	f7ff fa79 	bl	8003c74 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	e00a      	b.n	800479c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7ff fa75 	bl	8003c74 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e0b1      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479c:	4b4b      	ldr	r3, [pc, #300]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ee      	beq.n	8004786 <HAL_RCC_OscConfig+0x37e>
 80047a8:	e014      	b.n	80047d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047aa:	f7ff fa63 	bl	8003c74 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b0:	e00a      	b.n	80047c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b2:	f7ff fa5f 	bl	8003c74 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e09b      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c8:	4b40      	ldr	r3, [pc, #256]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ee      	bne.n	80047b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d105      	bne.n	80047e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047da:	4b3c      	ldr	r3, [pc, #240]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	4a3b      	ldr	r2, [pc, #236]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8087 	beq.w	80048fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f0:	4b36      	ldr	r3, [pc, #216]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d061      	beq.n	80048c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d146      	bne.n	8004892 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004804:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <HAL_RCC_OscConfig+0x4cc>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480a:	f7ff fa33 	bl	8003c74 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004812:	f7ff fa2f 	bl	8003c74 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e06d      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004824:	4b29      	ldr	r3, [pc, #164]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d108      	bne.n	800484c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800483a:	4b24      	ldr	r3, [pc, #144]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	4921      	ldr	r1, [pc, #132]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800484c:	4b1f      	ldr	r3, [pc, #124]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a19      	ldr	r1, [r3, #32]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	430b      	orrs	r3, r1
 800485e:	491b      	ldr	r1, [pc, #108]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004864:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x4cc>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7ff fa03 	bl	8003c74 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7ff f9ff 	bl	8003c74 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e03d      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004884:	4b11      	ldr	r3, [pc, #68]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x46a>
 8004890:	e035      	b.n	80048fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <HAL_RCC_OscConfig+0x4cc>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7ff f9ec 	bl	8003c74 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7ff f9e8 	bl	8003c74 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e026      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x498>
 80048be:	e01e      	b.n	80048fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d107      	bne.n	80048d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e019      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40007000 	.word	0x40007000
 80048d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_RCC_OscConfig+0x500>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d106      	bne.n	80048fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000

0800490c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0d0      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004920:	4b6a      	ldr	r3, [pc, #424]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d910      	bls.n	8004950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b67      	ldr	r3, [pc, #412]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 0207 	bic.w	r2, r3, #7
 8004936:	4965      	ldr	r1, [pc, #404]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b63      	ldr	r3, [pc, #396]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0b8      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d020      	beq.n	800499e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004968:	4b59      	ldr	r3, [pc, #356]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4a58      	ldr	r2, [pc, #352]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800496e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004972:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004980:	4b53      	ldr	r3, [pc, #332]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4a52      	ldr	r2, [pc, #328]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004986:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800498a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800498c:	4b50      	ldr	r3, [pc, #320]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	494d      	ldr	r1, [pc, #308]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d040      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b2:	4b47      	ldr	r3, [pc, #284]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d115      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e07f      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ca:	4b41      	ldr	r3, [pc, #260]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e073      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049da:	4b3d      	ldr	r3, [pc, #244]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e06b      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ea:	4b39      	ldr	r3, [pc, #228]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4936      	ldr	r1, [pc, #216]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049fc:	f7ff f93a 	bl	8003c74 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a04:	f7ff f936 	bl	8003c74 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e053      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 020c 	and.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1eb      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d210      	bcs.n	8004a5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b24      	ldr	r3, [pc, #144]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 0207 	bic.w	r2, r3, #7
 8004a42:	4922      	ldr	r1, [pc, #136]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b20      	ldr	r3, [pc, #128]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e032      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a68:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4916      	ldr	r1, [pc, #88]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a86:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	490e      	ldr	r1, [pc, #56]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a9a:	f000 f821 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	490a      	ldr	r1, [pc, #40]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8004aac:	5ccb      	ldrb	r3, [r1, r3]
 8004aae:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab2:	4a09      	ldr	r2, [pc, #36]	; (8004ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8004ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <HAL_RCC_ClockConfig+0x1d0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff f898 	bl	8003bf0 <HAL_InitTick>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40022000 	.word	0x40022000
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	080063fc 	.word	0x080063fc
 8004ad8:	20000004 	.word	0x20000004
 8004adc:	20000008 	.word	0x20000008

08004ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae0:	b490      	push	{r4, r7}
 8004ae2:	b08a      	sub	sp, #40	; 0x28
 8004ae4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <HAL_RCC_GetSysClockFreq+0xac>)
 8004ae8:	1d3c      	adds	r4, r7, #4
 8004aea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004af0:	f240 2301 	movw	r3, #513	; 0x201
 8004af4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	2300      	movs	r3, #0
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	2300      	movs	r3, #0
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b0a:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d002      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x40>
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d003      	beq.n	8004b26 <HAL_RCC_GetSysClockFreq+0x46>
 8004b1e:	e02b      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b20:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b22:	623b      	str	r3, [r7, #32]
      break;
 8004b24:	e02b      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	0c9b      	lsrs	r3, r3, #18
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	3328      	adds	r3, #40	; 0x28
 8004b30:	443b      	add	r3, r7
 8004b32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d012      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b42:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	0c5b      	lsrs	r3, r3, #17
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	3328      	adds	r3, #40	; 0x28
 8004b4e:	443b      	add	r3, r7
 8004b50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	4a0e      	ldr	r2, [pc, #56]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b5a:	fb03 f202 	mul.w	r2, r3, r2
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
 8004b66:	e004      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	4a0b      	ldr	r2, [pc, #44]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b6c:	fb02 f303 	mul.w	r3, r2, r3
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	623b      	str	r3, [r7, #32]
      break;
 8004b76:	e002      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b7a:	623b      	str	r3, [r7, #32]
      break;
 8004b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3728      	adds	r7, #40	; 0x28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc90      	pop	{r4, r7}
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	080063ec 	.word	0x080063ec
 8004b90:	40021000 	.word	0x40021000
 8004b94:	007a1200 	.word	0x007a1200
 8004b98:	003d0900 	.word	0x003d0900

08004b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba0:	4b02      	ldr	r3, [pc, #8]	; (8004bac <HAL_RCC_GetHCLKFreq+0x10>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	20000004 	.word	0x20000004

08004bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bb4:	f7ff fff2 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	0a1b      	lsrs	r3, r3, #8
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4903      	ldr	r1, [pc, #12]	; (8004bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	0800640c 	.word	0x0800640c

08004bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bdc:	f7ff ffde 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	0adb      	lsrs	r3, r3, #11
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4903      	ldr	r1, [pc, #12]	; (8004bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	0800640c 	.word	0x0800640c

08004c00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <RCC_Delay+0x34>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <RCC_Delay+0x38>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	0a5b      	lsrs	r3, r3, #9
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c1c:	bf00      	nop
  }
  while (Delay --);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	60fa      	str	r2, [r7, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f9      	bne.n	8004c1c <RCC_Delay+0x1c>
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr
 8004c34:	20000004 	.word	0x20000004
 8004c38:	10624dd3 	.word	0x10624dd3

08004c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e041      	b.n	8004cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fe fd34 	bl	80036d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f000 faa4 	bl	80051c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e041      	b.n	8004d70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f839 	bl	8004d78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3304      	adds	r3, #4
 8004d16:	4619      	mov	r1, r3
 8004d18:	4610      	mov	r0, r2
 8004d1a:	f000 fa55 	bl	80051c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr
	...

08004d8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <HAL_TIM_PWM_Start+0x24>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	bf14      	ite	ne
 8004da8:	2301      	movne	r3, #1
 8004daa:	2300      	moveq	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	e022      	b.n	8004df6 <HAL_TIM_PWM_Start+0x6a>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d109      	bne.n	8004dca <HAL_TIM_PWM_Start+0x3e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	bf14      	ite	ne
 8004dc2:	2301      	movne	r3, #1
 8004dc4:	2300      	moveq	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	e015      	b.n	8004df6 <HAL_TIM_PWM_Start+0x6a>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d109      	bne.n	8004de4 <HAL_TIM_PWM_Start+0x58>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	bf14      	ite	ne
 8004ddc:	2301      	movne	r3, #1
 8004dde:	2300      	moveq	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	e008      	b.n	8004df6 <HAL_TIM_PWM_Start+0x6a>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	bf14      	ite	ne
 8004df0:	2301      	movne	r3, #1
 8004df2:	2300      	moveq	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e059      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <HAL_TIM_PWM_Start+0x82>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e0c:	e013      	b.n	8004e36 <HAL_TIM_PWM_Start+0xaa>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d104      	bne.n	8004e1e <HAL_TIM_PWM_Start+0x92>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e1c:	e00b      	b.n	8004e36 <HAL_TIM_PWM_Start+0xaa>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d104      	bne.n	8004e2e <HAL_TIM_PWM_Start+0xa2>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e2c:	e003      	b.n	8004e36 <HAL_TIM_PWM_Start+0xaa>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2202      	movs	r2, #2
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	6839      	ldr	r1, [r7, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fc38 	bl	80056b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <HAL_TIM_PWM_Start+0x130>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d107      	bne.n	8004e5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <HAL_TIM_PWM_Start+0x130>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_TIM_PWM_Start+0xf0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_PWM_Start+0xf0>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a12      	ldr	r2, [pc, #72]	; (8004ec0 <HAL_TIM_PWM_Start+0x134>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d111      	bne.n	8004ea0 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b06      	cmp	r3, #6
 8004e8c:	d010      	beq.n	8004eb0 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9e:	e007      	b.n	8004eb0 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	40000400 	.word	0x40000400

08004ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e0ac      	b.n	8005038 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b0c      	cmp	r3, #12
 8004eea:	f200 809f 	bhi.w	800502c <HAL_TIM_PWM_ConfigChannel+0x168>
 8004eee:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f29 	.word	0x08004f29
 8004ef8:	0800502d 	.word	0x0800502d
 8004efc:	0800502d 	.word	0x0800502d
 8004f00:	0800502d 	.word	0x0800502d
 8004f04:	08004f69 	.word	0x08004f69
 8004f08:	0800502d 	.word	0x0800502d
 8004f0c:	0800502d 	.word	0x0800502d
 8004f10:	0800502d 	.word	0x0800502d
 8004f14:	08004fab 	.word	0x08004fab
 8004f18:	0800502d 	.word	0x0800502d
 8004f1c:	0800502d 	.word	0x0800502d
 8004f20:	0800502d 	.word	0x0800502d
 8004f24:	08004feb 	.word	0x08004feb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f9a2 	bl	8005278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0208 	orr.w	r2, r2, #8
 8004f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0204 	bic.w	r2, r2, #4
 8004f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6999      	ldr	r1, [r3, #24]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	691a      	ldr	r2, [r3, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	619a      	str	r2, [r3, #24]
      break;
 8004f66:	e062      	b.n	800502e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f9e8 	bl	8005344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6999      	ldr	r1, [r3, #24]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	021a      	lsls	r2, r3, #8
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	619a      	str	r2, [r3, #24]
      break;
 8004fa8:	e041      	b.n	800502e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fa31 	bl	8005418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0208 	orr.w	r2, r2, #8
 8004fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0204 	bic.w	r2, r2, #4
 8004fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69d9      	ldr	r1, [r3, #28]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	61da      	str	r2, [r3, #28]
      break;
 8004fe8:	e021      	b.n	800502e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fa7b 	bl	80054ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69d9      	ldr	r1, [r3, #28]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	021a      	lsls	r2, r3, #8
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	61da      	str	r2, [r3, #28]
      break;
 800502a:	e000      	b.n	800502e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800502c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_TIM_ConfigClockSource+0x18>
 8005054:	2302      	movs	r3, #2
 8005056:	e0b3      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x180>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005076:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800507e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005090:	d03e      	beq.n	8005110 <HAL_TIM_ConfigClockSource+0xd0>
 8005092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005096:	f200 8087 	bhi.w	80051a8 <HAL_TIM_ConfigClockSource+0x168>
 800509a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509e:	f000 8085 	beq.w	80051ac <HAL_TIM_ConfigClockSource+0x16c>
 80050a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a6:	d87f      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x168>
 80050a8:	2b70      	cmp	r3, #112	; 0x70
 80050aa:	d01a      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0xa2>
 80050ac:	2b70      	cmp	r3, #112	; 0x70
 80050ae:	d87b      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x168>
 80050b0:	2b60      	cmp	r3, #96	; 0x60
 80050b2:	d050      	beq.n	8005156 <HAL_TIM_ConfigClockSource+0x116>
 80050b4:	2b60      	cmp	r3, #96	; 0x60
 80050b6:	d877      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x168>
 80050b8:	2b50      	cmp	r3, #80	; 0x50
 80050ba:	d03c      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0xf6>
 80050bc:	2b50      	cmp	r3, #80	; 0x50
 80050be:	d873      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x168>
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d058      	beq.n	8005176 <HAL_TIM_ConfigClockSource+0x136>
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d86f      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x168>
 80050c8:	2b30      	cmp	r3, #48	; 0x30
 80050ca:	d064      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x156>
 80050cc:	2b30      	cmp	r3, #48	; 0x30
 80050ce:	d86b      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x168>
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d060      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x156>
 80050d4:	2b20      	cmp	r3, #32
 80050d6:	d867      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x168>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d05c      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x156>
 80050dc:	2b10      	cmp	r3, #16
 80050de:	d05a      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80050e0:	e062      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	6899      	ldr	r1, [r3, #8]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f000 fac0 	bl	8005676 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005104:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	609a      	str	r2, [r3, #8]
      break;
 800510e:	e04e      	b.n	80051ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	6899      	ldr	r1, [r3, #8]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f000 faa9 	bl	8005676 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005132:	609a      	str	r2, [r3, #8]
      break;
 8005134:	e03b      	b.n	80051ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6859      	ldr	r1, [r3, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	461a      	mov	r2, r3
 8005144:	f000 fa20 	bl	8005588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2150      	movs	r1, #80	; 0x50
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fa77 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8005154:	e02b      	b.n	80051ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6859      	ldr	r1, [r3, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	461a      	mov	r2, r3
 8005164:	f000 fa3e 	bl	80055e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2160      	movs	r1, #96	; 0x60
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fa67 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8005174:	e01b      	b.n	80051ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	6859      	ldr	r1, [r3, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	461a      	mov	r2, r3
 8005184:	f000 fa00 	bl	8005588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2140      	movs	r1, #64	; 0x40
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fa57 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8005194:	e00b      	b.n	80051ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f000 fa4e 	bl	8005642 <TIM_ITRx_SetConfig>
        break;
 80051a6:	e002      	b.n	80051ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051a8:	bf00      	nop
 80051aa:	e000      	b.n	80051ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a25      	ldr	r2, [pc, #148]	; (8005270 <TIM_Base_SetConfig+0xa8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <TIM_Base_SetConfig+0x28>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e6:	d003      	beq.n	80051f0 <TIM_Base_SetConfig+0x28>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a22      	ldr	r2, [pc, #136]	; (8005274 <TIM_Base_SetConfig+0xac>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d108      	bne.n	8005202 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a1a      	ldr	r2, [pc, #104]	; (8005270 <TIM_Base_SetConfig+0xa8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d007      	beq.n	800521a <TIM_Base_SetConfig+0x52>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005210:	d003      	beq.n	800521a <TIM_Base_SetConfig+0x52>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a17      	ldr	r2, [pc, #92]	; (8005274 <TIM_Base_SetConfig+0xac>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d108      	bne.n	800522c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a07      	ldr	r2, [pc, #28]	; (8005270 <TIM_Base_SetConfig+0xa8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d103      	bne.n	8005260 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	615a      	str	r2, [r3, #20]
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40000400 	.word	0x40000400

08005278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f023 0201 	bic.w	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f023 0302 	bic.w	r3, r3, #2
 80052c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a1c      	ldr	r2, [pc, #112]	; (8005340 <TIM_OC1_SetConfig+0xc8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d10c      	bne.n	80052ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 0308 	bic.w	r3, r3, #8
 80052da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f023 0304 	bic.w	r3, r3, #4
 80052ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a13      	ldr	r2, [pc, #76]	; (8005340 <TIM_OC1_SetConfig+0xc8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d111      	bne.n	800531a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	621a      	str	r2, [r3, #32]
}
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40012c00 	.word	0x40012c00

08005344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f023 0210 	bic.w	r2, r3, #16
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	021b      	lsls	r3, r3, #8
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 0320 	bic.w	r3, r3, #32
 800538e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <TIM_OC2_SetConfig+0xd0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10d      	bne.n	80053c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a14      	ldr	r2, [pc, #80]	; (8005414 <TIM_OC2_SetConfig+0xd0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d113      	bne.n	80053f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	621a      	str	r2, [r3, #32]
}
 800540a:	bf00      	nop
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr
 8005414:	40012c00 	.word	0x40012c00

08005418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1d      	ldr	r2, [pc, #116]	; (80054e8 <TIM_OC3_SetConfig+0xd0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d10d      	bne.n	8005492 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800547c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a14      	ldr	r2, [pc, #80]	; (80054e8 <TIM_OC3_SetConfig+0xd0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d113      	bne.n	80054c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	621a      	str	r2, [r3, #32]
}
 80054dc:	bf00      	nop
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40012c00 	.word	0x40012c00

080054ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	021b      	lsls	r3, r3, #8
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	031b      	lsls	r3, r3, #12
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a0f      	ldr	r2, [pc, #60]	; (8005584 <TIM_OC4_SetConfig+0x98>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d109      	bne.n	8005560 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	019b      	lsls	r3, r3, #6
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr
 8005584:	40012c00 	.word	0x40012c00

08005588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f023 0201 	bic.w	r2, r3, #1
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f023 030a 	bic.w	r3, r3, #10
 80055c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f023 0210 	bic.w	r2, r3, #16
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800560e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	031b      	lsls	r3, r3, #12
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005620:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	621a      	str	r2, [r3, #32]
}
 8005638:	bf00      	nop
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr

08005642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	f043 0307 	orr.w	r3, r3, #7
 8005664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	609a      	str	r2, [r3, #8]
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr

08005676 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005676:	b480      	push	{r7}
 8005678:	b087      	sub	sp, #28
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005690:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	021a      	lsls	r2, r3, #8
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	431a      	orrs	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4313      	orrs	r3, r2
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	609a      	str	r2, [r3, #8]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr

080056b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f003 031f 	and.w	r3, r3, #31
 80056c6:	2201      	movs	r2, #1
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1a      	ldr	r2, [r3, #32]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	43db      	mvns	r3, r3
 80056d6:	401a      	ands	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a1a      	ldr	r2, [r3, #32]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 031f 	and.w	r3, r3, #31
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ec:	431a      	orrs	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	621a      	str	r2, [r3, #32]
}
 80056f2:	bf00      	nop
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr

080056fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005710:	2302      	movs	r3, #2
 8005712:	e041      	b.n	8005798 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a14      	ldr	r2, [pc, #80]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d009      	beq.n	800576c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005760:	d004      	beq.n	800576c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a10      	ldr	r2, [pc, #64]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d10c      	bne.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005772:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	4313      	orrs	r3, r2
 800577c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40012c00 	.word	0x40012c00
 80057a8:	40000400 	.word	0x40000400

080057ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e03d      	b.n	8005844 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <_ZdlPv>:
 800584e:	f000 bd03 	b.w	8006258 <free>

08005852 <_ZdlPvj>:
 8005852:	f7ff bffc 	b.w	800584e <_ZdlPv>

08005856 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8005856:	7803      	ldrb	r3, [r0, #0]
 8005858:	2b47      	cmp	r3, #71	; 0x47
 800585a:	d117      	bne.n	800588c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800585c:	7843      	ldrb	r3, [r0, #1]
 800585e:	2b4e      	cmp	r3, #78	; 0x4e
 8005860:	d114      	bne.n	800588c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005862:	7883      	ldrb	r3, [r0, #2]
 8005864:	2b55      	cmp	r3, #85	; 0x55
 8005866:	d111      	bne.n	800588c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005868:	78c3      	ldrb	r3, [r0, #3]
 800586a:	2b43      	cmp	r3, #67	; 0x43
 800586c:	d10e      	bne.n	800588c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800586e:	7903      	ldrb	r3, [r0, #4]
 8005870:	2b43      	cmp	r3, #67	; 0x43
 8005872:	d10b      	bne.n	800588c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005874:	7943      	ldrb	r3, [r0, #5]
 8005876:	2b2b      	cmp	r3, #43	; 0x2b
 8005878:	d108      	bne.n	800588c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800587a:	7983      	ldrb	r3, [r0, #6]
 800587c:	2b2b      	cmp	r3, #43	; 0x2b
 800587e:	d105      	bne.n	800588c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005880:	79c0      	ldrb	r0, [r0, #7]
 8005882:	2801      	cmp	r0, #1
 8005884:	bf8c      	ite	hi
 8005886:	2000      	movhi	r0, #0
 8005888:	2001      	movls	r0, #1
 800588a:	4770      	bx	lr
 800588c:	2000      	movs	r0, #0
 800588e:	4770      	bx	lr

08005890 <__cxa_type_match>:
 8005890:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005894:	461d      	mov	r5, r3
 8005896:	7803      	ldrb	r3, [r0, #0]
 8005898:	460e      	mov	r6, r1
 800589a:	2b47      	cmp	r3, #71	; 0x47
 800589c:	4602      	mov	r2, r0
 800589e:	79c1      	ldrb	r1, [r0, #7]
 80058a0:	d113      	bne.n	80058ca <__cxa_type_match+0x3a>
 80058a2:	7843      	ldrb	r3, [r0, #1]
 80058a4:	2b4e      	cmp	r3, #78	; 0x4e
 80058a6:	d110      	bne.n	80058ca <__cxa_type_match+0x3a>
 80058a8:	7883      	ldrb	r3, [r0, #2]
 80058aa:	2b55      	cmp	r3, #85	; 0x55
 80058ac:	d10d      	bne.n	80058ca <__cxa_type_match+0x3a>
 80058ae:	78c3      	ldrb	r3, [r0, #3]
 80058b0:	2b43      	cmp	r3, #67	; 0x43
 80058b2:	d10a      	bne.n	80058ca <__cxa_type_match+0x3a>
 80058b4:	7903      	ldrb	r3, [r0, #4]
 80058b6:	2b46      	cmp	r3, #70	; 0x46
 80058b8:	d107      	bne.n	80058ca <__cxa_type_match+0x3a>
 80058ba:	7943      	ldrb	r3, [r0, #5]
 80058bc:	2b4f      	cmp	r3, #79	; 0x4f
 80058be:	d104      	bne.n	80058ca <__cxa_type_match+0x3a>
 80058c0:	7983      	ldrb	r3, [r0, #6]
 80058c2:	2b52      	cmp	r3, #82	; 0x52
 80058c4:	d101      	bne.n	80058ca <__cxa_type_match+0x3a>
 80058c6:	2900      	cmp	r1, #0
 80058c8:	d030      	beq.n	800592c <__cxa_type_match+0x9c>
 80058ca:	4610      	mov	r0, r2
 80058cc:	f7ff ffc3 	bl	8005856 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80058d0:	2300      	movs	r3, #0
 80058d2:	f080 0401 	eor.w	r4, r0, #1
 80058d6:	b2e4      	uxtb	r4, r4
 80058d8:	2000      	movs	r0, #0
 80058da:	9001      	str	r0, [sp, #4]
 80058dc:	bb4b      	cbnz	r3, 8005932 <__cxa_type_match+0xa2>
 80058de:	bb54      	cbnz	r4, 8005936 <__cxa_type_match+0xa6>
 80058e0:	2901      	cmp	r1, #1
 80058e2:	bf0a      	itet	eq
 80058e4:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 80058e8:	f1a2 0320 	subne.w	r3, r2, #32
 80058ec:	3b78      	subeq	r3, #120	; 0x78
 80058ee:	2901      	cmp	r1, #1
 80058f0:	bf0c      	ite	eq
 80058f2:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 80058f6:	3258      	addne	r2, #88	; 0x58
 80058f8:	681c      	ldr	r4, [r3, #0]
 80058fa:	9201      	str	r2, [sp, #4]
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	4620      	mov	r0, r4
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	4798      	blx	r3
 8005904:	b1c8      	cbz	r0, 800593a <__cxa_type_match+0xaa>
 8005906:	2702      	movs	r7, #2
 8005908:	9b01      	ldr	r3, [sp, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	6833      	ldr	r3, [r6, #0]
 8005910:	4621      	mov	r1, r4
 8005912:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005916:	4630      	mov	r0, r6
 8005918:	2301      	movs	r3, #1
 800591a:	aa01      	add	r2, sp, #4
 800591c:	47c0      	blx	r8
 800591e:	b170      	cbz	r0, 800593e <__cxa_type_match+0xae>
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	602b      	str	r3, [r5, #0]
 8005924:	4638      	mov	r0, r7
 8005926:	b002      	add	sp, #8
 8005928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800592c:	2301      	movs	r3, #1
 800592e:	460c      	mov	r4, r1
 8005930:	e7d2      	b.n	80058d8 <__cxa_type_match+0x48>
 8005932:	4c04      	ldr	r4, [pc, #16]	; (8005944 <__cxa_type_match+0xb4>)
 8005934:	e7e2      	b.n	80058fc <__cxa_type_match+0x6c>
 8005936:	4c04      	ldr	r4, [pc, #16]	; (8005948 <__cxa_type_match+0xb8>)
 8005938:	e7e0      	b.n	80058fc <__cxa_type_match+0x6c>
 800593a:	2701      	movs	r7, #1
 800593c:	e7e7      	b.n	800590e <__cxa_type_match+0x7e>
 800593e:	4607      	mov	r7, r0
 8005940:	e7f0      	b.n	8005924 <__cxa_type_match+0x94>
 8005942:	bf00      	nop
 8005944:	08006414 	.word	0x08006414
 8005948:	0800641c 	.word	0x0800641c

0800594c <__cxa_begin_cleanup>:
 800594c:	b510      	push	{r4, lr}
 800594e:	4604      	mov	r4, r0
 8005950:	f000 f81a 	bl	8005988 <__cxa_get_globals>
 8005954:	4602      	mov	r2, r0
 8005956:	4620      	mov	r0, r4
 8005958:	f1a4 0120 	sub.w	r1, r4, #32
 800595c:	f7ff ff7b 	bl	8005856 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005960:	b160      	cbz	r0, 800597c <__cxa_begin_cleanup+0x30>
 8005962:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005966:	3301      	adds	r3, #1
 8005968:	2b01      	cmp	r3, #1
 800596a:	f844 3c04 	str.w	r3, [r4, #-4]
 800596e:	d103      	bne.n	8005978 <__cxa_begin_cleanup+0x2c>
 8005970:	6893      	ldr	r3, [r2, #8]
 8005972:	f844 3c08 	str.w	r3, [r4, #-8]
 8005976:	6091      	str	r1, [r2, #8]
 8005978:	2001      	movs	r0, #1
 800597a:	bd10      	pop	{r4, pc}
 800597c:	6893      	ldr	r3, [r2, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f9      	beq.n	8005976 <__cxa_begin_cleanup+0x2a>
 8005982:	f000 fa8b 	bl	8005e9c <_ZSt9terminatev>
	...

08005988 <__cxa_get_globals>:
 8005988:	4800      	ldr	r0, [pc, #0]	; (800598c <__cxa_get_globals+0x4>)
 800598a:	4770      	bx	lr
 800598c:	20000208 	.word	0x20000208

08005990 <_ZL12read_uleb128PKhPm>:
 8005990:	2300      	movs	r3, #0
 8005992:	461a      	mov	r2, r3
 8005994:	b530      	push	{r4, r5, lr}
 8005996:	f810 5b01 	ldrb.w	r5, [r0], #1
 800599a:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 800599e:	4094      	lsls	r4, r2
 80059a0:	4323      	orrs	r3, r4
 80059a2:	062c      	lsls	r4, r5, #24
 80059a4:	f102 0207 	add.w	r2, r2, #7
 80059a8:	d4f5      	bmi.n	8005996 <_ZL12read_uleb128PKhPm+0x6>
 80059aa:	600b      	str	r3, [r1, #0]
 80059ac:	bd30      	pop	{r4, r5, pc}

080059ae <_ZL12read_sleb128PKhPl>:
 80059ae:	2300      	movs	r3, #0
 80059b0:	461a      	mov	r2, r3
 80059b2:	b530      	push	{r4, r5, lr}
 80059b4:	f810 4b01 	ldrb.w	r4, [r0], #1
 80059b8:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 80059bc:	4095      	lsls	r5, r2
 80059be:	432b      	orrs	r3, r5
 80059c0:	0625      	lsls	r5, r4, #24
 80059c2:	f102 0207 	add.w	r2, r2, #7
 80059c6:	d4f5      	bmi.n	80059b4 <_ZL12read_sleb128PKhPl+0x6>
 80059c8:	2a1f      	cmp	r2, #31
 80059ca:	d806      	bhi.n	80059da <_ZL12read_sleb128PKhPl+0x2c>
 80059cc:	0664      	lsls	r4, r4, #25
 80059ce:	bf42      	ittt	mi
 80059d0:	f04f 34ff 	movmi.w	r4, #4294967295
 80059d4:	fa04 f202 	lslmi.w	r2, r4, r2
 80059d8:	4313      	orrmi	r3, r2
 80059da:	600b      	str	r3, [r1, #0]
 80059dc:	bd30      	pop	{r4, r5, pc}

080059de <_ZL28read_encoded_value_with_basehjPKhPj>:
 80059de:	2850      	cmp	r0, #80	; 0x50
 80059e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80059e4:	4606      	mov	r6, r0
 80059e6:	4688      	mov	r8, r1
 80059e8:	4615      	mov	r5, r2
 80059ea:	461f      	mov	r7, r3
 80059ec:	d108      	bne.n	8005a00 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 80059ee:	1cd0      	adds	r0, r2, #3
 80059f0:	f020 0003 	bic.w	r0, r0, #3
 80059f4:	f850 4b04 	ldr.w	r4, [r0], #4
 80059f8:	603c      	str	r4, [r7, #0]
 80059fa:	b002      	add	sp, #8
 80059fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a00:	f000 030f 	and.w	r3, r0, #15
 8005a04:	2b0c      	cmp	r3, #12
 8005a06:	d82e      	bhi.n	8005a66 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8005a08:	e8df f003 	tbb	[pc, r3]
 8005a0c:	251d0725 	.word	0x251d0725
 8005a10:	2d2d2d29 	.word	0x2d2d2d29
 8005a14:	2521182d 	.word	0x2521182d
 8005a18:	29          	.byte	0x29
 8005a19:	00          	.byte	0x00
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	a901      	add	r1, sp, #4
 8005a1e:	f7ff ffb7 	bl	8005990 <_ZL12read_uleb128PKhPm>
 8005a22:	9c01      	ldr	r4, [sp, #4]
 8005a24:	2c00      	cmp	r4, #0
 8005a26:	d0e7      	beq.n	80059f8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8005a28:	f006 0370 	and.w	r3, r6, #112	; 0x70
 8005a2c:	2b10      	cmp	r3, #16
 8005a2e:	bf08      	it	eq
 8005a30:	46a8      	moveq	r8, r5
 8005a32:	0633      	lsls	r3, r6, #24
 8005a34:	4444      	add	r4, r8
 8005a36:	bf48      	it	mi
 8005a38:	6824      	ldrmi	r4, [r4, #0]
 8005a3a:	e7dd      	b.n	80059f8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	a901      	add	r1, sp, #4
 8005a40:	f7ff ffb5 	bl	80059ae <_ZL12read_sleb128PKhPl>
 8005a44:	e7ed      	b.n	8005a22 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8005a46:	4628      	mov	r0, r5
 8005a48:	f830 4b02 	ldrh.w	r4, [r0], #2
 8005a4c:	e7ea      	b.n	8005a24 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8005a54:	e7e6      	b.n	8005a24 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005a56:	4628      	mov	r0, r5
 8005a58:	f850 4b04 	ldr.w	r4, [r0], #4
 8005a5c:	e7e2      	b.n	8005a24 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f850 4b08 	ldr.w	r4, [r0], #8
 8005a64:	e7de      	b.n	8005a24 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005a66:	f000 fbc5 	bl	80061f4 <abort>

08005a6a <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8005a6a:	b508      	push	{r3, lr}
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2bff      	cmp	r3, #255	; 0xff
 8005a70:	4608      	mov	r0, r1
 8005a72:	d010      	beq.n	8005a96 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8005a74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a78:	2a30      	cmp	r2, #48	; 0x30
 8005a7a:	d012      	beq.n	8005aa2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8005a7c:	d807      	bhi.n	8005a8e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 8005a7e:	2a20      	cmp	r2, #32
 8005a80:	d00b      	beq.n	8005a9a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8005a82:	d802      	bhi.n	8005a8a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8005a84:	f013 0f60 	tst.w	r3, #96	; 0x60
 8005a88:	d005      	beq.n	8005a96 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8005a8a:	f000 fbb3 	bl	80061f4 <abort>
 8005a8e:	2a40      	cmp	r2, #64	; 0x40
 8005a90:	d00b      	beq.n	8005aaa <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8005a92:	2a50      	cmp	r2, #80	; 0x50
 8005a94:	d1f9      	bne.n	8005a8a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8005a96:	2000      	movs	r0, #0
 8005a98:	bd08      	pop	{r3, pc}
 8005a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005a9e:	f000 bc96 	b.w	80063ce <_Unwind_GetTextRelBase>
 8005aa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005aa6:	f000 bc8f 	b.w	80063c8 <_Unwind_GetDataRelBase>
 8005aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005aae:	f7fc b887 	b.w	8001bc0 <_Unwind_GetRegionStart>

08005ab2 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8005ab2:	b570      	push	{r4, r5, r6, lr}
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	4601      	mov	r1, r0
 8005ab8:	4620      	mov	r0, r4
 8005aba:	4615      	mov	r5, r2
 8005abc:	461e      	mov	r6, r3
 8005abe:	f7ff ffd4 	bl	8005a6a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005ac2:	4633      	mov	r3, r6
 8005ac4:	4601      	mov	r1, r0
 8005ac6:	462a      	mov	r2, r5
 8005ac8:	4620      	mov	r0, r4
 8005aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ace:	f7ff bf86 	b.w	80059de <_ZL28read_encoded_value_with_basehjPKhPj>

08005ad2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8005ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	4615      	mov	r5, r2
 8005ad8:	4606      	mov	r6, r0
 8005ada:	b328      	cbz	r0, 8005b28 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8005adc:	f7fc f870 	bl	8001bc0 <_Unwind_GetRegionStart>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	602b      	str	r3, [r5, #0]
 8005ae6:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005aea:	29ff      	cmp	r1, #255	; 0xff
 8005aec:	d01e      	beq.n	8005b2c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 8005aee:	4602      	mov	r2, r0
 8005af0:	1d2b      	adds	r3, r5, #4
 8005af2:	4630      	mov	r0, r6
 8005af4:	f7ff ffdd 	bl	8005ab2 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005af8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005afc:	2bff      	cmp	r3, #255	; 0xff
 8005afe:	752b      	strb	r3, [r5, #20]
 8005b00:	d016      	beq.n	8005b30 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8005b02:	2310      	movs	r3, #16
 8005b04:	a901      	add	r1, sp, #4
 8005b06:	752b      	strb	r3, [r5, #20]
 8005b08:	f7ff ff42 	bl	8005990 <_ZL12read_uleb128PKhPm>
 8005b0c:	9b01      	ldr	r3, [sp, #4]
 8005b0e:	4403      	add	r3, r0
 8005b10:	60eb      	str	r3, [r5, #12]
 8005b12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005b16:	a901      	add	r1, sp, #4
 8005b18:	756b      	strb	r3, [r5, #21]
 8005b1a:	f7ff ff39 	bl	8005990 <_ZL12read_uleb128PKhPm>
 8005b1e:	9b01      	ldr	r3, [sp, #4]
 8005b20:	4403      	add	r3, r0
 8005b22:	612b      	str	r3, [r5, #16]
 8005b24:	b002      	add	sp, #8
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	4603      	mov	r3, r0
 8005b2a:	e7da      	b.n	8005ae2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 8005b2c:	606b      	str	r3, [r5, #4]
 8005b2e:	e7e3      	b.n	8005af8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 8005b30:	2300      	movs	r3, #0
 8005b32:	e7ed      	b.n	8005b10 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08005b34 <_Unwind_GetGR>:
 8005b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b36:	ab03      	add	r3, sp, #12
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	460a      	mov	r2, r1
 8005b3e:	4619      	mov	r1, r3
 8005b40:	f7fb fa94 	bl	800106c <_Unwind_VRS_Get>
 8005b44:	9803      	ldr	r0, [sp, #12]
 8005b46:	b005      	add	sp, #20
 8005b48:	f85d fb04 	ldr.w	pc, [sp], #4

08005b4c <__gxx_personality_v0>:
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b52:	b091      	sub	sp, #68	; 0x44
 8005b54:	9305      	str	r3, [sp, #20]
 8005b56:	f000 0303 	and.w	r3, r0, #3
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	4617      	mov	r7, r2
 8005b62:	d00e      	beq.n	8005b82 <__gxx_personality_v0+0x36>
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d003      	beq.n	8005b70 <__gxx_personality_v0+0x24>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d13b      	bne.n	8005be4 <__gxx_personality_v0+0x98>
 8005b6c:	0701      	lsls	r1, r0, #28
 8005b6e:	d53b      	bpl.n	8005be8 <__gxx_personality_v0+0x9c>
 8005b70:	4639      	mov	r1, r7
 8005b72:	4620      	mov	r0, r4
 8005b74:	f7fc f80c 	bl	8001b90 <__gnu_unwind_frame>
 8005b78:	b390      	cbz	r0, 8005be0 <__gxx_personality_v0+0x94>
 8005b7a:	2009      	movs	r0, #9
 8005b7c:	b011      	add	sp, #68	; 0x44
 8005b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b82:	0702      	lsls	r2, r0, #28
 8005b84:	d406      	bmi.n	8005b94 <__gxx_personality_v0+0x48>
 8005b86:	6a0d      	ldr	r5, [r1, #32]
 8005b88:	4638      	mov	r0, r7
 8005b8a:	210d      	movs	r1, #13
 8005b8c:	f7ff ffd2 	bl	8005b34 <_Unwind_GetGR>
 8005b90:	4285      	cmp	r5, r0
 8005b92:	d02b      	beq.n	8005bec <__gxx_personality_v0+0xa0>
 8005b94:	2002      	movs	r0, #2
 8005b96:	2300      	movs	r3, #0
 8005b98:	f006 0608 	and.w	r6, r6, #8
 8005b9c:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8005ba0:	4306      	orrs	r6, r0
 8005ba2:	220c      	movs	r2, #12
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	f8cd a000 	str.w	sl, [sp]
 8005bac:	940a      	str	r4, [sp, #40]	; 0x28
 8005bae:	f7fb fa83 	bl	80010b8 <_Unwind_VRS_Set>
 8005bb2:	2e06      	cmp	r6, #6
 8005bb4:	d11c      	bne.n	8005bf0 <__gxx_personality_v0+0xa4>
 8005bb6:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 8005bba:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8005bbe:	f1b8 0f00 	cmp.w	r8, #0
 8005bc2:	bf0c      	ite	eq
 8005bc4:	f04f 0b01 	moveq.w	fp, #1
 8005bc8:	f04f 0b03 	movne.w	fp, #3
 8005bcc:	f016 0608 	ands.w	r6, r6, #8
 8005bd0:	f000 8107 	beq.w	8005de2 <__gxx_personality_v0+0x296>
 8005bd4:	f1bb 0f01 	cmp.w	fp, #1
 8005bd8:	f040 80ff 	bne.w	8005dda <__gxx_personality_v0+0x28e>
 8005bdc:	f000 f95e 	bl	8005e9c <_ZSt9terminatev>
 8005be0:	2008      	movs	r0, #8
 8005be2:	e7cb      	b.n	8005b7c <__gxx_personality_v0+0x30>
 8005be4:	f000 fb06 	bl	80061f4 <abort>
 8005be8:	2001      	movs	r0, #1
 8005bea:	e7d4      	b.n	8005b96 <__gxx_personality_v0+0x4a>
 8005bec:	2006      	movs	r0, #6
 8005bee:	e7d2      	b.n	8005b96 <__gxx_personality_v0+0x4a>
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	f7fb ffeb 	bl	8001bcc <_Unwind_GetLanguageSpecificData>
 8005bf6:	4681      	mov	r9, r0
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d0b9      	beq.n	8005b70 <__gxx_personality_v0+0x24>
 8005bfc:	4652      	mov	r2, sl
 8005bfe:	4601      	mov	r1, r0
 8005c00:	4638      	mov	r0, r7
 8005c02:	f7ff ff66 	bl	8005ad2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8005c06:	4639      	mov	r1, r7
 8005c08:	4605      	mov	r5, r0
 8005c0a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005c0e:	f7ff ff2c 	bl	8005a6a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005c12:	210f      	movs	r1, #15
 8005c14:	900c      	str	r0, [sp, #48]	; 0x30
 8005c16:	4638      	mov	r0, r7
 8005c18:	f7ff ff8c 	bl	8005b34 <_Unwind_GetGR>
 8005c1c:	f020 0801 	bic.w	r8, r0, #1
 8005c20:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c26:	42ab      	cmp	r3, r5
 8005c28:	f240 80bf 	bls.w	8005daa <__gxx_personality_v0+0x25e>
 8005c2c:	462a      	mov	r2, r5
 8005c2e:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005c32:	ab06      	add	r3, sp, #24
 8005c34:	2000      	movs	r0, #0
 8005c36:	f7ff ff3c 	bl	8005ab2 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005c3a:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005c3e:	4602      	mov	r2, r0
 8005c40:	ab07      	add	r3, sp, #28
 8005c42:	2000      	movs	r0, #0
 8005c44:	f7ff ff35 	bl	8005ab2 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005c48:	ab08      	add	r3, sp, #32
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005c50:	2000      	movs	r0, #0
 8005c52:	f7ff ff2e 	bl	8005ab2 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005c56:	a909      	add	r1, sp, #36	; 0x24
 8005c58:	f7ff fe9a 	bl	8005990 <_ZL12read_uleb128PKhPm>
 8005c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c5e:	9a06      	ldr	r2, [sp, #24]
 8005c60:	4605      	mov	r5, r0
 8005c62:	4413      	add	r3, r2
 8005c64:	4543      	cmp	r3, r8
 8005c66:	d901      	bls.n	8005c6c <__gxx_personality_v0+0x120>
 8005c68:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005c6a:	e7db      	b.n	8005c24 <__gxx_personality_v0+0xd8>
 8005c6c:	9a07      	ldr	r2, [sp, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	4543      	cmp	r3, r8
 8005c72:	d9d7      	bls.n	8005c24 <__gxx_personality_v0+0xd8>
 8005c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c78:	f1b8 0f00 	cmp.w	r8, #0
 8005c7c:	d001      	beq.n	8005c82 <__gxx_personality_v0+0x136>
 8005c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c80:	4498      	add	r8, r3
 8005c82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c84:	b115      	cbz	r5, 8005c8c <__gxx_personality_v0+0x140>
 8005c86:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005c88:	3d01      	subs	r5, #1
 8005c8a:	4405      	add	r5, r0
 8005c8c:	f1b8 0f00 	cmp.w	r8, #0
 8005c90:	f43f af6e 	beq.w	8005b70 <__gxx_personality_v0+0x24>
 8005c94:	2d00      	cmp	r5, #0
 8005c96:	f000 80f2 	beq.w	8005e7e <__gxx_personality_v0+0x332>
 8005c9a:	f016 0308 	ands.w	r3, r6, #8
 8005c9e:	9302      	str	r3, [sp, #8]
 8005ca0:	d034      	beq.n	8005d0c <__gxx_personality_v0+0x1c0>
 8005ca2:	2347      	movs	r3, #71	; 0x47
 8005ca4:	7023      	strb	r3, [r4, #0]
 8005ca6:	234e      	movs	r3, #78	; 0x4e
 8005ca8:	7063      	strb	r3, [r4, #1]
 8005caa:	2355      	movs	r3, #85	; 0x55
 8005cac:	70a3      	strb	r3, [r4, #2]
 8005cae:	2343      	movs	r3, #67	; 0x43
 8005cb0:	70e3      	strb	r3, [r4, #3]
 8005cb2:	2346      	movs	r3, #70	; 0x46
 8005cb4:	7123      	strb	r3, [r4, #4]
 8005cb6:	234f      	movs	r3, #79	; 0x4f
 8005cb8:	7163      	strb	r3, [r4, #5]
 8005cba:	2352      	movs	r3, #82	; 0x52
 8005cbc:	71a3      	strb	r3, [r4, #6]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	71e3      	strb	r3, [r4, #7]
 8005cc2:	f04f 0b00 	mov.w	fp, #0
 8005cc6:	a907      	add	r1, sp, #28
 8005cc8:	4628      	mov	r0, r5
 8005cca:	f7ff fe70 	bl	80059ae <_ZL12read_sleb128PKhPl>
 8005cce:	a908      	add	r1, sp, #32
 8005cd0:	9003      	str	r0, [sp, #12]
 8005cd2:	f7ff fe6c 	bl	80059ae <_ZL12read_sleb128PKhPl>
 8005cd6:	9907      	ldr	r1, [sp, #28]
 8005cd8:	2900      	cmp	r1, #0
 8005cda:	d063      	beq.n	8005da4 <__gxx_personality_v0+0x258>
 8005cdc:	dd3a      	ble.n	8005d54 <__gxx_personality_v0+0x208>
 8005cde:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005ce2:	28ff      	cmp	r0, #255	; 0xff
 8005ce4:	d032      	beq.n	8005d4c <__gxx_personality_v0+0x200>
 8005ce6:	f000 0307 	and.w	r3, r0, #7
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	f63f af7a 	bhi.w	8005be4 <__gxx_personality_v0+0x98>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <__gxx_personality_v0+0x1ac>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d51 	.word	0x08005d51
 8005cfc:	08005be5 	.word	0x08005be5
 8005d00:	08005d1f 	.word	0x08005d1f
 8005d04:	08005d51 	.word	0x08005d51
 8005d08:	08005d49 	.word	0x08005d49
 8005d0c:	79e3      	ldrb	r3, [r4, #7]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	bf0c      	ite	eq
 8005d12:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8005d16:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8005d1a:	9305      	str	r3, [sp, #20]
 8005d1c:	e7d1      	b.n	8005cc2 <__gxx_personality_v0+0x176>
 8005d1e:	2502      	movs	r5, #2
 8005d20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d22:	ab09      	add	r3, sp, #36	; 0x24
 8005d24:	fb05 2211 	mls	r2, r5, r1, r2
 8005d28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d2a:	f7ff fe58 	bl	80059de <_ZL28read_encoded_value_with_basehjPKhPj>
 8005d2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d30:	b131      	cbz	r1, 8005d40 <__gxx_personality_v0+0x1f4>
 8005d32:	b35c      	cbz	r4, 8005d8c <__gxx_personality_v0+0x240>
 8005d34:	2200      	movs	r2, #0
 8005d36:	4620      	mov	r0, r4
 8005d38:	ab05      	add	r3, sp, #20
 8005d3a:	f7ff fda9 	bl	8005890 <__cxa_type_match>
 8005d3e:	b328      	cbz	r0, 8005d8c <__gxx_personality_v0+0x240>
 8005d40:	f04f 0b03 	mov.w	fp, #3
 8005d44:	9d07      	ldr	r5, [sp, #28]
 8005d46:	e034      	b.n	8005db2 <__gxx_personality_v0+0x266>
 8005d48:	2508      	movs	r5, #8
 8005d4a:	e7e9      	b.n	8005d20 <__gxx_personality_v0+0x1d4>
 8005d4c:	2500      	movs	r5, #0
 8005d4e:	e7e7      	b.n	8005d20 <__gxx_personality_v0+0x1d4>
 8005d50:	2504      	movs	r5, #4
 8005d52:	e7e5      	b.n	8005d20 <__gxx_personality_v0+0x1d4>
 8005d54:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 8005d58:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 8005d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d5e:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8005d62:	313f      	adds	r1, #63	; 0x3f
 8005d64:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8005d68:	b1bc      	cbz	r4, 8005d9a <__gxx_personality_v0+0x24e>
 8005d6a:	9a02      	ldr	r2, [sp, #8]
 8005d6c:	b9aa      	cbnz	r2, 8005d9a <__gxx_personality_v0+0x24e>
 8005d6e:	9b05      	ldr	r3, [sp, #20]
 8005d70:	3d04      	subs	r5, #4
 8005d72:	9309      	str	r3, [sp, #36]	; 0x24
 8005d74:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8005d78:	2900      	cmp	r1, #0
 8005d7a:	d0e1      	beq.n	8005d40 <__gxx_personality_v0+0x1f4>
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4620      	mov	r0, r4
 8005d80:	ab09      	add	r3, sp, #36	; 0x24
 8005d82:	4429      	add	r1, r5
 8005d84:	f7ff fd84 	bl	8005890 <__cxa_type_match>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d0f3      	beq.n	8005d74 <__gxx_personality_v0+0x228>
 8005d8c:	9d08      	ldr	r5, [sp, #32]
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	d071      	beq.n	8005e76 <__gxx_personality_v0+0x32a>
 8005d92:	9b03      	ldr	r3, [sp, #12]
 8005d94:	442b      	add	r3, r5
 8005d96:	461d      	mov	r5, r3
 8005d98:	e795      	b.n	8005cc6 <__gxx_personality_v0+0x17a>
 8005d9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f4      	bne.n	8005d8c <__gxx_personality_v0+0x240>
 8005da2:	e7cd      	b.n	8005d40 <__gxx_personality_v0+0x1f4>
 8005da4:	f04f 0b01 	mov.w	fp, #1
 8005da8:	e7f0      	b.n	8005d8c <__gxx_personality_v0+0x240>
 8005daa:	2500      	movs	r5, #0
 8005dac:	f04f 0b01 	mov.w	fp, #1
 8005db0:	46a8      	mov	r8, r5
 8005db2:	07f3      	lsls	r3, r6, #31
 8005db4:	f57f af0a 	bpl.w	8005bcc <__gxx_personality_v0+0x80>
 8005db8:	f1bb 0f02 	cmp.w	fp, #2
 8005dbc:	f43f aed8 	beq.w	8005b70 <__gxx_personality_v0+0x24>
 8005dc0:	210d      	movs	r1, #13
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	9e05      	ldr	r6, [sp, #20]
 8005dc6:	f7ff feb5 	bl	8005b34 <_Unwind_GetGR>
 8005dca:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 8005dce:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8005dd2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8005dd6:	2006      	movs	r0, #6
 8005dd8:	e6d0      	b.n	8005b7c <__gxx_personality_v0+0x30>
 8005dda:	2d00      	cmp	r5, #0
 8005ddc:	da22      	bge.n	8005e24 <__gxx_personality_v0+0x2d8>
 8005dde:	f000 f86f 	bl	8005ec0 <_ZSt10unexpectedv>
 8005de2:	f1bb 0f01 	cmp.w	fp, #1
 8005de6:	d102      	bne.n	8005dee <__gxx_personality_v0+0x2a2>
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 f99a 	bl	8006122 <__cxa_call_terminate>
 8005dee:	2d00      	cmp	r5, #0
 8005df0:	da18      	bge.n	8005e24 <__gxx_personality_v0+0x2d8>
 8005df2:	4652      	mov	r2, sl
 8005df4:	4649      	mov	r1, r9
 8005df6:	4638      	mov	r0, r7
 8005df8:	f7ff fe6b 	bl	8005ad2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005e02:	f7ff fe32 	bl	8005a6a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005e06:	43eb      	mvns	r3, r5
 8005e08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e0a:	900c      	str	r0, [sp, #48]	; 0x30
 8005e0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e10:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8005e14:	b10a      	cbz	r2, 8005e1a <__gxx_personality_v0+0x2ce>
 8005e16:	3601      	adds	r6, #1
 8005e18:	e7fa      	b.n	8005e10 <__gxx_personality_v0+0x2c4>
 8005e1a:	2204      	movs	r2, #4
 8005e1c:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 8005e20:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8005e24:	2300      	movs	r3, #0
 8005e26:	ae09      	add	r6, sp, #36	; 0x24
 8005e28:	461a      	mov	r2, r3
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	9600      	str	r6, [sp, #0]
 8005e30:	9409      	str	r4, [sp, #36]	; 0x24
 8005e32:	f7fb f941 	bl	80010b8 <_Unwind_VRS_Set>
 8005e36:	2300      	movs	r3, #0
 8005e38:	2201      	movs	r2, #1
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	9600      	str	r6, [sp, #0]
 8005e40:	9509      	str	r5, [sp, #36]	; 0x24
 8005e42:	f7fb f939 	bl	80010b8 <_Unwind_VRS_Set>
 8005e46:	210f      	movs	r1, #15
 8005e48:	4638      	mov	r0, r7
 8005e4a:	f7ff fe73 	bl	8005b34 <_Unwind_GetGR>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f000 0001 	and.w	r0, r0, #1
 8005e54:	ea40 0008 	orr.w	r0, r0, r8
 8005e58:	9009      	str	r0, [sp, #36]	; 0x24
 8005e5a:	220f      	movs	r2, #15
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4638      	mov	r0, r7
 8005e60:	9600      	str	r6, [sp, #0]
 8005e62:	f7fb f929 	bl	80010b8 <_Unwind_VRS_Set>
 8005e66:	f1bb 0f02 	cmp.w	fp, #2
 8005e6a:	d102      	bne.n	8005e72 <__gxx_personality_v0+0x326>
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f7ff fd6d 	bl	800594c <__cxa_begin_cleanup>
 8005e72:	2007      	movs	r0, #7
 8005e74:	e682      	b.n	8005b7c <__gxx_personality_v0+0x30>
 8005e76:	f1bb 0f00 	cmp.w	fp, #0
 8005e7a:	f43f ae79 	beq.w	8005b70 <__gxx_personality_v0+0x24>
 8005e7e:	f04f 0b02 	mov.w	fp, #2
 8005e82:	e796      	b.n	8005db2 <__gxx_personality_v0+0x266>

08005e84 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005e84:	b508      	push	{r3, lr}
 8005e86:	4780      	blx	r0
 8005e88:	f000 f9b4 	bl	80061f4 <abort>

08005e8c <_ZSt13get_terminatev>:
 8005e8c:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <_ZSt13get_terminatev+0xc>)
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	f3bf 8f5b 	dmb	ish
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	20000014 	.word	0x20000014

08005e9c <_ZSt9terminatev>:
 8005e9c:	b508      	push	{r3, lr}
 8005e9e:	f7ff fff5 	bl	8005e8c <_ZSt13get_terminatev>
 8005ea2:	f7ff ffef 	bl	8005e84 <_ZN10__cxxabiv111__terminateEPFvvE>

08005ea6 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8005ea6:	b508      	push	{r3, lr}
 8005ea8:	4780      	blx	r0
 8005eaa:	f7ff fff7 	bl	8005e9c <_ZSt9terminatev>
	...

08005eb0 <_ZSt14get_unexpectedv>:
 8005eb0:	4b02      	ldr	r3, [pc, #8]	; (8005ebc <_ZSt14get_unexpectedv+0xc>)
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	f3bf 8f5b 	dmb	ish
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20000010 	.word	0x20000010

08005ec0 <_ZSt10unexpectedv>:
 8005ec0:	b508      	push	{r3, lr}
 8005ec2:	f7ff fff5 	bl	8005eb0 <_ZSt14get_unexpectedv>
 8005ec6:	f7ff ffee 	bl	8005ea6 <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08005ecc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4b02      	ldr	r3, [pc, #8]	; (8005edc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005ed2:	6003      	str	r3, [r0, #0]
 8005ed4:	f000 f8b4 	bl	8006040 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005ed8:	4620      	mov	r0, r4
 8005eda:	bd10      	pop	{r4, pc}
 8005edc:	080064a4 	.word	0x080064a4

08005ee0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	f7ff fff2 	bl	8005ecc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005ee8:	4620      	mov	r0, r4
 8005eea:	210c      	movs	r1, #12
 8005eec:	f7ff fcb1 	bl	8005852 <_ZdlPvj>
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	bd10      	pop	{r4, pc}

08005ef4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005efc:	4606      	mov	r6, r0
 8005efe:	4590      	cmp	r8, r2
 8005f00:	460f      	mov	r7, r1
 8005f02:	4615      	mov	r5, r2
 8005f04:	461c      	mov	r4, r3
 8005f06:	d00b      	beq.n	8005f20 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8005f08:	68b0      	ldr	r0, [r6, #8]
 8005f0a:	462a      	mov	r2, r5
 8005f0c:	6803      	ldr	r3, [r0, #0]
 8005f0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f12:	6a1e      	ldr	r6, [r3, #32]
 8005f14:	4639      	mov	r1, r7
 8005f16:	4623      	mov	r3, r4
 8005f18:	46b4      	mov	ip, r6
 8005f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1e:	4760      	bx	ip
 8005f20:	4619      	mov	r1, r3
 8005f22:	f000 f857 	bl	8005fd4 <_ZNKSt9type_infoeqERKS_>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d0ee      	beq.n	8005f08 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8005f2a:	2006      	movs	r0, #6
 8005f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005f30:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	460d      	mov	r5, r1
 8005f36:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8005f3a:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4681      	mov	r9, r0
 8005f42:	4617      	mov	r7, r2
 8005f44:	4698      	mov	r8, r3
 8005f46:	f000 f845 	bl	8005fd4 <_ZNKSt9type_infoeqERKS_>
 8005f4a:	b190      	cbz	r0, 8005f72 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	6034      	str	r4, [r6, #0]
 8005f50:	7137      	strb	r7, [r6, #4]
 8005f52:	db09      	blt.n	8005f68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8005f54:	442c      	add	r4, r5
 8005f56:	45a2      	cmp	sl, r4
 8005f58:	bf0c      	ite	eq
 8005f5a:	2406      	moveq	r4, #6
 8005f5c:	2401      	movne	r4, #1
 8005f5e:	71b4      	strb	r4, [r6, #6]
 8005f60:	2000      	movs	r0, #0
 8005f62:	b001      	add	sp, #4
 8005f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f68:	3502      	adds	r5, #2
 8005f6a:	d1f9      	bne.n	8005f60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	71b3      	strb	r3, [r6, #6]
 8005f70:	e7f6      	b.n	8005f60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005f72:	4554      	cmp	r4, sl
 8005f74:	d106      	bne.n	8005f84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005f76:	4659      	mov	r1, fp
 8005f78:	4648      	mov	r0, r9
 8005f7a:	f000 f82b 	bl	8005fd4 <_ZNKSt9type_infoeqERKS_>
 8005f7e:	b108      	cbz	r0, 8005f84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005f80:	7177      	strb	r7, [r6, #5]
 8005f82:	e7ed      	b.n	8005f60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005f84:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8005f88:	463a      	mov	r2, r7
 8005f8a:	6803      	ldr	r3, [r0, #0]
 8005f8c:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8005f90:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8005f94:	69dc      	ldr	r4, [r3, #28]
 8005f96:	4629      	mov	r1, r5
 8005f98:	4643      	mov	r3, r8
 8005f9a:	46a4      	mov	ip, r4
 8005f9c:	b001      	add	sp, #4
 8005f9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa2:	4760      	bx	ip

08005fa4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa8:	4607      	mov	r7, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	4615      	mov	r5, r2
 8005fae:	461e      	mov	r6, r3
 8005fb0:	f000 f879 	bl	80060a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005fb4:	b948      	cbnz	r0, 8005fca <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8005fb6:	68b8      	ldr	r0, [r7, #8]
 8005fb8:	462a      	mov	r2, r5
 8005fba:	6803      	ldr	r3, [r0, #0]
 8005fbc:	4621      	mov	r1, r4
 8005fbe:	699f      	ldr	r7, [r3, #24]
 8005fc0:	4633      	mov	r3, r6
 8005fc2:	46bc      	mov	ip, r7
 8005fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc8:	4760      	bx	ip
 8005fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005fce <_ZNSt9type_infoD1Ev>:
 8005fce:	4770      	bx	lr

08005fd0 <_ZNKSt9type_info14__is_pointer_pEv>:
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	4770      	bx	lr

08005fd4 <_ZNKSt9type_infoeqERKS_>:
 8005fd4:	4281      	cmp	r1, r0
 8005fd6:	b508      	push	{r3, lr}
 8005fd8:	d00e      	beq.n	8005ff8 <_ZNKSt9type_infoeqERKS_+0x24>
 8005fda:	6840      	ldr	r0, [r0, #4]
 8005fdc:	7803      	ldrb	r3, [r0, #0]
 8005fde:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe0:	d00c      	beq.n	8005ffc <_ZNKSt9type_infoeqERKS_+0x28>
 8005fe2:	6849      	ldr	r1, [r1, #4]
 8005fe4:	780b      	ldrb	r3, [r1, #0]
 8005fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe8:	bf08      	it	eq
 8005fea:	3101      	addeq	r1, #1
 8005fec:	f7fa f8b0 	bl	8000150 <strcmp>
 8005ff0:	fab0 f080 	clz	r0, r0
 8005ff4:	0940      	lsrs	r0, r0, #5
 8005ff6:	bd08      	pop	{r3, pc}
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	e7fc      	b.n	8005ff6 <_ZNKSt9type_infoeqERKS_+0x22>
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	e7fa      	b.n	8005ff6 <_ZNKSt9type_infoeqERKS_+0x22>

08006000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8006000:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006002:	2400      	movs	r4, #0
 8006004:	2310      	movs	r3, #16
 8006006:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800600a:	6803      	ldr	r3, [r0, #0]
 800600c:	4615      	mov	r5, r2
 800600e:	699e      	ldr	r6, [r3, #24]
 8006010:	e9cd 4400 	strd	r4, r4, [sp]
 8006014:	466b      	mov	r3, sp
 8006016:	6812      	ldr	r2, [r2, #0]
 8006018:	47b0      	blx	r6
 800601a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800601e:	f003 0306 	and.w	r3, r3, #6
 8006022:	2b06      	cmp	r3, #6
 8006024:	bf09      	itett	eq
 8006026:	2001      	moveq	r0, #1
 8006028:	4620      	movne	r0, r4
 800602a:	9b00      	ldreq	r3, [sp, #0]
 800602c:	602b      	streq	r3, [r5, #0]
 800602e:	b004      	add	sp, #16
 8006030:	bd70      	pop	{r4, r5, r6, pc}

08006032 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8006032:	9800      	ldr	r0, [sp, #0]
 8006034:	4290      	cmp	r0, r2
 8006036:	bf14      	ite	ne
 8006038:	2001      	movne	r0, #1
 800603a:	2006      	moveq	r0, #6
 800603c:	4770      	bx	lr
	...

08006040 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8006040:	b510      	push	{r4, lr}
 8006042:	4604      	mov	r4, r0
 8006044:	4b02      	ldr	r3, [pc, #8]	; (8006050 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8006046:	6003      	str	r3, [r0, #0]
 8006048:	f7ff ffc1 	bl	8005fce <_ZNSt9type_infoD1Ev>
 800604c:	4620      	mov	r0, r4
 800604e:	bd10      	pop	{r4, pc}
 8006050:	08006518 	.word	0x08006518

08006054 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8006054:	b510      	push	{r4, lr}
 8006056:	4604      	mov	r4, r0
 8006058:	f7ff fff2 	bl	8006040 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800605c:	4620      	mov	r0, r4
 800605e:	2108      	movs	r1, #8
 8006060:	f7ff fbf7 	bl	8005852 <_ZdlPvj>
 8006064:	4620      	mov	r0, r4
 8006066:	bd10      	pop	{r4, pc}

08006068 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8006068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006070:	461f      	mov	r7, r3
 8006072:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8006076:	4598      	cmp	r8, r3
 8006078:	4606      	mov	r6, r0
 800607a:	4615      	mov	r5, r2
 800607c:	d107      	bne.n	800608e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800607e:	9907      	ldr	r1, [sp, #28]
 8006080:	f7ff ffa8 	bl	8005fd4 <_ZNKSt9type_infoeqERKS_>
 8006084:	b118      	cbz	r0, 800608e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8006086:	7165      	strb	r5, [r4, #5]
 8006088:	2000      	movs	r0, #0
 800608a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800608e:	4639      	mov	r1, r7
 8006090:	4630      	mov	r0, r6
 8006092:	f7ff ff9f 	bl	8005fd4 <_ZNKSt9type_infoeqERKS_>
 8006096:	2800      	cmp	r0, #0
 8006098:	d0f6      	beq.n	8006088 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 800609a:	2301      	movs	r3, #1
 800609c:	f8c4 8000 	str.w	r8, [r4]
 80060a0:	7125      	strb	r5, [r4, #4]
 80060a2:	71a3      	strb	r3, [r4, #6]
 80060a4:	e7f0      	b.n	8006088 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080060a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80060a6:	b538      	push	{r3, r4, r5, lr}
 80060a8:	4615      	mov	r5, r2
 80060aa:	461c      	mov	r4, r3
 80060ac:	f7ff ff92 	bl	8005fd4 <_ZNKSt9type_infoeqERKS_>
 80060b0:	b120      	cbz	r0, 80060bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80060b2:	2308      	movs	r3, #8
 80060b4:	60e3      	str	r3, [r4, #12]
 80060b6:	2306      	movs	r3, #6
 80060b8:	6025      	str	r5, [r4, #0]
 80060ba:	7123      	strb	r3, [r4, #4]
 80060bc:	bd38      	pop	{r3, r4, r5, pc}

080060be <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80060be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c2:	4605      	mov	r5, r0
 80060c4:	460c      	mov	r4, r1
 80060c6:	4616      	mov	r6, r2
 80060c8:	461f      	mov	r7, r3
 80060ca:	f7ff ff83 	bl	8005fd4 <_ZNKSt9type_infoeqERKS_>
 80060ce:	b948      	cbnz	r0, 80060e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80060d0:	2f03      	cmp	r7, #3
 80060d2:	d807      	bhi.n	80060e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	4632      	mov	r2, r6
 80060d8:	4629      	mov	r1, r5
 80060da:	4620      	mov	r0, r4
 80060dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	4718      	bx	r3
 80060e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080060e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80060e8:	7803      	ldrb	r3, [r0, #0]
 80060ea:	2b47      	cmp	r3, #71	; 0x47
 80060ec:	d117      	bne.n	800611e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80060ee:	7843      	ldrb	r3, [r0, #1]
 80060f0:	2b4e      	cmp	r3, #78	; 0x4e
 80060f2:	d114      	bne.n	800611e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80060f4:	7883      	ldrb	r3, [r0, #2]
 80060f6:	2b55      	cmp	r3, #85	; 0x55
 80060f8:	d111      	bne.n	800611e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80060fa:	78c3      	ldrb	r3, [r0, #3]
 80060fc:	2b43      	cmp	r3, #67	; 0x43
 80060fe:	d10e      	bne.n	800611e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006100:	7903      	ldrb	r3, [r0, #4]
 8006102:	2b43      	cmp	r3, #67	; 0x43
 8006104:	d10b      	bne.n	800611e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006106:	7943      	ldrb	r3, [r0, #5]
 8006108:	2b2b      	cmp	r3, #43	; 0x2b
 800610a:	d108      	bne.n	800611e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800610c:	7983      	ldrb	r3, [r0, #6]
 800610e:	2b2b      	cmp	r3, #43	; 0x2b
 8006110:	d105      	bne.n	800611e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006112:	79c0      	ldrb	r0, [r0, #7]
 8006114:	2801      	cmp	r0, #1
 8006116:	bf8c      	ite	hi
 8006118:	2000      	movhi	r0, #0
 800611a:	2001      	movls	r0, #1
 800611c:	4770      	bx	lr
 800611e:	2000      	movs	r0, #0
 8006120:	4770      	bx	lr

08006122 <__cxa_call_terminate>:
 8006122:	b510      	push	{r4, lr}
 8006124:	4604      	mov	r4, r0
 8006126:	b148      	cbz	r0, 800613c <__cxa_call_terminate+0x1a>
 8006128:	f000 f83b 	bl	80061a2 <__cxa_begin_catch>
 800612c:	4620      	mov	r0, r4
 800612e:	f7ff ffdb 	bl	80060e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006132:	b118      	cbz	r0, 800613c <__cxa_call_terminate+0x1a>
 8006134:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8006138:	f7ff fea4 	bl	8005e84 <_ZN10__cxxabiv111__terminateEPFvvE>
 800613c:	f7ff feae 	bl	8005e9c <_ZSt9terminatev>

08006140 <__cxa_call_unexpected>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	4602      	mov	r2, r0
 8006144:	f7ff ffd0 	bl	80060e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006148:	4604      	mov	r4, r0
 800614a:	b140      	cbz	r0, 800615e <__cxa_call_unexpected+0x1e>
 800614c:	2500      	movs	r5, #0
 800614e:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8006152:	4610      	mov	r0, r2
 8006154:	f000 f825 	bl	80061a2 <__cxa_begin_catch>
 8006158:	b11d      	cbz	r5, 8006162 <__cxa_call_unexpected+0x22>
 800615a:	f7ff feb1 	bl	8005ec0 <_ZSt10unexpectedv>
 800615e:	2501      	movs	r5, #1
 8006160:	e7f7      	b.n	8006152 <__cxa_call_unexpected+0x12>
 8006162:	4620      	mov	r0, r4
 8006164:	f7ff fe9f 	bl	8005ea6 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08006168 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006168:	7803      	ldrb	r3, [r0, #0]
 800616a:	2b47      	cmp	r3, #71	; 0x47
 800616c:	d117      	bne.n	800619e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800616e:	7843      	ldrb	r3, [r0, #1]
 8006170:	2b4e      	cmp	r3, #78	; 0x4e
 8006172:	d114      	bne.n	800619e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006174:	7883      	ldrb	r3, [r0, #2]
 8006176:	2b55      	cmp	r3, #85	; 0x55
 8006178:	d111      	bne.n	800619e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800617a:	78c3      	ldrb	r3, [r0, #3]
 800617c:	2b43      	cmp	r3, #67	; 0x43
 800617e:	d10e      	bne.n	800619e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006180:	7903      	ldrb	r3, [r0, #4]
 8006182:	2b43      	cmp	r3, #67	; 0x43
 8006184:	d10b      	bne.n	800619e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006186:	7943      	ldrb	r3, [r0, #5]
 8006188:	2b2b      	cmp	r3, #43	; 0x2b
 800618a:	d108      	bne.n	800619e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800618c:	7983      	ldrb	r3, [r0, #6]
 800618e:	2b2b      	cmp	r3, #43	; 0x2b
 8006190:	d105      	bne.n	800619e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006192:	79c0      	ldrb	r0, [r0, #7]
 8006194:	2801      	cmp	r0, #1
 8006196:	bf8c      	ite	hi
 8006198:	2000      	movhi	r0, #0
 800619a:	2001      	movls	r0, #1
 800619c:	4770      	bx	lr
 800619e:	2000      	movs	r0, #0
 80061a0:	4770      	bx	lr

080061a2 <__cxa_begin_catch>:
 80061a2:	b538      	push	{r3, r4, r5, lr}
 80061a4:	4604      	mov	r4, r0
 80061a6:	f7ff fbef 	bl	8005988 <__cxa_get_globals>
 80061aa:	4602      	mov	r2, r0
 80061ac:	6805      	ldr	r5, [r0, #0]
 80061ae:	4620      	mov	r0, r4
 80061b0:	f1a4 0120 	sub.w	r1, r4, #32
 80061b4:	f7ff ffd8 	bl	8006168 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80061b8:	b928      	cbnz	r0, 80061c6 <__cxa_begin_catch+0x24>
 80061ba:	b10d      	cbz	r5, 80061c0 <__cxa_begin_catch+0x1e>
 80061bc:	f7ff fe6e 	bl	8005e9c <_ZSt9terminatev>
 80061c0:	6011      	str	r1, [r2, #0]
 80061c2:	4628      	mov	r0, r5
 80061c4:	bd38      	pop	{r3, r4, r5, pc}
 80061c6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80061ca:	4620      	mov	r0, r4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bfb4      	ite	lt
 80061d0:	f1c3 0301 	rsblt	r3, r3, #1
 80061d4:	3301      	addge	r3, #1
 80061d6:	f844 3c0c 	str.w	r3, [r4, #-12]
 80061da:	6853      	ldr	r3, [r2, #4]
 80061dc:	428d      	cmp	r5, r1
 80061de:	f103 33ff 	add.w	r3, r3, #4294967295
 80061e2:	6053      	str	r3, [r2, #4]
 80061e4:	bf1c      	itt	ne
 80061e6:	f844 5c10 	strne.w	r5, [r4, #-16]
 80061ea:	6011      	strne	r1, [r2, #0]
 80061ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80061ee:	f7fa ff35 	bl	800105c <_Unwind_Complete>
 80061f2:	e7e6      	b.n	80061c2 <__cxa_begin_catch+0x20>

080061f4 <abort>:
 80061f4:	2006      	movs	r0, #6
 80061f6:	b508      	push	{r3, lr}
 80061f8:	f000 f8bc 	bl	8006374 <raise>
 80061fc:	2001      	movs	r0, #1
 80061fe:	f7fd fb79 	bl	80038f4 <_exit>
	...

08006204 <__errno>:
 8006204:	4b01      	ldr	r3, [pc, #4]	; (800620c <__errno+0x8>)
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	20000018 	.word	0x20000018

08006210 <__libc_init_array>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	2600      	movs	r6, #0
 8006214:	4d0c      	ldr	r5, [pc, #48]	; (8006248 <__libc_init_array+0x38>)
 8006216:	4c0d      	ldr	r4, [pc, #52]	; (800624c <__libc_init_array+0x3c>)
 8006218:	1b64      	subs	r4, r4, r5
 800621a:	10a4      	asrs	r4, r4, #2
 800621c:	42a6      	cmp	r6, r4
 800621e:	d109      	bne.n	8006234 <__libc_init_array+0x24>
 8006220:	f000 f8d8 	bl	80063d4 <_init>
 8006224:	2600      	movs	r6, #0
 8006226:	4d0a      	ldr	r5, [pc, #40]	; (8006250 <__libc_init_array+0x40>)
 8006228:	4c0a      	ldr	r4, [pc, #40]	; (8006254 <__libc_init_array+0x44>)
 800622a:	1b64      	subs	r4, r4, r5
 800622c:	10a4      	asrs	r4, r4, #2
 800622e:	42a6      	cmp	r6, r4
 8006230:	d105      	bne.n	800623e <__libc_init_array+0x2e>
 8006232:	bd70      	pop	{r4, r5, r6, pc}
 8006234:	f855 3b04 	ldr.w	r3, [r5], #4
 8006238:	4798      	blx	r3
 800623a:	3601      	adds	r6, #1
 800623c:	e7ee      	b.n	800621c <__libc_init_array+0xc>
 800623e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006242:	4798      	blx	r3
 8006244:	3601      	adds	r6, #1
 8006246:	e7f2      	b.n	800622e <__libc_init_array+0x1e>
 8006248:	080067cc 	.word	0x080067cc
 800624c:	080067cc 	.word	0x080067cc
 8006250:	080067cc 	.word	0x080067cc
 8006254:	080067dc 	.word	0x080067dc

08006258 <free>:
 8006258:	4b02      	ldr	r3, [pc, #8]	; (8006264 <free+0xc>)
 800625a:	4601      	mov	r1, r0
 800625c:	6818      	ldr	r0, [r3, #0]
 800625e:	f000 b819 	b.w	8006294 <_free_r>
 8006262:	bf00      	nop
 8006264:	20000018 	.word	0x20000018

08006268 <memcpy>:
 8006268:	440a      	add	r2, r1
 800626a:	4291      	cmp	r1, r2
 800626c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006270:	d100      	bne.n	8006274 <memcpy+0xc>
 8006272:	4770      	bx	lr
 8006274:	b510      	push	{r4, lr}
 8006276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800627a:	4291      	cmp	r1, r2
 800627c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006280:	d1f9      	bne.n	8006276 <memcpy+0xe>
 8006282:	bd10      	pop	{r4, pc}

08006284 <memset>:
 8006284:	4603      	mov	r3, r0
 8006286:	4402      	add	r2, r0
 8006288:	4293      	cmp	r3, r2
 800628a:	d100      	bne.n	800628e <memset+0xa>
 800628c:	4770      	bx	lr
 800628e:	f803 1b01 	strb.w	r1, [r3], #1
 8006292:	e7f9      	b.n	8006288 <memset+0x4>

08006294 <_free_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4605      	mov	r5, r0
 8006298:	2900      	cmp	r1, #0
 800629a:	d040      	beq.n	800631e <_free_r+0x8a>
 800629c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a0:	1f0c      	subs	r4, r1, #4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bfb8      	it	lt
 80062a6:	18e4      	addlt	r4, r4, r3
 80062a8:	f000 f880 	bl	80063ac <__malloc_lock>
 80062ac:	4a1c      	ldr	r2, [pc, #112]	; (8006320 <_free_r+0x8c>)
 80062ae:	6813      	ldr	r3, [r2, #0]
 80062b0:	b933      	cbnz	r3, 80062c0 <_free_r+0x2c>
 80062b2:	6063      	str	r3, [r4, #4]
 80062b4:	6014      	str	r4, [r2, #0]
 80062b6:	4628      	mov	r0, r5
 80062b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062bc:	f000 b87c 	b.w	80063b8 <__malloc_unlock>
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d908      	bls.n	80062d6 <_free_r+0x42>
 80062c4:	6820      	ldr	r0, [r4, #0]
 80062c6:	1821      	adds	r1, r4, r0
 80062c8:	428b      	cmp	r3, r1
 80062ca:	bf01      	itttt	eq
 80062cc:	6819      	ldreq	r1, [r3, #0]
 80062ce:	685b      	ldreq	r3, [r3, #4]
 80062d0:	1809      	addeq	r1, r1, r0
 80062d2:	6021      	streq	r1, [r4, #0]
 80062d4:	e7ed      	b.n	80062b2 <_free_r+0x1e>
 80062d6:	461a      	mov	r2, r3
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	b10b      	cbz	r3, 80062e0 <_free_r+0x4c>
 80062dc:	42a3      	cmp	r3, r4
 80062de:	d9fa      	bls.n	80062d6 <_free_r+0x42>
 80062e0:	6811      	ldr	r1, [r2, #0]
 80062e2:	1850      	adds	r0, r2, r1
 80062e4:	42a0      	cmp	r0, r4
 80062e6:	d10b      	bne.n	8006300 <_free_r+0x6c>
 80062e8:	6820      	ldr	r0, [r4, #0]
 80062ea:	4401      	add	r1, r0
 80062ec:	1850      	adds	r0, r2, r1
 80062ee:	4283      	cmp	r3, r0
 80062f0:	6011      	str	r1, [r2, #0]
 80062f2:	d1e0      	bne.n	80062b6 <_free_r+0x22>
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	4401      	add	r1, r0
 80062fa:	6011      	str	r1, [r2, #0]
 80062fc:	6053      	str	r3, [r2, #4]
 80062fe:	e7da      	b.n	80062b6 <_free_r+0x22>
 8006300:	d902      	bls.n	8006308 <_free_r+0x74>
 8006302:	230c      	movs	r3, #12
 8006304:	602b      	str	r3, [r5, #0]
 8006306:	e7d6      	b.n	80062b6 <_free_r+0x22>
 8006308:	6820      	ldr	r0, [r4, #0]
 800630a:	1821      	adds	r1, r4, r0
 800630c:	428b      	cmp	r3, r1
 800630e:	bf01      	itttt	eq
 8006310:	6819      	ldreq	r1, [r3, #0]
 8006312:	685b      	ldreq	r3, [r3, #4]
 8006314:	1809      	addeq	r1, r1, r0
 8006316:	6021      	streq	r1, [r4, #0]
 8006318:	6063      	str	r3, [r4, #4]
 800631a:	6054      	str	r4, [r2, #4]
 800631c:	e7cb      	b.n	80062b6 <_free_r+0x22>
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	20000214 	.word	0x20000214

08006324 <_raise_r>:
 8006324:	291f      	cmp	r1, #31
 8006326:	b538      	push	{r3, r4, r5, lr}
 8006328:	4604      	mov	r4, r0
 800632a:	460d      	mov	r5, r1
 800632c:	d904      	bls.n	8006338 <_raise_r+0x14>
 800632e:	2316      	movs	r3, #22
 8006330:	6003      	str	r3, [r0, #0]
 8006332:	f04f 30ff 	mov.w	r0, #4294967295
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800633a:	b112      	cbz	r2, 8006342 <_raise_r+0x1e>
 800633c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006340:	b94b      	cbnz	r3, 8006356 <_raise_r+0x32>
 8006342:	4620      	mov	r0, r4
 8006344:	f000 f830 	bl	80063a8 <_getpid_r>
 8006348:	462a      	mov	r2, r5
 800634a:	4601      	mov	r1, r0
 800634c:	4620      	mov	r0, r4
 800634e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006352:	f000 b817 	b.w	8006384 <_kill_r>
 8006356:	2b01      	cmp	r3, #1
 8006358:	d00a      	beq.n	8006370 <_raise_r+0x4c>
 800635a:	1c59      	adds	r1, r3, #1
 800635c:	d103      	bne.n	8006366 <_raise_r+0x42>
 800635e:	2316      	movs	r3, #22
 8006360:	6003      	str	r3, [r0, #0]
 8006362:	2001      	movs	r0, #1
 8006364:	e7e7      	b.n	8006336 <_raise_r+0x12>
 8006366:	2400      	movs	r4, #0
 8006368:	4628      	mov	r0, r5
 800636a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800636e:	4798      	blx	r3
 8006370:	2000      	movs	r0, #0
 8006372:	e7e0      	b.n	8006336 <_raise_r+0x12>

08006374 <raise>:
 8006374:	4b02      	ldr	r3, [pc, #8]	; (8006380 <raise+0xc>)
 8006376:	4601      	mov	r1, r0
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	f7ff bfd3 	b.w	8006324 <_raise_r>
 800637e:	bf00      	nop
 8006380:	20000018 	.word	0x20000018

08006384 <_kill_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	2300      	movs	r3, #0
 8006388:	4d06      	ldr	r5, [pc, #24]	; (80063a4 <_kill_r+0x20>)
 800638a:	4604      	mov	r4, r0
 800638c:	4608      	mov	r0, r1
 800638e:	4611      	mov	r1, r2
 8006390:	602b      	str	r3, [r5, #0]
 8006392:	f7fd fa9f 	bl	80038d4 <_kill>
 8006396:	1c43      	adds	r3, r0, #1
 8006398:	d102      	bne.n	80063a0 <_kill_r+0x1c>
 800639a:	682b      	ldr	r3, [r5, #0]
 800639c:	b103      	cbz	r3, 80063a0 <_kill_r+0x1c>
 800639e:	6023      	str	r3, [r4, #0]
 80063a0:	bd38      	pop	{r3, r4, r5, pc}
 80063a2:	bf00      	nop
 80063a4:	20000218 	.word	0x20000218

080063a8 <_getpid_r>:
 80063a8:	f7fd ba8d 	b.w	80038c6 <_getpid>

080063ac <__malloc_lock>:
 80063ac:	4801      	ldr	r0, [pc, #4]	; (80063b4 <__malloc_lock+0x8>)
 80063ae:	f000 b809 	b.w	80063c4 <__retarget_lock_acquire_recursive>
 80063b2:	bf00      	nop
 80063b4:	2000021c 	.word	0x2000021c

080063b8 <__malloc_unlock>:
 80063b8:	4801      	ldr	r0, [pc, #4]	; (80063c0 <__malloc_unlock+0x8>)
 80063ba:	f000 b804 	b.w	80063c6 <__retarget_lock_release_recursive>
 80063be:	bf00      	nop
 80063c0:	2000021c 	.word	0x2000021c

080063c4 <__retarget_lock_acquire_recursive>:
 80063c4:	4770      	bx	lr

080063c6 <__retarget_lock_release_recursive>:
 80063c6:	4770      	bx	lr

080063c8 <_Unwind_GetDataRelBase>:
 80063c8:	b508      	push	{r3, lr}
 80063ca:	f7ff ff13 	bl	80061f4 <abort>

080063ce <_Unwind_GetTextRelBase>:
 80063ce:	b508      	push	{r3, lr}
 80063d0:	f7ff fffa 	bl	80063c8 <_Unwind_GetDataRelBase>

080063d4 <_init>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	bf00      	nop
 80063d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063da:	bc08      	pop	{r3}
 80063dc:	469e      	mov	lr, r3
 80063de:	4770      	bx	lr

080063e0 <_fini>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	bf00      	nop
 80063e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e6:	bc08      	pop	{r3}
 80063e8:	469e      	mov	lr, r3
 80063ea:	4770      	bx	lr
